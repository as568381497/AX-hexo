{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/iOS安全之HTTPS加密/1.png","path":"images/iOS安全之HTTPS加密/1.png","modified":0,"renderable":0},{"_id":"source/images/iOS安全之HTTPS加密/2.png","path":"images/iOS安全之HTTPS加密/2.png","modified":0,"renderable":0},{"_id":"source/images/个人博客搭建/1.png","path":"images/个人博客搭建/1.png","modified":0,"renderable":0},{"_id":"source/images/个人博客搭建/3.png","path":"images/个人博客搭建/3.png","modified":0,"renderable":0},{"_id":"source/images/个人博客搭建/2.png","path":"images/个人博客搭建/2.png","modified":0,"renderable":0},{"_id":"source/images/个人博客搭建/4.png","path":"images/个人博客搭建/4.png","modified":0,"renderable":0},{"_id":"source/images/个人博客搭建/5.png","path":"images/个人博客搭建/5.png","modified":0,"renderable":0},{"_id":"source/images/大理记忆/1.jpeg","path":"images/大理记忆/1.jpeg","modified":0,"renderable":0},{"_id":"source/images/大理记忆/2.jpeg","path":"images/大理记忆/2.jpeg","modified":0,"renderable":0},{"_id":"source/images/大理记忆/3.jpeg","path":"images/大理记忆/3.jpeg","modified":0,"renderable":0},{"_id":"source/images/大理记忆/4.jpeg","path":"images/大理记忆/4.jpeg","modified":0,"renderable":0},{"_id":"source/images/大理记忆/5.jpeg","path":"images/大理记忆/5.jpeg","modified":0,"renderable":0},{"_id":"source/images/大理记忆/6.jpeg","path":"images/大理记忆/6.jpeg","modified":0,"renderable":0},{"_id":"source/images/大理记忆/7.jpeg","path":"images/大理记忆/7.jpeg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-Chic/source/favicon.png","path":"favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/layout.styl","path":"css/layout.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/media.styl","path":"css/media.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/font.styl","path":"css/font.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/normalize.styl","path":"css/normalize.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/css/variable.styl","path":"css/variable.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/image/avatar.jpg","path":"image/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/demo.css","path":"fonts/iconfont/demo.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/demo_index.html","path":"fonts/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.css","path":"fonts/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.eot","path":"fonts/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.js","path":"fonts/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.svg","path":"fonts/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.woff","path":"fonts/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.ttf","path":"fonts/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.woff2","path":"fonts/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.TTF","path":"fonts/lanting/lanting.TTF","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.eot","path":"fonts/lanting/lanting.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.woff","path":"fonts/lanting/lanting.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.otf","path":"fonts/lanting/lanting.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.woff2","path":"fonts/lanting/lanting.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"26285131610f11e77662988aad0e9d6f082502c5","modified":1670118307000},{"_id":"source/CNAME","hash":"399435e40e34c56c541e2f3ceb250ec761198584","modified":1670118307000},{"_id":"source/_posts/.DS_Store","hash":"0f719e39b54c2a6398b7128e09350617fd8c1a03","modified":1670118307000},{"_id":"source/about/.DS_Store","hash":"3e4b437d132ad9469323eb4f13ac05b155969c27","modified":1670118307000},{"_id":"source/about/index.md","hash":"30e8a6664240dad210b113d2e8e8c0b321ae7ec0","modified":1670118307000},{"_id":"source/category/.DS_Store","hash":"45673a8ec47535550c1655fb6f129816c4bf94f9","modified":1670118307000},{"_id":"source/category/index.md","hash":"22ae6068432beeadf01bcab3fa584438e8453269","modified":1670118307000},{"_id":"source/images/.DS_Store","hash":"806b1cbbefec0ddfbcbd69621361d707e728b2da","modified":1670118307000},{"_id":"source/tag/index.md","hash":"b7d1bef3695832ad3e43bbd766370d830e125073","modified":1670118307000},{"_id":"source/_posts/2019/.DS_Store","hash":"49c1aff08b7468f73f1593bf20077a32855cd20b","modified":1670118307000},{"_id":"source/_posts/2019/PyQt4之网络请求及图片加载.md","hash":"799d60df8949f91da1ebfb68d95424f19ac82b08","modified":1670118307000},{"_id":"source/_posts/2019/PyQt4坑集合（一）.md","hash":"37d2a35100a6dcc97d50a21e6bfc86a6bd9d2ffd","modified":1670118307000},{"_id":"source/_posts/2019/PyQt4坑集合（二）.md","hash":"0c68a7b78dc11cb33c11dd47b7ff2c299042c14e","modified":1670118307000},{"_id":"source/_posts/2019/PyQt之分离多线程.md","hash":"2e42daaa8bfb1f4cc6ccca1e127f7aded7b618db","modified":1670118307000},{"_id":"source/_posts/2019/PyQt项目小结.md","hash":"f5aad0bed157badabd2f963b08a9987a4a0e4a47","modified":1670118307000},{"_id":"source/_posts/2019/py文件打包.md","hash":"57ab74398b6fa7fd286966143a104778b3282a28","modified":1670118307000},{"_id":"source/_posts/2019/阶段小结（四）.md","hash":"2f52897d42107f9a26e449d6d7271ba61b323840","modified":1670118307000},{"_id":"source/_posts/2017/.DS_Store","hash":"e82b771e6238a7fefe0e33faa1b247f4d67c5b6b","modified":1670118307000},{"_id":"source/_posts/2017/Hello World.md","hash":"77fae12d51edb79221f718b876043a05f98f2a04","modified":1670118307000},{"_id":"source/_posts/2017/阶段小结（一）.md","hash":"75dbdf043af9abc6463b5c70fad7550ac063e551","modified":1670118307000},{"_id":"source/_posts/2017/阶段小结（二）.md","hash":"3f07468d01dca3e664c238cbcc0364c5ae2db7bf","modified":1670118307000},{"_id":"source/_posts/2017/个人博客搭建.md","hash":"40c2ecea3a4bf124e946cdc99dc2707bc0af685e","modified":1670118307000},{"_id":"source/_posts/2018/.DS_Store","hash":"aa69be7518778fbc4ad14b3bb2da30969d9607b9","modified":1670118307000},{"_id":"source/_posts/2018/关于HipHop.md","hash":"3d084a2d577459cf134ba975387024c594058881","modified":1670118307000},{"_id":"source/_posts/2018/关于健身.md","hash":"e91d78e1929003f6205437cfbbbad9a3c8edfde2","modified":1670118307000},{"_id":"source/_posts/2018/我的大学舍友.md","hash":"d6c8707f759202301a83aa64d1c72c153db677aa","modified":1670118307000},{"_id":"source/_posts/2018/大理记忆.md","hash":"252ed94d9354fdea110a4c20ce108e1eb1697f22","modified":1670118307000},{"_id":"source/_posts/2018/阶段小结（三）.md","hash":"90d36391837c119089c00ca53544896667dfaf43","modified":1670118307000},{"_id":"source/_posts/2021/.DS_Store","hash":"10b9726d24281df0e56dbf214c9586ca8737f420","modified":1670118307000},{"_id":"source/_posts/2023/iOS之静态库生成.md","hash":"77913f3a909f4e0502eb28788901e9c4043945ea","modified":1708935588889},{"_id":"source/_posts/2021/WEB端接入阿里多人音视频通信.md","hash":"87b29b823d5df286858a97feb0e06fcb82a49130","modified":1670118307000},{"_id":"source/_posts/2021/SwiftUI之登陆界面.md","hash":"f05d00db4f04eba66c0a29abdc6743ec04be8bc8","modified":1670118307000},{"_id":"source/_posts/2021/iOS-模拟定位.md","hash":"16721f2fb2864d7c4b56380d0167cfba3d37417d","modified":1670118307000},{"_id":"source/_posts/2022/.DS_Store","hash":"8c02957dbaed446a921826b56da3e7d08ea13b30","modified":1670118307000},{"_id":"source/_posts/2022/iOS之开屏页图片加载问题.md","hash":"1ff3ed00572d50e79e2b7c698349fd86308d8f6d","modified":1670118307000},{"_id":"source/_posts/2022/iOS安全之HTTPS加密.md","hash":"8268d13461234ca490bb6a0afdfd27566428ac3d","modified":1670118307000},{"_id":"source/images/iOS安全之HTTPS加密/1.png","hash":"7ec31482062c240a190f22b38345567a1c75ee64","modified":1670118307000},{"_id":"source/images/iOS安全之HTTPS加密/.DS_Store","hash":"20e64515019125d3ad84293fb0b3f63628cbea3b","modified":1670118307000},{"_id":"source/images/iOS安全之HTTPS加密/2.png","hash":"a07629312d2b6e5a3dfb8a5d36ece82036e7f401","modified":1670118307000},{"_id":"source/images/个人博客搭建/.DS_Store","hash":"fb017d225cb5b40ddd705622fc86fbacf8d194b3","modified":1670118307000},{"_id":"source/images/个人博客搭建/1.png","hash":"70521c92a21378ed9d54ab64678bad924f3dabcb","modified":1670118307000},{"_id":"source/images/个人博客搭建/5.png","hash":"3beb7414974b04e66cd68e666131cd418520daca","modified":1670118307000},{"_id":"source/images/大理记忆/.DS_Store","hash":"c2c6aa76fcf0f510c8f631040d36e261150f5057","modified":1670118307000},{"_id":"source/images/大理记忆/3.jpeg","hash":"f88dac9337f70fee2a2f943cb0b27baf4ed74865","modified":1670118307000},{"_id":"source/images/个人博客搭建/2.png","hash":"eb28ada12597656945ec969d169179df19661174","modified":1670118307000},{"_id":"source/images/个人博客搭建/4.png","hash":"c7073df5991bb637957d4edefedf199b62c52985","modified":1670118307000},{"_id":"source/images/个人博客搭建/3.png","hash":"93f4b4a91fb2039ba7bd3fa69f65c6c3e558e814","modified":1670118307000},{"_id":"source/images/大理记忆/1.jpeg","hash":"43cac9cdcc9854b24e5cc8815bb5a6fa6d5bb2ef","modified":1670118307000},{"_id":"source/images/大理记忆/5.jpeg","hash":"c8d801bbcd4b6e258d604a41617eced8cc809055","modified":1670118307000},{"_id":"source/images/大理记忆/7.jpeg","hash":"3f2ac6f72a72df1f04f0bd5ebf2dd87a91974876","modified":1670118307000},{"_id":"source/images/大理记忆/2.jpeg","hash":"34d295313bd224d5533a1cbc95235217927ba36c","modified":1670118307000},{"_id":"source/images/大理记忆/4.jpeg","hash":"d4c87a4a218f7adc3e10ab213612df87150c6998","modified":1670118307000},{"_id":"source/images/大理记忆/6.jpeg","hash":"108c52726aaa5110bd4a4f76bbba75cbc09407ef","modified":1670118307000},{"_id":"themes/hexo-theme-Chic/scripts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/.DS_Store","hash":"39f1e36063d8b4dcb24bce4b848707dcc839b4d8","modified":1577340578000},{"_id":"themes/hexo-theme-Chic/ChangeLogs.md","hash":"8c2aa7e1c2db5c4e84787347632caa2d231b872f","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/LICENSE.md","hash":"9911bdafa287bd65a822f84cc12012980bd10247","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/README.md","hash":"52c5e259517f03d4bb3aa3fa4abb6b4c5f6993ca","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/_config.yml","hash":"ce3800eb8a43cdbbe291a1878a6928438a7e7a85","modified":1565059460000},{"_id":"themes/hexo-theme-Chic/package.json","hash":"8b4072879307eed0e74ae35390825c5e03b9229c","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/archive.ejs","hash":"48cdf67b628eb6a1c24d484ed252f5b0e3f06ddf","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/category.ejs","hash":"cae7483c92ff639f74f8efe67959f37c97350800","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/index.ejs","hash":"b3344720176ad12dc88745cc5b31d497356ca4fa","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/layout.ejs","hash":"fb3fd5e7a148426659d738f8b49aa9d155d4f558","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/page.ejs","hash":"3179c527694a789760742e1923c7ac5f94b4997c","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/post.ejs","hash":"a23f83d6c559ce88588472267468a54488d50e8e","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/tag.ejs","hash":"d85ca78392be138b1589499cba95186b20c3a902","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/.DS_Store","hash":"bce4d664778a03cec4c91dcc4d136852a182b344","modified":1577340578000},{"_id":"themes/hexo-theme-Chic/layout/_page/category.ejs","hash":"e8464e11d08a711fe815ea1cd101aa41d7310ebf","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/_page/archive.ejs","hash":"464549286c92ea0d6cb057c6936e0f1a5d1c1dd2","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/_page/page.ejs","hash":"1d875d59cf4d6b681cc8cf755f19b5355e5d1144","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/_page/tag.ejs","hash":"0c20ff00532103f9a59639ca9956fc0bce4aabc2","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/_page/post.ejs","hash":"7001f46d4dae28eabd936f0306cc4ae61eb646bd","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/_partial/footer.ejs","hash":"712489f99a7e78d92166899d5b5985d439374c05","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/_page/profile.ejs","hash":"c6d3cf2ef90e5d0fd580e7cff1db47c28fb36037","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/_partial/head.ejs","hash":"d9a99b14d3442c8a66fa701d96de542e9512d39d","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/_partial/header.ejs","hash":"ba1eb6d8cfccf3a2363b9d421c9e51dc1c688ff6","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/base.styl","hash":"7ea2db2c139a719bb7d3f3c5e182dd0e0d59e098","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/layout/_partial/paginator.ejs","hash":"ab59d5db77f2aa64dfe03656e72fd49702c62e23","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/custom.styl","hash":"bf8dee1a094b104d87a53b43f6daa7ba43b67574","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/layout.styl","hash":"9942d05bb2c55cf035d4bf9af325e1e81766a510","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/media.styl","hash":"ea3097e2c9bb39a632c55aa4c747f56581b95942","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/font.styl","hash":"a7a3cbf98142891e2e13143e5687447f1c23ac21","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/style.styl","hash":"6467d19a8a6c7471409bf1c88099c89aac9295a3","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/variable.styl","hash":"906faa95457eba70118a0705e13b8f43409e502f","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/image/.DS_Store","hash":"3a93752a417f6a9ef3e1e8ff4457078f4ced959e","modified":1577340324000},{"_id":"themes/hexo-theme-Chic/source/fonts/.DS_Store","hash":"7eda80d46b404b694fe2e13aff33069405e75246","modified":1565059402000},{"_id":"themes/hexo-theme-Chic/source/js/script.js","hash":"93694e4e16893f83611daa5ba3723b14ecc80abb","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/brown-paper.styl","hash":"329b85ae9130a5587a6fb1c6f80396f9cca5ddc1","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/highlightjs.styl","hash":"0e198b7a59191c7a39b641a4ddd22c948edb9358","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/pojoaque.styl","hash":"2601b4285803a7cea5ccded8d624ca95f80e3d88","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/school-book.styl","hash":"beabbbcc7930f8de19159381a01c0ba41dc2291f","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_lib/looper.css","hash":"7231f0befb4897a12c5bf9fbc0a53531b09c7902","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_page/archive.styl","hash":"71ea842f068b29b4418dd09450db09d27dcf0947","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_page/category.styl","hash":"3616a421b54f787352435c5c7e0c99cc321b88d0","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_page/page.styl","hash":"34e33b52d2e046aa2f5494e81ff4ac2d5ca78058","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_page/profile.styl","hash":"5ef6d5a06132f26b7aa01b2fbf4bbfb8ee862b7b","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_page/tag.styl","hash":"55b220cc58011876fb3a470cd1fde8ed87c93079","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_partial/footer.styl","hash":"4f58e607eaa59cda3b5a9fdb3404ffb75c4d1a03","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_partial/header.styl","hash":"be70b4ab3bcc977f1055664899742804c716929d","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_partial/paginator.styl","hash":"b4f4a5180c4cbc70d186792b8a1fd0f5855bd86a","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/demo_index.html","hash":"17421a586883ca9af111fdd7c240c07efb821c37","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.css","hash":"700558f705bea4a8395576869fccdc4ebfb98ef0","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.eot","hash":"02553b14fe863421e481c059a92bf035093eb6d2","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.js","hash":"310b47f6e467764656aba0612ec45996b4f6b1ea","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.svg","hash":"5bed32f57c17baa0eb749c459fea32354bf9392f","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.woff","hash":"83da577619512d7ea2b0e4611d90f2973297edce","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.ttf","hash":"00246e6f6f99f7ec1f8e224aa81380976d35528a","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/fonts/iconfont/iconfont.woff2","hash":"5551fe1064a35ad20d3b7a74d2e91ac759785ed8","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_page/_post/post_code.styl","hash":"c868f2bb97b6943283fbf4e7157f61fbea408ca7","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_page/_post/post_copyright.styl","hash":"64fd9f07ed45f035057d46740af0db70218714aa","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_page/_post/post_header.styl","hash":"050f0fed0610de4e32782353bcf7d3446a442eda","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_page/_post/post_content.styl","hash":"e6117a2a66c5443eb7162c7463ad49660a910c3c","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_page/_post/post_nav.styl","hash":"03accaba13c995cbe65a05a88549ff74e992eb3f","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_page/_post/post_tags.styl","hash":"2ff93677aa4d81da83c659b4dd4e3cb482d9ce7d","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/css/_page/_post/post_toc.styl","hash":"94174d9d67f9e6b5739a139f6167aa96d4d97269","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/image/avatar.jpg","hash":"f4738bc50965bee399a1ac1ef58e00680bc92143","modified":1708933067176},{"_id":"themes/hexo-theme-Chic/source/favicon.png","hash":"9700d5ce477f761944678fe7bce05f5507eb643c","modified":1562309500000},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1562307306000},{"_id":"themes/hexo-theme-Chic/source/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1562307306000},{"_id":"public/about/index.html","hash":"a90aec0305a8827f6c4ba60f3095230d7718c158","modified":1708936097684},{"_id":"public/category/index.html","hash":"b506de94b9f337f4aa58ca6d6cbc0d6bac7b857e","modified":1708936097684},{"_id":"public/tag/index.html","hash":"a93450412780c0fcdca43bbd266554245cd8bd1c","modified":1708936097684},{"_id":"public/2023/07/11/2023/iOS之静态库生成/index.html","hash":"2446e03769e3466d65b44e1718aab40cb6c9f1e5","modified":1708936097684},{"_id":"public/2022/10/28/2022/iOS之开屏页图片加载问题/index.html","hash":"4144683059c289cf312e9507681a55539a0ed2d9","modified":1708936097684},{"_id":"public/2022/01/11/2022/iOS安全之HTTPS加密/index.html","hash":"19e3cd24116ddf4b9c5b121e88274f76618a6b1a","modified":1708936097684},{"_id":"public/2021/01/19/2021/SwiftUI之登陆界面/index.html","hash":"50c608c8d05ef853fcddd9976815f3a74c2c3ff9","modified":1708936097684},{"_id":"public/2020/12/16/2021/iOS-模拟定位/index.html","hash":"98825fc138ec44e5892b24363fe8f36eb68ad0f4","modified":1708936097684},{"_id":"public/2020/09/30/2021/WEB端接入阿里多人音视频通信/index.html","hash":"537d0529bc3aa757a1ec5766283d47b333bdade1","modified":1708936097684},{"_id":"public/2019/10/28/2019/py文件打包/index.html","hash":"f42b3f93b70254fbf164a87e378b3cfbfbbee375","modified":1708936097684},{"_id":"public/2019/10/15/2019/PyQt之分离多线程/index.html","hash":"e424f35430872a97280c1e3e2f70835501e95658","modified":1708936097684},{"_id":"public/2019/10/14/2019/PyQt4坑集合（二）/index.html","hash":"c6da85adfd359d2524e7d1eb3421d4c5ef3ef39c","modified":1708936097684},{"_id":"public/2019/10/14/2019/PyQt项目小结/index.html","hash":"02fe2eb129fe8e808c84bde7dd8d61917a952bf1","modified":1708936097684},{"_id":"public/2019/08/06/2019/PyQt4之网络请求及图片加载/index.html","hash":"44d0c0f0ca54c37e9d881c32738a986f51c0baea","modified":1708936097684},{"_id":"public/2019/07/26/2019/PyQt4坑集合（一）/index.html","hash":"18a4dd2b5dd1e51f6a8bacb0404d74a3372154bb","modified":1708936097684},{"_id":"public/2019/05/06/2019/阶段小结（四）/index.html","hash":"76a42a48e56cf9070ec43dd09a3fea5c0367ab00","modified":1708936097684},{"_id":"public/2018/05/07/2018/关于HipHop/index.html","hash":"d396204b82daf2616e51e7f0447a195e61b539b4","modified":1708936097684},{"_id":"public/2018/04/20/2018/关于健身/index.html","hash":"c5418a618804bb15b90111b647801628605cefb6","modified":1708936097684},{"_id":"public/2018/03/23/2018/我的大学舍友/index.html","hash":"8b1350b8c3f6bc4fb092575b269df4dec7bf5edd","modified":1708936097684},{"_id":"public/2018/03/13/2018/大理记忆/index.html","hash":"49d7b281b8cb278b0a650d1077927822246db79e","modified":1708936097684},{"_id":"public/2017/11/10/2017/个人博客搭建/index.html","hash":"ecd43096773213203570d8c87b1b6d120e3d9bd3","modified":1708936097684},{"_id":"public/2017/10/23/2017/Hello World/index.html","hash":"7a0c4693d5e4dfa512db4babae95fd92de4938f4","modified":1708936097684},{"_id":"public/2017/09/02/2017/阶段小结（二）/index.html","hash":"67f34527480b439e7cb4f91d7dfbb3e64686c3ed","modified":1708936097684},{"_id":"public/2017/08/16/2017/阶段小结（一）/index.html","hash":"0597169c00d24676af6e141ef3ddafdc6fea78dd","modified":1708936097684},{"_id":"public/2017/08/16/2018/阶段小结（三）/index.html","hash":"c75780ec9f280cd7d38fae479949b788500493b2","modified":1708936097684},{"_id":"public/archives/index.html","hash":"835721a6f6f161e9263d9e2bb8913cfc0ef9defb","modified":1708936097684},{"_id":"public/archives/page/2/index.html","hash":"3dcc41b21ff00d8e57f09f71374d44caa3b95ce0","modified":1708936097684},{"_id":"public/archives/page/3/index.html","hash":"b4bc16259a7f2c541cd70c5ec55bb29eb8d7aeb6","modified":1708936097684},{"_id":"public/archives/2017/index.html","hash":"0258bae55bd0b307db73654f586d15aa0d045f75","modified":1708936097684},{"_id":"public/archives/2017/08/index.html","hash":"482e3013df5b80e737eabb6572aa6810089afc32","modified":1708936097684},{"_id":"public/archives/2017/09/index.html","hash":"537e03143ae7938bfb2aa7daf106fe6d174923d3","modified":1708936097684},{"_id":"public/archives/2017/10/index.html","hash":"f966a9bc7c1ec8e7922c3652bbc81864c826f0bc","modified":1708936097684},{"_id":"public/archives/2017/11/index.html","hash":"342872a267e57ac4aed76d070d4847f8c7f41c80","modified":1708936097684},{"_id":"public/archives/2018/index.html","hash":"256685cf2d1eb9e9f7ed5e271ae9675f027141af","modified":1708936097684},{"_id":"public/archives/2018/03/index.html","hash":"54a810dd90a530fbd3d1777d4ec7d13809d3aec3","modified":1708936097684},{"_id":"public/archives/2018/04/index.html","hash":"3d0743be4911a80678884366f1cbf5d8e83da0de","modified":1708936097684},{"_id":"public/archives/2018/05/index.html","hash":"fa15f2e498893888d59833de21e487c5e58a7a58","modified":1708936097684},{"_id":"public/archives/2019/index.html","hash":"0c132a36937ffa36d4a63aa79b65e4e85f3f35b0","modified":1708936097684},{"_id":"public/archives/2019/05/index.html","hash":"de60b429ac0f244b13c62b3f5ddf647fe9601ae1","modified":1708936097684},{"_id":"public/archives/2019/07/index.html","hash":"541429c7882d1fd0484ee0a75dcafd4470d8d3fc","modified":1708936097684},{"_id":"public/archives/2019/08/index.html","hash":"5a555a21348945c3ffa05825529d967bdd9e3d5c","modified":1708936097684},{"_id":"public/archives/2019/10/index.html","hash":"0229efbe35ca3ce3422e82585c48541216ee2156","modified":1708936097684},{"_id":"public/archives/2020/index.html","hash":"535cbd99b106cea1d664035be75312b0a463e6da","modified":1708936097684},{"_id":"public/archives/2020/09/index.html","hash":"789fdf460dbb8b2744501245397c0a16e1d4f95c","modified":1708936097684},{"_id":"public/archives/2020/12/index.html","hash":"5ab8d645a032e938eb7b07b320e94097c58a1092","modified":1708936097684},{"_id":"public/archives/2021/index.html","hash":"9e8ca492886a8a35a1329693819747a8a58c4fb6","modified":1708936097684},{"_id":"public/archives/2021/01/index.html","hash":"bfefdee0a82e3f1d75518c1513db149bd059016c","modified":1708936097684},{"_id":"public/archives/2022/index.html","hash":"0e3798b67cf47e84b4eb6b7dc35282947c8b0819","modified":1708936097684},{"_id":"public/archives/2022/01/index.html","hash":"20d965f38e698979362869dc75bf62c13ba56a27","modified":1708936097684},{"_id":"public/archives/2022/10/index.html","hash":"768b6cc600997aceca0a799d1d9f68a85a0b81ce","modified":1708936097684},{"_id":"public/archives/2023/index.html","hash":"d4680ac995ea22bc28b05a3e957997f45f6452ac","modified":1708936097684},{"_id":"public/archives/2023/07/index.html","hash":"9105d5d9ce1e18377f85a40846236a2ac3ec0e4c","modified":1708936097684},{"_id":"public/categories/PyQt4/index.html","hash":"8437b8198aeca886faecfd898269559b874cf6a8","modified":1708936097684},{"_id":"public/categories/小结/index.html","hash":"e1fb5d9f12f118f579f9b72be0da2ce05641f4c4","modified":1708936097684},{"_id":"public/categories/其他技术/index.html","hash":"a635b0a56f49075e8dc7c0d6108f4de4cd1aa721","modified":1708936097684},{"_id":"public/categories/随笔/index.html","hash":"e43dff57bf87fc4975cf2ab3bb4c946f9e72555d","modified":1708936097684},{"_id":"public/categories/其他技术/Python/index.html","hash":"491eecd3e7c121c97bbcd707770f1298aaa9a7cb","modified":1708936097684},{"_id":"public/categories/iOS/index.html","hash":"88ce8d68365067a718265d01e786051dd187f036","modified":1708936097684},{"_id":"public/categories/WEB/index.html","hash":"fa644e124fe65420657c8f7ae06feb3353b56bfa","modified":1708936097684},{"_id":"public/index.html","hash":"0ffa97bc74d2176a8fb29ccb319844a8f05f6534","modified":1708936097684},{"_id":"public/page/2/index.html","hash":"0ffa97bc74d2176a8fb29ccb319844a8f05f6534","modified":1708936097684},{"_id":"public/page/3/index.html","hash":"0ffa97bc74d2176a8fb29ccb319844a8f05f6534","modified":1708936097684},{"_id":"public/tags/技术/index.html","hash":"5c85f6f4160cc00dd635d2f86087b9217ba626d6","modified":1708936097684},{"_id":"public/tags/PyQt4/index.html","hash":"317ba76cf1a278369bbdcb3661868df2c03cbc99","modified":1708936097684},{"_id":"public/tags/总结/index.html","hash":"974ba2976c75329a968410cb7b58d222604e7c60","modified":1708936097684},{"_id":"public/tags/坑集合/index.html","hash":"ccdda48290a693a54e43ec142d11ef5c36dd9e24","modified":1708936097684},{"_id":"public/tags/技术/page/2/index.html","hash":"27b386308a7aa76d9ff7e12c548dea9aeff848a9","modified":1708936097684},{"_id":"public/tags/打包/index.html","hash":"f10256e1fae2e67c222893403c56a83daa120e11","modified":1708936097684},{"_id":"public/tags/前端/index.html","hash":"c5564c623c672cea94deb10c13995fbeb9a6db29","modified":1708936097684},{"_id":"public/tags/其他/index.html","hash":"edf1b29848dc4932695329772f48258540724e85","modified":1708936097684},{"_id":"public/tags/小程序/index.html","hash":"e65dab63215da87bb9d4b07cbf66d1dfdb5f79b0","modified":1708936097684},{"_id":"public/tags/搭建/index.html","hash":"ed67b41e86533d7645de1f74dda16e3b86c91ea0","modified":1708936097684},{"_id":"public/tags/iOS/index.html","hash":"87b3777db6ec7b5171a73298cb02de9ac32fef96","modified":1708936097684},{"_id":"public/tags/心得/index.html","hash":"ccb730db14d5179eda2bdcfc9b8092588bcb6709","modified":1708936097684},{"_id":"public/tags/游记/index.html","hash":"42b06f17b02ad8ddebd4988c4f1a8268241291b5","modified":1708936097684},{"_id":"public/tags/大理/index.html","hash":"cf25517176b14a9d8603aed26b384575b0996fb4","modified":1708936097684},{"_id":"public/tags/青春/index.html","hash":"73578337763c3316978191a8b5f35f68ee62b724","modified":1708936097684},{"_id":"public/tags/Swift/index.html","hash":"e96c1df785b383d0516bfd17c8b661bc8c026e7f","modified":1708936097684},{"_id":"public/tags/SwiftUI/index.html","hash":"31673e279f30ee96380f5db44666f981d7f695f3","modified":1708936097684},{"_id":"public/tags/WEB/index.html","hash":"d431d7fafe1470dd4b9454571046381a2f05bdab","modified":1708936097684},{"_id":"public/tags/SDK/index.html","hash":"12fec4e2295c42dbc7f343fd3ff7b393243035b0","modified":1708936097684},{"_id":"public/tags/音视频/index.html","hash":"84a008c1bc7aeb939bac53af5e470f15af231651","modified":1708936097684},{"_id":"public/tags/安全/index.html","hash":"05c9d3a4e51fe35e93788cac65c0cf716e94a998","modified":1708936097684},{"_id":"public/CNAME","hash":"399435e40e34c56c541e2f3ceb250ec761198584","modified":1708936097684},{"_id":"public/images/iOS安全之HTTPS加密/2.png","hash":"a07629312d2b6e5a3dfb8a5d36ece82036e7f401","modified":1708936097684},{"_id":"public/images/iOS安全之HTTPS加密/1.png","hash":"7ec31482062c240a190f22b38345567a1c75ee64","modified":1708936097684},{"_id":"public/images/个人博客搭建/1.png","hash":"70521c92a21378ed9d54ab64678bad924f3dabcb","modified":1708936097684},{"_id":"public/images/个人博客搭建/5.png","hash":"3beb7414974b04e66cd68e666131cd418520daca","modified":1708936097684},{"_id":"public/images/大理记忆/3.jpeg","hash":"f88dac9337f70fee2a2f943cb0b27baf4ed74865","modified":1708936097684},{"_id":"public/css/base.css","hash":"ea2d491ce6242c6b7087a2652a1135694c292137","modified":1708936097684},{"_id":"public/css/font.css","hash":"2cfc963ba7f63ab33cf13f2617635ffe674ed85b","modified":1708936097684},{"_id":"public/css/custom.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1708936097684},{"_id":"public/css/layout.css","hash":"c81e2e01ff5e95a3e613064b8490045ff936c305","modified":1708936097684},{"_id":"public/css/media.css","hash":"fa1e5b0c0475fd99016801b7fe1824958ce9c358","modified":1708936097684},{"_id":"public/css/normalize.css","hash":"2d4b663b6a4c68295b6ba240fa2dd9fb3863093c","modified":1708936097684},{"_id":"public/css/style.css","hash":"813a04f16a161adee4d748b93ba5633eb22bd061","modified":1708936097684},{"_id":"public/css/variable.css","hash":"cb4180b3bbad471e30cf52ebb40e998d58a30d7d","modified":1708936097684},{"_id":"public/fonts/iconfont/iconfont.woff","hash":"83da577619512d7ea2b0e4611d90f2973297edce","modified":1708936097684},{"_id":"public/fonts/iconfont/iconfont.svg","hash":"5bed32f57c17baa0eb749c459fea32354bf9392f","modified":1708936097684},{"_id":"public/fonts/iconfont/iconfont.ttf","hash":"00246e6f6f99f7ec1f8e224aa81380976d35528a","modified":1708936097684},{"_id":"public/fonts/iconfont/iconfont.woff2","hash":"5551fe1064a35ad20d3b7a74d2e91ac759785ed8","modified":1708936097684},{"_id":"public/fonts/iconfont/iconfont.eot","hash":"02553b14fe863421e481c059a92bf035093eb6d2","modified":1708936097684},{"_id":"public/images/个人博客搭建/2.png","hash":"eb28ada12597656945ec969d169179df19661174","modified":1708936097684},{"_id":"public/images/个人博客搭建/4.png","hash":"c7073df5991bb637957d4edefedf199b62c52985","modified":1708936097684},{"_id":"public/images/个人博客搭建/3.png","hash":"93f4b4a91fb2039ba7bd3fa69f65c6c3e558e814","modified":1708936097684},{"_id":"public/images/大理记忆/5.jpeg","hash":"c8d801bbcd4b6e258d604a41617eced8cc809055","modified":1708936097684},{"_id":"public/images/大理记忆/1.jpeg","hash":"43cac9cdcc9854b24e5cc8815bb5a6fa6d5bb2ef","modified":1708936097684},{"_id":"public/js/script.js","hash":"93694e4e16893f83611daa5ba3723b14ecc80abb","modified":1708936097684},{"_id":"public/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1708936097684},{"_id":"public/fonts/iconfont/iconfont.css","hash":"700558f705bea4a8395576869fccdc4ebfb98ef0","modified":1708936097684},{"_id":"public/fonts/iconfont/demo_index.html","hash":"17421a586883ca9af111fdd7c240c07efb821c37","modified":1708936097684},{"_id":"public/fonts/iconfont/iconfont.js","hash":"310b47f6e467764656aba0612ec45996b4f6b1ea","modified":1708936097684},{"_id":"public/images/大理记忆/7.jpeg","hash":"3f2ac6f72a72df1f04f0bd5ebf2dd87a91974876","modified":1708936097684},{"_id":"public/images/大理记忆/4.jpeg","hash":"d4c87a4a218f7adc3e10ab213612df87150c6998","modified":1708936097684},{"_id":"public/images/大理记忆/2.jpeg","hash":"34d295313bd224d5533a1cbc95235217927ba36c","modified":1708936097684},{"_id":"public/image/avatar.jpg","hash":"f4738bc50965bee399a1ac1ef58e00680bc92143","modified":1708936097684},{"_id":"public/images/大理记忆/6.jpeg","hash":"108c52726aaa5110bd4a4f76bbba75cbc09407ef","modified":1708936097684},{"_id":"public/favicon.png","hash":"9700d5ce477f761944678fe7bce05f5507eb643c","modified":1708936097684},{"_id":"public/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1708936097684},{"_id":"public/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1708936097684},{"_id":"public/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1708936097684},{"_id":"public/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1708936097684},{"_id":"public/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1708936097684}],"Category":[{"name":"PyQt4","_id":"clt2ofglj0004g0vgg1s4ac2j"},{"name":"小结","_id":"clt2ofglr000lg0vg3h4520gq"},{"name":"其他技术","_id":"clt2ofgls000sg0vg3eyi65lo"},{"name":"随笔","_id":"clt2ofgly001gg0vg6jwfgisp"},{"name":"Python","parent":"clt2ofgls000sg0vg3eyi65lo","_id":"clt2ofgm0001pg0vgg4cueqjc"},{"name":"iOS","_id":"clt2ofgm20028g0vgfunc3i6w"},{"name":"WEB","_id":"clt2ofgm3002fg0vgbytcbk6z"}],"Data":[],"Page":[{"title":"关于我","layout":"about","date":"2017-08-01T08:30:10.000Z","_content":"关于我，我叫陈鑫，94年小狮子，目前在做移动端和前端开发，主要爱好是跳舞，运动，其余爱好比较广泛，游泳，登山，跑步，健身，轮滑，滑板。\n做这个博客主要是因为记录自己的时光以及技术的分享\n","source":"about/index.md","raw":"---\ntitle: 关于我\nlayout: about\ndate: 2017-08-01 16:30:10\n---\n关于我，我叫陈鑫，94年小狮子，目前在做移动端和前端开发，主要爱好是跳舞，运动，其余爱好比较广泛，游泳，登山，跑步，健身，轮滑，滑板。\n做这个博客主要是因为记录自己的时光以及技术的分享\n","updated":"2022-12-04T01:45:07.000Z","path":"about/index.html","comments":1,"_id":"clt2ofgld0000g0vg53h75c8v","content":"<p>关于我，我叫陈鑫，94年小狮子，目前在做移动端和前端开发，主要爱好是跳舞，运动，其余爱好比较广泛，游泳，登山，跑步，健身，轮滑，滑板。<br>做这个博客主要是因为记录自己的时光以及技术的分享</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于我，我叫陈鑫，94年小狮子，目前在做移动端和前端开发，主要爱好是跳舞，运动，其余爱好比较广泛，游泳，登山，跑步，健身，轮滑，滑板。<br>做这个博客主要是因为记录自己的时光以及技术的分享</p>\n"},{"title":"category","layout":"category","date":"2019-07-05T06:21:31.000Z","_content":"","source":"category/index.md","raw":"---\ntitle: category\nlayout: category\ndate: 2019-07-05 14:21:31\n---\n","updated":"2022-12-04T01:45:07.000Z","path":"category/index.html","comments":1,"_id":"clt2ofgli0002g0vgfcc7dkht","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tag","layout":"tag","date":"2019-07-05T06:21:22.000Z","_content":"","source":"tag/index.md","raw":"---\ntitle: tag\nlayout: tag\ndate: 2019-07-05 14:21:22\n---\n","updated":"2022-12-04T01:45:07.000Z","path":"tag/index.html","comments":1,"_id":"clt2ofglk0006g0vg65l63c1p","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"PyQt4之网络请求及图片加载","date":"2019-08-06T02:22:53.000Z","_content":"\n之前在网上找了很久关于PyQt网络及图片下载方面的资料，结果发现，网上基本没有，而且PyQt本身是不支持网络图片加载的，具体实现还是需要将l网络图片下载到本地，然后显示，但是并不是所有的图片都能显示的，所以只好自己封账一个来用了。\n\n里面包括了：\n1.PyQt4的一般的GET和POST的网络请求，我自己给他加上了请求完成的回调。\n2.直接传入控件，及网络图片的地址，就可以显示网上的图片的，加载服务器图片也搞定。\n\n~~~ bash\n目前优点:\n是网络请求(图片下载)到请求完成(显示完成)一步搞定\n\n目前缺点是:\n因为都是使用的是同步，所以会阻碍程序，异步显示，PyQt不许与直接调用主线程刷新UI，等我后续优化。\n~~~\n\n下面是Git上的地址\n\n[这是地址](https://github.com/as568381497/CXPyQt4HTTP)\n\n\n\n\n","source":"_posts/2019/PyQt4之网络请求及图片加载.md","raw":"---\ntitle: PyQt4之网络请求及图片加载\ndate: 2019-08-06 10:22:53\ntags: [技术,PyQt4]\ncategory: [PyQt4]\n---\n\n之前在网上找了很久关于PyQt网络及图片下载方面的资料，结果发现，网上基本没有，而且PyQt本身是不支持网络图片加载的，具体实现还是需要将l网络图片下载到本地，然后显示，但是并不是所有的图片都能显示的，所以只好自己封账一个来用了。\n\n里面包括了：\n1.PyQt4的一般的GET和POST的网络请求，我自己给他加上了请求完成的回调。\n2.直接传入控件，及网络图片的地址，就可以显示网上的图片的，加载服务器图片也搞定。\n\n~~~ bash\n目前优点:\n是网络请求(图片下载)到请求完成(显示完成)一步搞定\n\n目前缺点是:\n因为都是使用的是同步，所以会阻碍程序，异步显示，PyQt不许与直接调用主线程刷新UI，等我后续优化。\n~~~\n\n下面是Git上的地址\n\n[这是地址](https://github.com/as568381497/CXPyQt4HTTP)\n\n\n\n\n","slug":"2019/PyQt4之网络请求及图片加载","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglf0001g0vgaibe6kgg","content":"<p>之前在网上找了很久关于PyQt网络及图片下载方面的资料，结果发现，网上基本没有，而且PyQt本身是不支持网络图片加载的，具体实现还是需要将l网络图片下载到本地，然后显示，但是并不是所有的图片都能显示的，所以只好自己封账一个来用了。</p>\n<p>里面包括了：<br>1.PyQt4的一般的GET和POST的网络请求，我自己给他加上了请求完成的回调。<br>2.直接传入控件，及网络图片的地址，就可以显示网上的图片的，加载服务器图片也搞定。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目前优点:</span><br><span class=\"line\">是网络请求(图片下载)到请求完成(显示完成)一步搞定</span><br><span class=\"line\"></span><br><span class=\"line\">目前缺点是:</span><br><span class=\"line\">因为都是使用的是同步，所以会阻碍程序，异步显示，PyQt不许与直接调用主线程刷新UI，等我后续优化。</span><br></pre></td></tr></table></figure>\n\n<p>下面是Git上的地址</p>\n<p><a href=\"https://github.com/as568381497/CXPyQt4HTTP\">这是地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>之前在网上找了很久关于PyQt网络及图片下载方面的资料，结果发现，网上基本没有，而且PyQt本身是不支持网络图片加载的，具体实现还是需要将l网络图片下载到本地，然后显示，但是并不是所有的图片都能显示的，所以只好自己封账一个来用了。</p>\n<p>里面包括了：<br>1.PyQt4的一般的GET和POST的网络请求，我自己给他加上了请求完成的回调。<br>2.直接传入控件，及网络图片的地址，就可以显示网上的图片的，加载服务器图片也搞定。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目前优点:</span><br><span class=\"line\">是网络请求(图片下载)到请求完成(显示完成)一步搞定</span><br><span class=\"line\"></span><br><span class=\"line\">目前缺点是:</span><br><span class=\"line\">因为都是使用的是同步，所以会阻碍程序，异步显示，PyQt不许与直接调用主线程刷新UI，等我后续优化。</span><br></pre></td></tr></table></figure>\n\n<p>下面是Git上的地址</p>\n<p><a href=\"https://github.com/as568381497/CXPyQt4HTTP\">这是地址</a></p>\n"},{"title":"PyQt4坑集合（一）","date":"2019-07-26T02:16:55.000Z","_content":"\n\n最近因为公司开发接触了PC端编程，开发语言选择的PyQt4,PyQt是用来创建GUI应用程序的工具包，它把Python和成功的Qt绑定在一起，下面是我在第一次开发中遇到的一些小坑。\n\n\n### 1.QT设计师做的UI文件在转换为PY文件时出错，有可能是在UI文件中的字体为中文字体\n\n\n在某次做完UI文件后，执行转换，结果控制台一直输出\n“check that you are using the latest veraion of PyQt and send an error report to ....”\n开始也以为是版本问题，结果更新库什么的也没有用，后来发现别人说是UI文件里面不能有中文，我换了之后发现确实行了，但是在我后来的研究中发现，并不是中文，只是中文字体，文本为中文可以转换，但是加入中文字体就会转换出错。\n\n\n\n###  2.qt设计师里面显示的图片在UI文件转换为py文件后，qrc文件也要转换为py文件，直接import进去\n\nUI文件中使用的图片在UI文件中可以正常显示，但是当UI文件转换为PY文件后需要将资源文件也转换PY文件并impory导入后才能在PY文件中正常显示（在PyCharmIDE下，导入为灰色不用管）\n\n\n\n###  3.PyQt4在默认配置下,setStyleSheet不支持jpg，只能用png图片\n\n在py文件中，样式中使用图片，是不支持jpg的图片需要换成png的图片才能正常显示(pixmap属性可以支持jpg文件),后来实验发现，有的JPG图片能显示，有的不能显示，试验了下，猜想可能是跟图片的是否打开alpha通道有关\n\n\n###  4.python的中文加变量打印\n\nprintf(u'中文 %$' % (变量字符))\n\n\n\n###  5.python的中文加变量转为字符串\n\n\"这是中文{}{}\".format(变量1,变量2)\n\n这么做的好处是，可以将变量及中文在内存中真正的转换为一块内存地址，不会额外开销\n\n","source":"_posts/2019/PyQt4坑集合（一）.md","raw":"---\ntitle: PyQt4坑集合（一）\ndate: 2019-07-26 10:16:55\ntags: [技术,坑集合,PyQt4]\ncategory: [PyQt4]\n---\n\n\n最近因为公司开发接触了PC端编程，开发语言选择的PyQt4,PyQt是用来创建GUI应用程序的工具包，它把Python和成功的Qt绑定在一起，下面是我在第一次开发中遇到的一些小坑。\n\n\n### 1.QT设计师做的UI文件在转换为PY文件时出错，有可能是在UI文件中的字体为中文字体\n\n\n在某次做完UI文件后，执行转换，结果控制台一直输出\n“check that you are using the latest veraion of PyQt and send an error report to ....”\n开始也以为是版本问题，结果更新库什么的也没有用，后来发现别人说是UI文件里面不能有中文，我换了之后发现确实行了，但是在我后来的研究中发现，并不是中文，只是中文字体，文本为中文可以转换，但是加入中文字体就会转换出错。\n\n\n\n###  2.qt设计师里面显示的图片在UI文件转换为py文件后，qrc文件也要转换为py文件，直接import进去\n\nUI文件中使用的图片在UI文件中可以正常显示，但是当UI文件转换为PY文件后需要将资源文件也转换PY文件并impory导入后才能在PY文件中正常显示（在PyCharmIDE下，导入为灰色不用管）\n\n\n\n###  3.PyQt4在默认配置下,setStyleSheet不支持jpg，只能用png图片\n\n在py文件中，样式中使用图片，是不支持jpg的图片需要换成png的图片才能正常显示(pixmap属性可以支持jpg文件),后来实验发现，有的JPG图片能显示，有的不能显示，试验了下，猜想可能是跟图片的是否打开alpha通道有关\n\n\n###  4.python的中文加变量打印\n\nprintf(u'中文 %$' % (变量字符))\n\n\n\n###  5.python的中文加变量转为字符串\n\n\"这是中文{}{}\".format(变量1,变量2)\n\n这么做的好处是，可以将变量及中文在内存中真正的转换为一块内存地址，不会额外开销\n\n","slug":"2019/PyQt4坑集合（一）","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofgli0003g0vg02967ano","content":"<p>最近因为公司开发接触了PC端编程，开发语言选择的PyQt4,PyQt是用来创建GUI应用程序的工具包，它把Python和成功的Qt绑定在一起，下面是我在第一次开发中遇到的一些小坑。</p>\n<h3 id=\"1-QT设计师做的UI文件在转换为PY文件时出错，有可能是在UI文件中的字体为中文字体\"><a href=\"#1-QT设计师做的UI文件在转换为PY文件时出错，有可能是在UI文件中的字体为中文字体\" class=\"headerlink\" title=\"1.QT设计师做的UI文件在转换为PY文件时出错，有可能是在UI文件中的字体为中文字体\"></a>1.QT设计师做的UI文件在转换为PY文件时出错，有可能是在UI文件中的字体为中文字体</h3><p>在某次做完UI文件后，执行转换，结果控制台一直输出<br>“check that you are using the latest veraion of PyQt and send an error report to ….”<br>开始也以为是版本问题，结果更新库什么的也没有用，后来发现别人说是UI文件里面不能有中文，我换了之后发现确实行了，但是在我后来的研究中发现，并不是中文，只是中文字体，文本为中文可以转换，但是加入中文字体就会转换出错。</p>\n<h3 id=\"2-qt设计师里面显示的图片在UI文件转换为py文件后，qrc文件也要转换为py文件，直接import进去\"><a href=\"#2-qt设计师里面显示的图片在UI文件转换为py文件后，qrc文件也要转换为py文件，直接import进去\" class=\"headerlink\" title=\"2.qt设计师里面显示的图片在UI文件转换为py文件后，qrc文件也要转换为py文件，直接import进去\"></a>2.qt设计师里面显示的图片在UI文件转换为py文件后，qrc文件也要转换为py文件，直接import进去</h3><p>UI文件中使用的图片在UI文件中可以正常显示，但是当UI文件转换为PY文件后需要将资源文件也转换PY文件并impory导入后才能在PY文件中正常显示（在PyCharmIDE下，导入为灰色不用管）</p>\n<h3 id=\"3-PyQt4在默认配置下-setStyleSheet不支持jpg，只能用png图片\"><a href=\"#3-PyQt4在默认配置下-setStyleSheet不支持jpg，只能用png图片\" class=\"headerlink\" title=\"3.PyQt4在默认配置下,setStyleSheet不支持jpg，只能用png图片\"></a>3.PyQt4在默认配置下,setStyleSheet不支持jpg，只能用png图片</h3><p>在py文件中，样式中使用图片，是不支持jpg的图片需要换成png的图片才能正常显示(pixmap属性可以支持jpg文件),后来实验发现，有的JPG图片能显示，有的不能显示，试验了下，猜想可能是跟图片的是否打开alpha通道有关</p>\n<h3 id=\"4-python的中文加变量打印\"><a href=\"#4-python的中文加变量打印\" class=\"headerlink\" title=\"4.python的中文加变量打印\"></a>4.python的中文加变量打印</h3><p>printf(u’中文 %$’ % (变量字符))</p>\n<h3 id=\"5-python的中文加变量转为字符串\"><a href=\"#5-python的中文加变量转为字符串\" class=\"headerlink\" title=\"5.python的中文加变量转为字符串\"></a>5.python的中文加变量转为字符串</h3><p>“这是中文{}{}”.format(变量1,变量2)</p>\n<p>这么做的好处是，可以将变量及中文在内存中真正的转换为一块内存地址，不会额外开销</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近因为公司开发接触了PC端编程，开发语言选择的PyQt4,PyQt是用来创建GUI应用程序的工具包，它把Python和成功的Qt绑定在一起，下面是我在第一次开发中遇到的一些小坑。</p>\n<h3 id=\"1-QT设计师做的UI文件在转换为PY文件时出错，有可能是在UI文件中的字体为中文字体\"><a href=\"#1-QT设计师做的UI文件在转换为PY文件时出错，有可能是在UI文件中的字体为中文字体\" class=\"headerlink\" title=\"1.QT设计师做的UI文件在转换为PY文件时出错，有可能是在UI文件中的字体为中文字体\"></a>1.QT设计师做的UI文件在转换为PY文件时出错，有可能是在UI文件中的字体为中文字体</h3><p>在某次做完UI文件后，执行转换，结果控制台一直输出<br>“check that you are using the latest veraion of PyQt and send an error report to ….”<br>开始也以为是版本问题，结果更新库什么的也没有用，后来发现别人说是UI文件里面不能有中文，我换了之后发现确实行了，但是在我后来的研究中发现，并不是中文，只是中文字体，文本为中文可以转换，但是加入中文字体就会转换出错。</p>\n<h3 id=\"2-qt设计师里面显示的图片在UI文件转换为py文件后，qrc文件也要转换为py文件，直接import进去\"><a href=\"#2-qt设计师里面显示的图片在UI文件转换为py文件后，qrc文件也要转换为py文件，直接import进去\" class=\"headerlink\" title=\"2.qt设计师里面显示的图片在UI文件转换为py文件后，qrc文件也要转换为py文件，直接import进去\"></a>2.qt设计师里面显示的图片在UI文件转换为py文件后，qrc文件也要转换为py文件，直接import进去</h3><p>UI文件中使用的图片在UI文件中可以正常显示，但是当UI文件转换为PY文件后需要将资源文件也转换PY文件并impory导入后才能在PY文件中正常显示（在PyCharmIDE下，导入为灰色不用管）</p>\n<h3 id=\"3-PyQt4在默认配置下-setStyleSheet不支持jpg，只能用png图片\"><a href=\"#3-PyQt4在默认配置下-setStyleSheet不支持jpg，只能用png图片\" class=\"headerlink\" title=\"3.PyQt4在默认配置下,setStyleSheet不支持jpg，只能用png图片\"></a>3.PyQt4在默认配置下,setStyleSheet不支持jpg，只能用png图片</h3><p>在py文件中，样式中使用图片，是不支持jpg的图片需要换成png的图片才能正常显示(pixmap属性可以支持jpg文件),后来实验发现，有的JPG图片能显示，有的不能显示，试验了下，猜想可能是跟图片的是否打开alpha通道有关</p>\n<h3 id=\"4-python的中文加变量打印\"><a href=\"#4-python的中文加变量打印\" class=\"headerlink\" title=\"4.python的中文加变量打印\"></a>4.python的中文加变量打印</h3><p>printf(u’中文 %$’ % (变量字符))</p>\n<h3 id=\"5-python的中文加变量转为字符串\"><a href=\"#5-python的中文加变量转为字符串\" class=\"headerlink\" title=\"5.python的中文加变量转为字符串\"></a>5.python的中文加变量转为字符串</h3><p>“这是中文{}{}”.format(变量1,变量2)</p>\n<p>这么做的好处是，可以将变量及中文在内存中真正的转换为一块内存地址，不会额外开销</p>\n"},{"title":"PyQt4坑(特性)集合（二）","date":"2019-10-14T08:18:00.000Z","_content":"\n最近开发中遇到的PyQt的坑，写出来，分享下\n\n\n### 1.Label 控件中 给图片样式的显示方式\n\nBackground-image：显示方式  原始图片显示   不裁剪\nBorder-image：显示方式  拉伸  完整显示\nimage:显示方式 原始图片 最合适比例显示 \n\n\n### 2.Label 图片的加载\n\npng：png图片显示可以使用样式或者pixmap（跟jpg加载一样）显示，但是需要先把图片加载为py文件\n\n⑴. 写入qrc文件\n\n```\n<!DOCTYPE RCC>\n<RCC version=\"1.0\">\n<qresource prefix=\"/Images\">\n<file>time.png</file>\n<file>gou.png</file>\n<file>default.png</file>\n</qresource>\n</RCC>\n```\n\n⑵. 将qrc文件用PyRcc转换为py文件\n\n⑶. 调用py文件进行加载\n\njpg图片加载： jpg图片加载只能用pixmap加载显示（实际上是画上去）\n\n```\nself.disPlayImage.load(self.jpgImageURL)\npixmap = QtGui.QPixmap(self.disPlayImage)\n//画上去的显示方式（这是imageView的大小，不拉伸）\nscaredPixmap = pixmap.scaled(self.imageView.width(), self.imageView.height(), aspectRatioMode=Qt.KeepAspectRatio)\n//pixmap加载图片\nself.imageView.setPixmap(scaredPixmap)\n```\n\n### 3.控件的边框显示\n\n\n需要添加边框的宽，显示方式，颜色才能显示\n\n\n### 4.获取屏幕大小\n\n\n```\nQtGui.QApplication.desktop()\nView = desktop.screenGeometry()\n```\n\n### 5.子控件需要实现父控件paintEvent绘图方法才能显示图片\n\n### 6.当子控件截取了点击事件后在点击事件里面调用父控件点击事件进行事件传递\n\n### 7.父控件去掉子控件不是用“deleteLater”，这个方法只是在界面上去掉子控件，实际上内存中还存在，用sip的“deleter”方法删除也不安全，会删掉不应该删除的，查看源码发现，源码里面是用\n\n```\nview.setParent(None)\n```\n\n来删除控件的，这样内存中的地址才会被回收\n\n\n### 8.在“main”函数里面可以获取软件存在的路径及外部传入的参数\n```\nsys.argv[0]//软件打开路径\nsys.arvg[1]//外部传入参数\n```\n","source":"_posts/2019/PyQt4坑集合（二）.md","raw":"---\ntitle: PyQt4坑(特性)集合（二）\ndate: 2019-10-14 16:18:00\ntags: [技术,坑集合,PyQt4]\ncategory: [PyQt4]\n---\n\n最近开发中遇到的PyQt的坑，写出来，分享下\n\n\n### 1.Label 控件中 给图片样式的显示方式\n\nBackground-image：显示方式  原始图片显示   不裁剪\nBorder-image：显示方式  拉伸  完整显示\nimage:显示方式 原始图片 最合适比例显示 \n\n\n### 2.Label 图片的加载\n\npng：png图片显示可以使用样式或者pixmap（跟jpg加载一样）显示，但是需要先把图片加载为py文件\n\n⑴. 写入qrc文件\n\n```\n<!DOCTYPE RCC>\n<RCC version=\"1.0\">\n<qresource prefix=\"/Images\">\n<file>time.png</file>\n<file>gou.png</file>\n<file>default.png</file>\n</qresource>\n</RCC>\n```\n\n⑵. 将qrc文件用PyRcc转换为py文件\n\n⑶. 调用py文件进行加载\n\njpg图片加载： jpg图片加载只能用pixmap加载显示（实际上是画上去）\n\n```\nself.disPlayImage.load(self.jpgImageURL)\npixmap = QtGui.QPixmap(self.disPlayImage)\n//画上去的显示方式（这是imageView的大小，不拉伸）\nscaredPixmap = pixmap.scaled(self.imageView.width(), self.imageView.height(), aspectRatioMode=Qt.KeepAspectRatio)\n//pixmap加载图片\nself.imageView.setPixmap(scaredPixmap)\n```\n\n### 3.控件的边框显示\n\n\n需要添加边框的宽，显示方式，颜色才能显示\n\n\n### 4.获取屏幕大小\n\n\n```\nQtGui.QApplication.desktop()\nView = desktop.screenGeometry()\n```\n\n### 5.子控件需要实现父控件paintEvent绘图方法才能显示图片\n\n### 6.当子控件截取了点击事件后在点击事件里面调用父控件点击事件进行事件传递\n\n### 7.父控件去掉子控件不是用“deleteLater”，这个方法只是在界面上去掉子控件，实际上内存中还存在，用sip的“deleter”方法删除也不安全，会删掉不应该删除的，查看源码发现，源码里面是用\n\n```\nview.setParent(None)\n```\n\n来删除控件的，这样内存中的地址才会被回收\n\n\n### 8.在“main”函数里面可以获取软件存在的路径及外部传入的参数\n```\nsys.argv[0]//软件打开路径\nsys.arvg[1]//外部传入参数\n```\n","slug":"2019/PyQt4坑集合（二）","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofgll0007g0vg5rc944bc","content":"<p>最近开发中遇到的PyQt的坑，写出来，分享下</p>\n<h3 id=\"1-Label-控件中-给图片样式的显示方式\"><a href=\"#1-Label-控件中-给图片样式的显示方式\" class=\"headerlink\" title=\"1.Label 控件中 给图片样式的显示方式\"></a>1.Label 控件中 给图片样式的显示方式</h3><p>Background-image：显示方式  原始图片显示   不裁剪<br>Border-image：显示方式  拉伸  完整显示<br>image:显示方式 原始图片 最合适比例显示 </p>\n<h3 id=\"2-Label-图片的加载\"><a href=\"#2-Label-图片的加载\" class=\"headerlink\" title=\"2.Label 图片的加载\"></a>2.Label 图片的加载</h3><p>png：png图片显示可以使用样式或者pixmap（跟jpg加载一样）显示，但是需要先把图片加载为py文件</p>\n<p>⑴. 写入qrc文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE RCC&gt;</span><br><span class=\"line\">&lt;RCC version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;qresource prefix=&quot;/Images&quot;&gt;</span><br><span class=\"line\">&lt;file&gt;time.png&lt;/file&gt;</span><br><span class=\"line\">&lt;file&gt;gou.png&lt;/file&gt;</span><br><span class=\"line\">&lt;file&gt;default.png&lt;/file&gt;</span><br><span class=\"line\">&lt;/qresource&gt;</span><br><span class=\"line\">&lt;/RCC&gt;</span><br></pre></td></tr></table></figure>\n\n<p>⑵. 将qrc文件用PyRcc转换为py文件</p>\n<p>⑶. 调用py文件进行加载</p>\n<p>jpg图片加载： jpg图片加载只能用pixmap加载显示（实际上是画上去）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.disPlayImage.load(self.jpgImageURL)</span><br><span class=\"line\">pixmap = QtGui.QPixmap(self.disPlayImage)</span><br><span class=\"line\">//画上去的显示方式（这是imageView的大小，不拉伸）</span><br><span class=\"line\">scaredPixmap = pixmap.scaled(self.imageView.width(), self.imageView.height(), aspectRatioMode=Qt.KeepAspectRatio)</span><br><span class=\"line\">//pixmap加载图片</span><br><span class=\"line\">self.imageView.setPixmap(scaredPixmap)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-控件的边框显示\"><a href=\"#3-控件的边框显示\" class=\"headerlink\" title=\"3.控件的边框显示\"></a>3.控件的边框显示</h3><p>需要添加边框的宽，显示方式，颜色才能显示</p>\n<h3 id=\"4-获取屏幕大小\"><a href=\"#4-获取屏幕大小\" class=\"headerlink\" title=\"4.获取屏幕大小\"></a>4.获取屏幕大小</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QtGui.QApplication.desktop()</span><br><span class=\"line\">View = desktop.screenGeometry()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-子控件需要实现父控件paintEvent绘图方法才能显示图片\"><a href=\"#5-子控件需要实现父控件paintEvent绘图方法才能显示图片\" class=\"headerlink\" title=\"5.子控件需要实现父控件paintEvent绘图方法才能显示图片\"></a>5.子控件需要实现父控件paintEvent绘图方法才能显示图片</h3><h3 id=\"6-当子控件截取了点击事件后在点击事件里面调用父控件点击事件进行事件传递\"><a href=\"#6-当子控件截取了点击事件后在点击事件里面调用父控件点击事件进行事件传递\" class=\"headerlink\" title=\"6.当子控件截取了点击事件后在点击事件里面调用父控件点击事件进行事件传递\"></a>6.当子控件截取了点击事件后在点击事件里面调用父控件点击事件进行事件传递</h3><h3 id=\"7-父控件去掉子控件不是用“deleteLater”，这个方法只是在界面上去掉子控件，实际上内存中还存在，用sip的“deleter”方法删除也不安全，会删掉不应该删除的，查看源码发现，源码里面是用\"><a href=\"#7-父控件去掉子控件不是用“deleteLater”，这个方法只是在界面上去掉子控件，实际上内存中还存在，用sip的“deleter”方法删除也不安全，会删掉不应该删除的，查看源码发现，源码里面是用\" class=\"headerlink\" title=\"7.父控件去掉子控件不是用“deleteLater”，这个方法只是在界面上去掉子控件，实际上内存中还存在，用sip的“deleter”方法删除也不安全，会删掉不应该删除的，查看源码发现，源码里面是用\"></a>7.父控件去掉子控件不是用“deleteLater”，这个方法只是在界面上去掉子控件，实际上内存中还存在，用sip的“deleter”方法删除也不安全，会删掉不应该删除的，查看源码发现，源码里面是用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.setParent(None)</span><br></pre></td></tr></table></figure>\n\n<p>来删除控件的，这样内存中的地址才会被回收</p>\n<h3 id=\"8-在“main”函数里面可以获取软件存在的路径及外部传入的参数\"><a href=\"#8-在“main”函数里面可以获取软件存在的路径及外部传入的参数\" class=\"headerlink\" title=\"8.在“main”函数里面可以获取软件存在的路径及外部传入的参数\"></a>8.在“main”函数里面可以获取软件存在的路径及外部传入的参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sys.argv[0]//软件打开路径</span><br><span class=\"line\">sys.arvg[1]//外部传入参数</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近开发中遇到的PyQt的坑，写出来，分享下</p>\n<h3 id=\"1-Label-控件中-给图片样式的显示方式\"><a href=\"#1-Label-控件中-给图片样式的显示方式\" class=\"headerlink\" title=\"1.Label 控件中 给图片样式的显示方式\"></a>1.Label 控件中 给图片样式的显示方式</h3><p>Background-image：显示方式  原始图片显示   不裁剪<br>Border-image：显示方式  拉伸  完整显示<br>image:显示方式 原始图片 最合适比例显示 </p>\n<h3 id=\"2-Label-图片的加载\"><a href=\"#2-Label-图片的加载\" class=\"headerlink\" title=\"2.Label 图片的加载\"></a>2.Label 图片的加载</h3><p>png：png图片显示可以使用样式或者pixmap（跟jpg加载一样）显示，但是需要先把图片加载为py文件</p>\n<p>⑴. 写入qrc文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE RCC&gt;</span><br><span class=\"line\">&lt;RCC version=&quot;1.0&quot;&gt;</span><br><span class=\"line\">&lt;qresource prefix=&quot;/Images&quot;&gt;</span><br><span class=\"line\">&lt;file&gt;time.png&lt;/file&gt;</span><br><span class=\"line\">&lt;file&gt;gou.png&lt;/file&gt;</span><br><span class=\"line\">&lt;file&gt;default.png&lt;/file&gt;</span><br><span class=\"line\">&lt;/qresource&gt;</span><br><span class=\"line\">&lt;/RCC&gt;</span><br></pre></td></tr></table></figure>\n\n<p>⑵. 将qrc文件用PyRcc转换为py文件</p>\n<p>⑶. 调用py文件进行加载</p>\n<p>jpg图片加载： jpg图片加载只能用pixmap加载显示（实际上是画上去）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.disPlayImage.load(self.jpgImageURL)</span><br><span class=\"line\">pixmap = QtGui.QPixmap(self.disPlayImage)</span><br><span class=\"line\">//画上去的显示方式（这是imageView的大小，不拉伸）</span><br><span class=\"line\">scaredPixmap = pixmap.scaled(self.imageView.width(), self.imageView.height(), aspectRatioMode=Qt.KeepAspectRatio)</span><br><span class=\"line\">//pixmap加载图片</span><br><span class=\"line\">self.imageView.setPixmap(scaredPixmap)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-控件的边框显示\"><a href=\"#3-控件的边框显示\" class=\"headerlink\" title=\"3.控件的边框显示\"></a>3.控件的边框显示</h3><p>需要添加边框的宽，显示方式，颜色才能显示</p>\n<h3 id=\"4-获取屏幕大小\"><a href=\"#4-获取屏幕大小\" class=\"headerlink\" title=\"4.获取屏幕大小\"></a>4.获取屏幕大小</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">QtGui.QApplication.desktop()</span><br><span class=\"line\">View = desktop.screenGeometry()</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-子控件需要实现父控件paintEvent绘图方法才能显示图片\"><a href=\"#5-子控件需要实现父控件paintEvent绘图方法才能显示图片\" class=\"headerlink\" title=\"5.子控件需要实现父控件paintEvent绘图方法才能显示图片\"></a>5.子控件需要实现父控件paintEvent绘图方法才能显示图片</h3><h3 id=\"6-当子控件截取了点击事件后在点击事件里面调用父控件点击事件进行事件传递\"><a href=\"#6-当子控件截取了点击事件后在点击事件里面调用父控件点击事件进行事件传递\" class=\"headerlink\" title=\"6.当子控件截取了点击事件后在点击事件里面调用父控件点击事件进行事件传递\"></a>6.当子控件截取了点击事件后在点击事件里面调用父控件点击事件进行事件传递</h3><h3 id=\"7-父控件去掉子控件不是用“deleteLater”，这个方法只是在界面上去掉子控件，实际上内存中还存在，用sip的“deleter”方法删除也不安全，会删掉不应该删除的，查看源码发现，源码里面是用\"><a href=\"#7-父控件去掉子控件不是用“deleteLater”，这个方法只是在界面上去掉子控件，实际上内存中还存在，用sip的“deleter”方法删除也不安全，会删掉不应该删除的，查看源码发现，源码里面是用\" class=\"headerlink\" title=\"7.父控件去掉子控件不是用“deleteLater”，这个方法只是在界面上去掉子控件，实际上内存中还存在，用sip的“deleter”方法删除也不安全，会删掉不应该删除的，查看源码发现，源码里面是用\"></a>7.父控件去掉子控件不是用“deleteLater”，这个方法只是在界面上去掉子控件，实际上内存中还存在，用sip的“deleter”方法删除也不安全，会删掉不应该删除的，查看源码发现，源码里面是用</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">view.setParent(None)</span><br></pre></td></tr></table></figure>\n\n<p>来删除控件的，这样内存中的地址才会被回收</p>\n<h3 id=\"8-在“main”函数里面可以获取软件存在的路径及外部传入的参数\"><a href=\"#8-在“main”函数里面可以获取软件存在的路径及外部传入的参数\" class=\"headerlink\" title=\"8.在“main”函数里面可以获取软件存在的路径及外部传入的参数\"></a>8.在“main”函数里面可以获取软件存在的路径及外部传入的参数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sys.argv[0]//软件打开路径</span><br><span class=\"line\">sys.arvg[1]//外部传入参数</span><br></pre></td></tr></table></figure>\n"},{"title":"PyQt之分离多线程","date":"2019-10-15T07:08:14.000Z","_content":"\nPyQt中实现多线程处理任务，本文单独创建新的多线程类处理任务\n\n### 1.创建线程类\n\n继承“QThread类\"创建自己的线程类，在类中添加回传的信号\n\n```\nclass MyThread(QtCore,QThread):\n    trigger = QtCore.pyqtSignal(int)\n```\n\n### 2.实现需要任务\n\n在自己的线程类中，实现“run”方法，在方法中写需要多线程处理的任务，然后使用\n```\nself.trigger.emit(int)//发送信号并传出的参数\n```\n来发送信号以调用其他方法来刷新UI等操作\n\n\n### 3.实现收到信号后实现的方法\n```\n//收到信号后实现的方法，这里收到信号后也是子线程调用处理\ndef fation(self, int):\n    //具体实现\n```\n\n### 4.在需要创建子线程处理任务的地方创建类\n```\n//创建类并指定接收到信号时实现方法\nthred = MyThread()\n//绑定收到信号后实现方法\nthred.trigger.connect(self.fation)\n//启动子线程\nthred.staet()\n```\n\n最后分享一个我自己简单封装的异步请求类\n\n[这个是地址](https://github.com/as568381497/CXPyQt4HTTP)\n\n","source":"_posts/2019/PyQt之分离多线程.md","raw":"---\ntitle: PyQt之分离多线程\ndate: 2019-10-15 15:08:14\ntags: [技术,PyQt4]\ncategory: [PyQt4]\n---\n\nPyQt中实现多线程处理任务，本文单独创建新的多线程类处理任务\n\n### 1.创建线程类\n\n继承“QThread类\"创建自己的线程类，在类中添加回传的信号\n\n```\nclass MyThread(QtCore,QThread):\n    trigger = QtCore.pyqtSignal(int)\n```\n\n### 2.实现需要任务\n\n在自己的线程类中，实现“run”方法，在方法中写需要多线程处理的任务，然后使用\n```\nself.trigger.emit(int)//发送信号并传出的参数\n```\n来发送信号以调用其他方法来刷新UI等操作\n\n\n### 3.实现收到信号后实现的方法\n```\n//收到信号后实现的方法，这里收到信号后也是子线程调用处理\ndef fation(self, int):\n    //具体实现\n```\n\n### 4.在需要创建子线程处理任务的地方创建类\n```\n//创建类并指定接收到信号时实现方法\nthred = MyThread()\n//绑定收到信号后实现方法\nthred.trigger.connect(self.fation)\n//启动子线程\nthred.staet()\n```\n\n最后分享一个我自己简单封装的异步请求类\n\n[这个是地址](https://github.com/as568381497/CXPyQt4HTTP)\n\n","slug":"2019/PyQt之分离多线程","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofgll0008g0vg7zeq32xe","content":"<p>PyQt中实现多线程处理任务，本文单独创建新的多线程类处理任务</p>\n<h3 id=\"1-创建线程类\"><a href=\"#1-创建线程类\" class=\"headerlink\" title=\"1.创建线程类\"></a>1.创建线程类</h3><p>继承“QThread类”创建自己的线程类，在类中添加回传的信号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyThread(QtCore,QThread):</span><br><span class=\"line\">    trigger = QtCore.pyqtSignal(int)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-实现需要任务\"><a href=\"#2-实现需要任务\" class=\"headerlink\" title=\"2.实现需要任务\"></a>2.实现需要任务</h3><p>在自己的线程类中，实现“run”方法，在方法中写需要多线程处理的任务，然后使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.trigger.emit(int)//发送信号并传出的参数</span><br></pre></td></tr></table></figure>\n<p>来发送信号以调用其他方法来刷新UI等操作</p>\n<h3 id=\"3-实现收到信号后实现的方法\"><a href=\"#3-实现收到信号后实现的方法\" class=\"headerlink\" title=\"3.实现收到信号后实现的方法\"></a>3.实现收到信号后实现的方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//收到信号后实现的方法，这里收到信号后也是子线程调用处理</span><br><span class=\"line\">def fation(self, int):</span><br><span class=\"line\">    //具体实现</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-在需要创建子线程处理任务的地方创建类\"><a href=\"#4-在需要创建子线程处理任务的地方创建类\" class=\"headerlink\" title=\"4.在需要创建子线程处理任务的地方创建类\"></a>4.在需要创建子线程处理任务的地方创建类</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建类并指定接收到信号时实现方法</span><br><span class=\"line\">thred = MyThread()</span><br><span class=\"line\">//绑定收到信号后实现方法</span><br><span class=\"line\">thred.trigger.connect(self.fation)</span><br><span class=\"line\">//启动子线程</span><br><span class=\"line\">thred.staet()</span><br></pre></td></tr></table></figure>\n\n<p>最后分享一个我自己简单封装的异步请求类</p>\n<p><a href=\"https://github.com/as568381497/CXPyQt4HTTP\">这个是地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>PyQt中实现多线程处理任务，本文单独创建新的多线程类处理任务</p>\n<h3 id=\"1-创建线程类\"><a href=\"#1-创建线程类\" class=\"headerlink\" title=\"1.创建线程类\"></a>1.创建线程类</h3><p>继承“QThread类”创建自己的线程类，在类中添加回传的信号</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class MyThread(QtCore,QThread):</span><br><span class=\"line\">    trigger = QtCore.pyqtSignal(int)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-实现需要任务\"><a href=\"#2-实现需要任务\" class=\"headerlink\" title=\"2.实现需要任务\"></a>2.实现需要任务</h3><p>在自己的线程类中，实现“run”方法，在方法中写需要多线程处理的任务，然后使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.trigger.emit(int)//发送信号并传出的参数</span><br></pre></td></tr></table></figure>\n<p>来发送信号以调用其他方法来刷新UI等操作</p>\n<h3 id=\"3-实现收到信号后实现的方法\"><a href=\"#3-实现收到信号后实现的方法\" class=\"headerlink\" title=\"3.实现收到信号后实现的方法\"></a>3.实现收到信号后实现的方法</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//收到信号后实现的方法，这里收到信号后也是子线程调用处理</span><br><span class=\"line\">def fation(self, int):</span><br><span class=\"line\">    //具体实现</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-在需要创建子线程处理任务的地方创建类\"><a href=\"#4-在需要创建子线程处理任务的地方创建类\" class=\"headerlink\" title=\"4.在需要创建子线程处理任务的地方创建类\"></a>4.在需要创建子线程处理任务的地方创建类</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建类并指定接收到信号时实现方法</span><br><span class=\"line\">thred = MyThread()</span><br><span class=\"line\">//绑定收到信号后实现方法</span><br><span class=\"line\">thred.trigger.connect(self.fation)</span><br><span class=\"line\">//启动子线程</span><br><span class=\"line\">thred.staet()</span><br></pre></td></tr></table></figure>\n\n<p>最后分享一个我自己简单封装的异步请求类</p>\n<p><a href=\"https://github.com/as568381497/CXPyQt4HTTP\">这个是地址</a></p>\n"},{"title":"阶段小结（五）","date":"2019-10-14T07:58:26.000Z","_content":"\n最近刚刚结束手头的一段项目，过来写一段小结。\n\n最近结束的是一个系统的第一期，PyQt这边是做的类似于PS类型的专注于图像显示的一个客户端，从接触PyQt开始学习到第一期项目完成，耗时两个月左右，做完有点不敢相信自己竟然做完了，emmmmm\n\n整体来说因为有其他语言的基础接触python和PyQt来使用不难，当然这是后面做完了回顾，做的时候，因为不知道语言特性，许多地方都耗时了很久，但是，就是一个很小的地方，不知道系统的设定是什么样子，只能一边找资料一点自己尝试，所幸，最后还是做完了。\n\n做完后的感觉就是，自己多会了两门技能，至少说能用了，再看到不是什么都不知道，python这边，算是入了门，基础部分已经全部学完，以后可以尝试写写爬虫什么的，PyQt这边，解锁了自己PC端开发到打包到打安装包的技能，整个开发的流程，及语言特性环境，全部知道和熟悉了，以后再接收相关的，速度应该能提升很多。\n\n都说百路相通，确实是，现在再结合python想想之前的JS，OC，其实很多东西都相同，感觉吧之前的很多东西突然间也想通了。\n\n对了，涉及到图像，就多了很多计算的内容，虽然不难，但是我觉得我要好好再补一补了，数学d里面的很多东西还是要学的，用起来真好用。\n\n再来一次的话，应该可以把自己做的东西更加的优化下，封装的东西更加的独立，好用。\n\n还要肯定自己，自己的思路是没问题的，而且，很多东西其实自己能做到。\n\n~~~\n努力成为自己希望成为的人\n~~~\n","source":"_posts/2019/PyQt项目小结.md","raw":"---\ntitle: 阶段小结（五）\ndate: 2019-10-14 15:58:26\ntags: [技术,总结]\ncategory: [小结]\n---\n\n最近刚刚结束手头的一段项目，过来写一段小结。\n\n最近结束的是一个系统的第一期，PyQt这边是做的类似于PS类型的专注于图像显示的一个客户端，从接触PyQt开始学习到第一期项目完成，耗时两个月左右，做完有点不敢相信自己竟然做完了，emmmmm\n\n整体来说因为有其他语言的基础接触python和PyQt来使用不难，当然这是后面做完了回顾，做的时候，因为不知道语言特性，许多地方都耗时了很久，但是，就是一个很小的地方，不知道系统的设定是什么样子，只能一边找资料一点自己尝试，所幸，最后还是做完了。\n\n做完后的感觉就是，自己多会了两门技能，至少说能用了，再看到不是什么都不知道，python这边，算是入了门，基础部分已经全部学完，以后可以尝试写写爬虫什么的，PyQt这边，解锁了自己PC端开发到打包到打安装包的技能，整个开发的流程，及语言特性环境，全部知道和熟悉了，以后再接收相关的，速度应该能提升很多。\n\n都说百路相通，确实是，现在再结合python想想之前的JS，OC，其实很多东西都相同，感觉吧之前的很多东西突然间也想通了。\n\n对了，涉及到图像，就多了很多计算的内容，虽然不难，但是我觉得我要好好再补一补了，数学d里面的很多东西还是要学的，用起来真好用。\n\n再来一次的话，应该可以把自己做的东西更加的优化下，封装的东西更加的独立，好用。\n\n还要肯定自己，自己的思路是没问题的，而且，很多东西其实自己能做到。\n\n~~~\n努力成为自己希望成为的人\n~~~\n","slug":"2019/PyQt项目小结","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglm0009g0vgc0oue0li","content":"<p>最近刚刚结束手头的一段项目，过来写一段小结。</p>\n<p>最近结束的是一个系统的第一期，PyQt这边是做的类似于PS类型的专注于图像显示的一个客户端，从接触PyQt开始学习到第一期项目完成，耗时两个月左右，做完有点不敢相信自己竟然做完了，emmmmm</p>\n<p>整体来说因为有其他语言的基础接触python和PyQt来使用不难，当然这是后面做完了回顾，做的时候，因为不知道语言特性，许多地方都耗时了很久，但是，就是一个很小的地方，不知道系统的设定是什么样子，只能一边找资料一点自己尝试，所幸，最后还是做完了。</p>\n<p>做完后的感觉就是，自己多会了两门技能，至少说能用了，再看到不是什么都不知道，python这边，算是入了门，基础部分已经全部学完，以后可以尝试写写爬虫什么的，PyQt这边，解锁了自己PC端开发到打包到打安装包的技能，整个开发的流程，及语言特性环境，全部知道和熟悉了，以后再接收相关的，速度应该能提升很多。</p>\n<p>都说百路相通，确实是，现在再结合python想想之前的JS，OC，其实很多东西都相同，感觉吧之前的很多东西突然间也想通了。</p>\n<p>对了，涉及到图像，就多了很多计算的内容，虽然不难，但是我觉得我要好好再补一补了，数学d里面的很多东西还是要学的，用起来真好用。</p>\n<p>再来一次的话，应该可以把自己做的东西更加的优化下，封装的东西更加的独立，好用。</p>\n<p>还要肯定自己，自己的思路是没问题的，而且，很多东西其实自己能做到。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">努力成为自己希望成为的人</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>最近刚刚结束手头的一段项目，过来写一段小结。</p>\n<p>最近结束的是一个系统的第一期，PyQt这边是做的类似于PS类型的专注于图像显示的一个客户端，从接触PyQt开始学习到第一期项目完成，耗时两个月左右，做完有点不敢相信自己竟然做完了，emmmmm</p>\n<p>整体来说因为有其他语言的基础接触python和PyQt来使用不难，当然这是后面做完了回顾，做的时候，因为不知道语言特性，许多地方都耗时了很久，但是，就是一个很小的地方，不知道系统的设定是什么样子，只能一边找资料一点自己尝试，所幸，最后还是做完了。</p>\n<p>做完后的感觉就是，自己多会了两门技能，至少说能用了，再看到不是什么都不知道，python这边，算是入了门，基础部分已经全部学完，以后可以尝试写写爬虫什么的，PyQt这边，解锁了自己PC端开发到打包到打安装包的技能，整个开发的流程，及语言特性环境，全部知道和熟悉了，以后再接收相关的，速度应该能提升很多。</p>\n<p>都说百路相通，确实是，现在再结合python想想之前的JS，OC，其实很多东西都相同，感觉吧之前的很多东西突然间也想通了。</p>\n<p>对了，涉及到图像，就多了很多计算的内容，虽然不难，但是我觉得我要好好再补一补了，数学d里面的很多东西还是要学的，用起来真好用。</p>\n<p>再来一次的话，应该可以把自己做的东西更加的优化下，封装的东西更加的独立，好用。</p>\n<p>还要肯定自己，自己的思路是没问题的，而且，很多东西其实自己能做到。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">努力成为自己希望成为的人</span><br></pre></td></tr></table></figure>\n"},{"title":"py文件打包及web打开本地程序","date":"2019-10-28T07:48:36.000Z","_content":"\n一句话开头\n```\npy文件 → exe可执行文件 → 可执行安装包\n\n```\n\n最近回顾下将本地py文件打成安装包的步骤，一共两步，先将程序主程序py文件打包成exe可执行程序，然后将exe文件打包成可安装的安装包程序。\n\n\n### 1.将py文件转换为exe可执行文件\n\n首先确定本地有\"pyinstaller\"，没有的话执行以下代码安装\"pyinstaller\"。\n\n```\npip install pyinstaller\n```\n\n当“pyinstaller”下载完成，并且准备打包后，终端进入程序主程序的文件夹，然后终端执行以下代码打包。\n\n```\npyinstaller --onefile --windowed xxxx.py\n\n```\n\n用 \"pyinstaller\"执行一句话就可以全自动将py文件全部打包为exe文件，打包完成后会在当前的文件夹生成一个dic的文件夹，可执行程序就在里面，文件名是主程序的文件名称,当然想在其他位置，将后面的文件位置和进入的文件夹位置换一下就好了。\n\n### 2.将exe文件和其他文件打包为安装文件\n\n这一步也需要借助一个软件 —— “Inno Setup”,[这里是下载地址](http://www.jrsoftware.org/download.php/is.exe)\n\n在安装完成后，打开\"inno Setup 编译器\",然后在打开的界面里面选择 \"用‘脚本向导创建新的脚本文件’\"这一选项，后面就可以根据向导制定一个自己exe文件的打包脚本，一个注意的地方就是选择自己的exe文件后，还可以选择其他需要打包的文件或者文件夹一起打包进去，当全部选择完成后，点击完成，就可以完成当前的j打包脚本的创建了，然后程序会询问是否运行，点击否，先保存脚本文件，然后再点击运行就可以了。\n\n当脚本执行完毕，自己程序的安装包就生成好了\n\n\n### 扩充 —— web端打开本地程序\n\n具体的实现效果就是用户点击网页某个事件，然后网页弹出询问窗口后打开本地程序。\n\n在上面打包的基础上，本地会保存一个后缀为 \"iss\" 的打包脚本，在这个脚本的内容后面加上下面代码\n\n```\n[Registry]\nRoot: HKCR; SubKey: WebPrinter; ValueData: \"DICOM Protocol\"; ValueType: string; Flags: CreateValueIfDoesntExist UninsDeleteKey;\nRoot: HKCR; SubKey: WebPrinter; ValueName: \"URL Protocol\"; Flags: CreateValueIfDoesntExist; ValueType: string;\nRoot: HKCR; SubKey: WebPrinter\\DefaultIcon; ValueData: {app}\\{#MyAppExeName}; Flags: CreateValueIfDoesntExist; ValueType: string;\nRoot: HKCR; SubKey: WebPrinter\\shell\\open\\command; ValueData: \"{app}\\{#MyAppExeName} \"\"%L\"\"\"; Flags: CreateValueIfDoesntExist; ValueType: string;\n\n```\n\n这是在注册表里面添加打开的协议，其中：\"WebPrinter\"是协议名称,“ValueName”是协议中key的值，\"ValueData\"是协议中velue的值，可以自己更改掉。\n\n然后执行这个脚本程序再次打包就可以了。\n\n然后在web端，需要调用的地方添加一下代码，其中\"WebPrinter\"是需要调用的协议，冒号后面是具体的传值。\n```\nhref=\"WebPrinter:xxxxx\"\n```\n\n具体的方式y可以有：\n1.在“a”标签中调用:\n\n```\n<a heef=\"WebPrinter:xxxx\"></a>\n```\n\n2.js代码中调用\n\n```\nlocation.href = \"WebPrinter:xxxx\";\n```\n","source":"_posts/2019/py文件打包.md","raw":"---\ntitle: py文件打包及web打开本地程序\ndate: 2019-10-28 15:48:36\ntags: [技术,打包]\ncategory: [其他技术,Python]\n---\n\n一句话开头\n```\npy文件 → exe可执行文件 → 可执行安装包\n\n```\n\n最近回顾下将本地py文件打成安装包的步骤，一共两步，先将程序主程序py文件打包成exe可执行程序，然后将exe文件打包成可安装的安装包程序。\n\n\n### 1.将py文件转换为exe可执行文件\n\n首先确定本地有\"pyinstaller\"，没有的话执行以下代码安装\"pyinstaller\"。\n\n```\npip install pyinstaller\n```\n\n当“pyinstaller”下载完成，并且准备打包后，终端进入程序主程序的文件夹，然后终端执行以下代码打包。\n\n```\npyinstaller --onefile --windowed xxxx.py\n\n```\n\n用 \"pyinstaller\"执行一句话就可以全自动将py文件全部打包为exe文件，打包完成后会在当前的文件夹生成一个dic的文件夹，可执行程序就在里面，文件名是主程序的文件名称,当然想在其他位置，将后面的文件位置和进入的文件夹位置换一下就好了。\n\n### 2.将exe文件和其他文件打包为安装文件\n\n这一步也需要借助一个软件 —— “Inno Setup”,[这里是下载地址](http://www.jrsoftware.org/download.php/is.exe)\n\n在安装完成后，打开\"inno Setup 编译器\",然后在打开的界面里面选择 \"用‘脚本向导创建新的脚本文件’\"这一选项，后面就可以根据向导制定一个自己exe文件的打包脚本，一个注意的地方就是选择自己的exe文件后，还可以选择其他需要打包的文件或者文件夹一起打包进去，当全部选择完成后，点击完成，就可以完成当前的j打包脚本的创建了，然后程序会询问是否运行，点击否，先保存脚本文件，然后再点击运行就可以了。\n\n当脚本执行完毕，自己程序的安装包就生成好了\n\n\n### 扩充 —— web端打开本地程序\n\n具体的实现效果就是用户点击网页某个事件，然后网页弹出询问窗口后打开本地程序。\n\n在上面打包的基础上，本地会保存一个后缀为 \"iss\" 的打包脚本，在这个脚本的内容后面加上下面代码\n\n```\n[Registry]\nRoot: HKCR; SubKey: WebPrinter; ValueData: \"DICOM Protocol\"; ValueType: string; Flags: CreateValueIfDoesntExist UninsDeleteKey;\nRoot: HKCR; SubKey: WebPrinter; ValueName: \"URL Protocol\"; Flags: CreateValueIfDoesntExist; ValueType: string;\nRoot: HKCR; SubKey: WebPrinter\\DefaultIcon; ValueData: {app}\\{#MyAppExeName}; Flags: CreateValueIfDoesntExist; ValueType: string;\nRoot: HKCR; SubKey: WebPrinter\\shell\\open\\command; ValueData: \"{app}\\{#MyAppExeName} \"\"%L\"\"\"; Flags: CreateValueIfDoesntExist; ValueType: string;\n\n```\n\n这是在注册表里面添加打开的协议，其中：\"WebPrinter\"是协议名称,“ValueName”是协议中key的值，\"ValueData\"是协议中velue的值，可以自己更改掉。\n\n然后执行这个脚本程序再次打包就可以了。\n\n然后在web端，需要调用的地方添加一下代码，其中\"WebPrinter\"是需要调用的协议，冒号后面是具体的传值。\n```\nhref=\"WebPrinter:xxxxx\"\n```\n\n具体的方式y可以有：\n1.在“a”标签中调用:\n\n```\n<a heef=\"WebPrinter:xxxx\"></a>\n```\n\n2.js代码中调用\n\n```\nlocation.href = \"WebPrinter:xxxx\";\n```\n","slug":"2019/py文件打包","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglo000cg0vgb4ffgzag","content":"<p>一句话开头</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">py文件 → exe可执行文件 → 可执行安装包</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>最近回顾下将本地py文件打成安装包的步骤，一共两步，先将程序主程序py文件打包成exe可执行程序，然后将exe文件打包成可安装的安装包程序。</p>\n<h3 id=\"1-将py文件转换为exe可执行文件\"><a href=\"#1-将py文件转换为exe可执行文件\" class=\"headerlink\" title=\"1.将py文件转换为exe可执行文件\"></a>1.将py文件转换为exe可执行文件</h3><p>首先确定本地有”pyinstaller”，没有的话执行以下代码安装”pyinstaller”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyinstaller</span><br></pre></td></tr></table></figure>\n\n<p>当“pyinstaller”下载完成，并且准备打包后，终端进入程序主程序的文件夹，然后终端执行以下代码打包。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyinstaller --onefile --windowed xxxx.py</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>用 “pyinstaller”执行一句话就可以全自动将py文件全部打包为exe文件，打包完成后会在当前的文件夹生成一个dic的文件夹，可执行程序就在里面，文件名是主程序的文件名称,当然想在其他位置，将后面的文件位置和进入的文件夹位置换一下就好了。</p>\n<h3 id=\"2-将exe文件和其他文件打包为安装文件\"><a href=\"#2-将exe文件和其他文件打包为安装文件\" class=\"headerlink\" title=\"2.将exe文件和其他文件打包为安装文件\"></a>2.将exe文件和其他文件打包为安装文件</h3><p>这一步也需要借助一个软件 —— “Inno Setup”,<a href=\"http://www.jrsoftware.org/download.php/is.exe\">这里是下载地址</a></p>\n<p>在安装完成后，打开”inno Setup 编译器”,然后在打开的界面里面选择 “用‘脚本向导创建新的脚本文件’”这一选项，后面就可以根据向导制定一个自己exe文件的打包脚本，一个注意的地方就是选择自己的exe文件后，还可以选择其他需要打包的文件或者文件夹一起打包进去，当全部选择完成后，点击完成，就可以完成当前的j打包脚本的创建了，然后程序会询问是否运行，点击否，先保存脚本文件，然后再点击运行就可以了。</p>\n<p>当脚本执行完毕，自己程序的安装包就生成好了</p>\n<h3 id=\"扩充-——-web端打开本地程序\"><a href=\"#扩充-——-web端打开本地程序\" class=\"headerlink\" title=\"扩充 —— web端打开本地程序\"></a>扩充 —— web端打开本地程序</h3><p>具体的实现效果就是用户点击网页某个事件，然后网页弹出询问窗口后打开本地程序。</p>\n<p>在上面打包的基础上，本地会保存一个后缀为 “iss” 的打包脚本，在这个脚本的内容后面加上下面代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Registry]</span><br><span class=\"line\">Root: HKCR; SubKey: WebPrinter; ValueData: &quot;DICOM Protocol&quot;; ValueType: string; Flags: CreateValueIfDoesntExist UninsDeleteKey;</span><br><span class=\"line\">Root: HKCR; SubKey: WebPrinter; ValueName: &quot;URL Protocol&quot;; Flags: CreateValueIfDoesntExist; ValueType: string;</span><br><span class=\"line\">Root: HKCR; SubKey: WebPrinter\\DefaultIcon; ValueData: &#123;app&#125;\\&#123;#MyAppExeName&#125;; Flags: CreateValueIfDoesntExist; ValueType: string;</span><br><span class=\"line\">Root: HKCR; SubKey: WebPrinter\\shell\\open\\command; ValueData: &quot;&#123;app&#125;\\&#123;#MyAppExeName&#125; &quot;&quot;%L&quot;&quot;&quot;; Flags: CreateValueIfDoesntExist; ValueType: string;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这是在注册表里面添加打开的协议，其中：”WebPrinter”是协议名称,“ValueName”是协议中key的值，”ValueData”是协议中velue的值，可以自己更改掉。</p>\n<p>然后执行这个脚本程序再次打包就可以了。</p>\n<p>然后在web端，需要调用的地方添加一下代码，其中”WebPrinter”是需要调用的协议，冒号后面是具体的传值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">href=&quot;WebPrinter:xxxxx&quot;</span><br></pre></td></tr></table></figure>\n\n<p>具体的方式y可以有：<br>1.在“a”标签中调用:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a heef=&quot;WebPrinter:xxxx&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2.js代码中调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.href = &quot;WebPrinter:xxxx&quot;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>一句话开头</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">py文件 → exe可执行文件 → 可执行安装包</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>最近回顾下将本地py文件打成安装包的步骤，一共两步，先将程序主程序py文件打包成exe可执行程序，然后将exe文件打包成可安装的安装包程序。</p>\n<h3 id=\"1-将py文件转换为exe可执行文件\"><a href=\"#1-将py文件转换为exe可执行文件\" class=\"headerlink\" title=\"1.将py文件转换为exe可执行文件\"></a>1.将py文件转换为exe可执行文件</h3><p>首先确定本地有”pyinstaller”，没有的话执行以下代码安装”pyinstaller”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pyinstaller</span><br></pre></td></tr></table></figure>\n\n<p>当“pyinstaller”下载完成，并且准备打包后，终端进入程序主程序的文件夹，然后终端执行以下代码打包。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pyinstaller --onefile --windowed xxxx.py</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>用 “pyinstaller”执行一句话就可以全自动将py文件全部打包为exe文件，打包完成后会在当前的文件夹生成一个dic的文件夹，可执行程序就在里面，文件名是主程序的文件名称,当然想在其他位置，将后面的文件位置和进入的文件夹位置换一下就好了。</p>\n<h3 id=\"2-将exe文件和其他文件打包为安装文件\"><a href=\"#2-将exe文件和其他文件打包为安装文件\" class=\"headerlink\" title=\"2.将exe文件和其他文件打包为安装文件\"></a>2.将exe文件和其他文件打包为安装文件</h3><p>这一步也需要借助一个软件 —— “Inno Setup”,<a href=\"http://www.jrsoftware.org/download.php/is.exe\">这里是下载地址</a></p>\n<p>在安装完成后，打开”inno Setup 编译器”,然后在打开的界面里面选择 “用‘脚本向导创建新的脚本文件’”这一选项，后面就可以根据向导制定一个自己exe文件的打包脚本，一个注意的地方就是选择自己的exe文件后，还可以选择其他需要打包的文件或者文件夹一起打包进去，当全部选择完成后，点击完成，就可以完成当前的j打包脚本的创建了，然后程序会询问是否运行，点击否，先保存脚本文件，然后再点击运行就可以了。</p>\n<p>当脚本执行完毕，自己程序的安装包就生成好了</p>\n<h3 id=\"扩充-——-web端打开本地程序\"><a href=\"#扩充-——-web端打开本地程序\" class=\"headerlink\" title=\"扩充 —— web端打开本地程序\"></a>扩充 —— web端打开本地程序</h3><p>具体的实现效果就是用户点击网页某个事件，然后网页弹出询问窗口后打开本地程序。</p>\n<p>在上面打包的基础上，本地会保存一个后缀为 “iss” 的打包脚本，在这个脚本的内容后面加上下面代码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Registry]</span><br><span class=\"line\">Root: HKCR; SubKey: WebPrinter; ValueData: &quot;DICOM Protocol&quot;; ValueType: string; Flags: CreateValueIfDoesntExist UninsDeleteKey;</span><br><span class=\"line\">Root: HKCR; SubKey: WebPrinter; ValueName: &quot;URL Protocol&quot;; Flags: CreateValueIfDoesntExist; ValueType: string;</span><br><span class=\"line\">Root: HKCR; SubKey: WebPrinter\\DefaultIcon; ValueData: &#123;app&#125;\\&#123;#MyAppExeName&#125;; Flags: CreateValueIfDoesntExist; ValueType: string;</span><br><span class=\"line\">Root: HKCR; SubKey: WebPrinter\\shell\\open\\command; ValueData: &quot;&#123;app&#125;\\&#123;#MyAppExeName&#125; &quot;&quot;%L&quot;&quot;&quot;; Flags: CreateValueIfDoesntExist; ValueType: string;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这是在注册表里面添加打开的协议，其中：”WebPrinter”是协议名称,“ValueName”是协议中key的值，”ValueData”是协议中velue的值，可以自己更改掉。</p>\n<p>然后执行这个脚本程序再次打包就可以了。</p>\n<p>然后在web端，需要调用的地方添加一下代码，其中”WebPrinter”是需要调用的协议，冒号后面是具体的传值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">href=&quot;WebPrinter:xxxxx&quot;</span><br></pre></td></tr></table></figure>\n\n<p>具体的方式y可以有：<br>1.在“a”标签中调用:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a heef=&quot;WebPrinter:xxxx&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<p>2.js代码中调用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location.href = &quot;WebPrinter:xxxx&quot;;</span><br></pre></td></tr></table></figure>\n"},{"title":"阶段小结（四）","date":"2019-05-06T12:46:25.000Z","_content":"\n历时大半年时间完成了HOOO小程序以及官网的开发，这一段时间算是对自己技术的另外一个升华吧，自此有了除去iOS以外的技能。其实刚开始的我是心存恐惧的，因为我是等于零基础上手并开发一个新的项目，我对我自己是没信心的，无奈只能一边学一边做，中间也经历了很多坑，不过结局还不错，总算完成了项目，现在项目也完全投入线上，正常运行了。\n\n说起来，有一部分原因是因为小程序还是国内的，所以文档内容看起来还是比较顺利，并且小程序提供的文档里面，基本能完成一些常规的展示和功能，遇到的难点都能解决掉，想想在这次小程序开发中，最大的收获不是有了小程序开发的能力，而是对自己的能力一种肯定，在对一个新技术的完成能力，对自己的自信又增强。\n\n后来又开发公司的官网，第一次正式接触web网页开发，其实，同样的，整个开发过程中最让我受益的并不是学习新语言，而是对web开发整个过程了解了，了解了响应式布局。\n","source":"_posts/2019/阶段小结（四）.md","raw":"---\ntitle: 阶段小结（四）\ndate: 2019/5/6 20:46:25\ntags: [技术,总结,小程序,前端]\ncategory: [小结]\n---\n\n历时大半年时间完成了HOOO小程序以及官网的开发，这一段时间算是对自己技术的另外一个升华吧，自此有了除去iOS以外的技能。其实刚开始的我是心存恐惧的，因为我是等于零基础上手并开发一个新的项目，我对我自己是没信心的，无奈只能一边学一边做，中间也经历了很多坑，不过结局还不错，总算完成了项目，现在项目也完全投入线上，正常运行了。\n\n说起来，有一部分原因是因为小程序还是国内的，所以文档内容看起来还是比较顺利，并且小程序提供的文档里面，基本能完成一些常规的展示和功能，遇到的难点都能解决掉，想想在这次小程序开发中，最大的收获不是有了小程序开发的能力，而是对自己的能力一种肯定，在对一个新技术的完成能力，对自己的自信又增强。\n\n后来又开发公司的官网，第一次正式接触web网页开发，其实，同样的，整个开发过程中最让我受益的并不是学习新语言，而是对web开发整个过程了解了，了解了响应式布局。\n","slug":"2019/阶段小结（四）","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglo000dg0vg0bcdba8z","content":"<p>历时大半年时间完成了HOOO小程序以及官网的开发，这一段时间算是对自己技术的另外一个升华吧，自此有了除去iOS以外的技能。其实刚开始的我是心存恐惧的，因为我是等于零基础上手并开发一个新的项目，我对我自己是没信心的，无奈只能一边学一边做，中间也经历了很多坑，不过结局还不错，总算完成了项目，现在项目也完全投入线上，正常运行了。</p>\n<p>说起来，有一部分原因是因为小程序还是国内的，所以文档内容看起来还是比较顺利，并且小程序提供的文档里面，基本能完成一些常规的展示和功能，遇到的难点都能解决掉，想想在这次小程序开发中，最大的收获不是有了小程序开发的能力，而是对自己的能力一种肯定，在对一个新技术的完成能力，对自己的自信又增强。</p>\n<p>后来又开发公司的官网，第一次正式接触web网页开发，其实，同样的，整个开发过程中最让我受益的并不是学习新语言，而是对web开发整个过程了解了，了解了响应式布局。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>历时大半年时间完成了HOOO小程序以及官网的开发，这一段时间算是对自己技术的另外一个升华吧，自此有了除去iOS以外的技能。其实刚开始的我是心存恐惧的，因为我是等于零基础上手并开发一个新的项目，我对我自己是没信心的，无奈只能一边学一边做，中间也经历了很多坑，不过结局还不错，总算完成了项目，现在项目也完全投入线上，正常运行了。</p>\n<p>说起来，有一部分原因是因为小程序还是国内的，所以文档内容看起来还是比较顺利，并且小程序提供的文档里面，基本能完成一些常规的展示和功能，遇到的难点都能解决掉，想想在这次小程序开发中，最大的收获不是有了小程序开发的能力，而是对自己的能力一种肯定，在对一个新技术的完成能力，对自己的自信又增强。</p>\n<p>后来又开发公司的官网，第一次正式接触web网页开发，其实，同样的，整个开发过程中最让我受益的并不是学习新语言，而是对web开发整个过程了解了，了解了响应式布局。</p>\n"},{"title":"Hello World","date":"2017-10-23T12:46:25.000Z","_content":"\n关于这个博客，是我自己突然想做的，一方面觉得弄个博客很有意思，也算对自己的一个挑战，另外一方面，算是个给自己找了一个属于自己的空间，以后这上面会陆续放上自己写的一些东西，希望可以保存的。\n从自己最开始摸索博客是什么，到整个博客的框架搭建成功，大概历时了一个多月吧，中间转转折折弄了很多，坑也踩过了许多，想着之后把搭建过程中踩过的坑写出来，也算是一个心得分享了。\n以后这里面的内容会慢慢完善，加入一些功能，少量的，我喜欢简洁一点的，至于文章，我会放上我的日常，还有技术分享以及一些心得体会，暂时就这样了。\n","source":"_posts/2017/Hello World.md","raw":"---\ntitle: Hello World\ndate: 2017/10/23 20:46:25\ntags: [其他]\ncategory: [其他技术]\n---\n\n关于这个博客，是我自己突然想做的，一方面觉得弄个博客很有意思，也算对自己的一个挑战，另外一方面，算是个给自己找了一个属于自己的空间，以后这上面会陆续放上自己写的一些东西，希望可以保存的。\n从自己最开始摸索博客是什么，到整个博客的框架搭建成功，大概历时了一个多月吧，中间转转折折弄了很多，坑也踩过了许多，想着之后把搭建过程中踩过的坑写出来，也算是一个心得分享了。\n以后这里面的内容会慢慢完善，加入一些功能，少量的，我喜欢简洁一点的，至于文章，我会放上我的日常，还有技术分享以及一些心得体会，暂时就这样了。\n","slug":"2017/Hello World","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglp000hg0vghnvx0qhy","content":"<p>关于这个博客，是我自己突然想做的，一方面觉得弄个博客很有意思，也算对自己的一个挑战，另外一方面，算是个给自己找了一个属于自己的空间，以后这上面会陆续放上自己写的一些东西，希望可以保存的。<br>从自己最开始摸索博客是什么，到整个博客的框架搭建成功，大概历时了一个多月吧，中间转转折折弄了很多，坑也踩过了许多，想着之后把搭建过程中踩过的坑写出来，也算是一个心得分享了。<br>以后这里面的内容会慢慢完善，加入一些功能，少量的，我喜欢简洁一点的，至于文章，我会放上我的日常，还有技术分享以及一些心得体会，暂时就这样了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>关于这个博客，是我自己突然想做的，一方面觉得弄个博客很有意思，也算对自己的一个挑战，另外一方面，算是个给自己找了一个属于自己的空间，以后这上面会陆续放上自己写的一些东西，希望可以保存的。<br>从自己最开始摸索博客是什么，到整个博客的框架搭建成功，大概历时了一个多月吧，中间转转折折弄了很多，坑也踩过了许多，想着之后把搭建过程中踩过的坑写出来，也算是一个心得分享了。<br>以后这里面的内容会慢慢完善，加入一些功能，少量的，我喜欢简洁一点的，至于文章，我会放上我的日常，还有技术分享以及一些心得体会，暂时就这样了。</p>\n"},{"title":"个人博客搭建","date":"2017-11-10T12:46:25.000Z","_content":"这个博客从开始到搭建完成，大概历时一个月左右，综合使用了：[Hexo](https://hexo.io/zh-cn/)、[GitHub](https://github.com/)、[Netlify](https://www.netlify.com/)、[Freenom](https://www.freenom.com/zh/index.html?lang=zh)这四个平台。\n这四个平台，Hexo是一款容易上手，并且高效的博客框架。GitHub是一款主流的代码托管平台。Freenom是国外的一个提供免费的域名申请的平台。Netlify提供了自动生成静态的Https网站，提供自带的DNS域名解析。所以，我们的搭建流程是，先用Hexo在本地搭建起来博客的框架，然后将本地的代码托管至GitHub，然后将GitHub的代码提交到Netlify生成静态的Https网站，然后在Freenom申请自己喜欢的自定义域名，将Netlify生成的域名替换为我们申请的域名，然后用Nettify自带的DNS解析为自定义的域名加上Https。\n\n接下来我会慢慢一步一步重现我搭建的过程。\n\n## 首先我们需要到Hexo为本地搭建博客框架。\n在安装Hexo之前，我们需要在本地安装Node.js和Git,以MAC为例，在终端输入\n\n``` bash\nbrew install git\n```\n\n### 安装Git。\n安装Node.js需要三步:\n\n``` bash\n1.curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n2.wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n3.nvm install stable\n```\n\n在安装这两个没问题后，再在终端输入\n\n``` bash\nnpm install -g hexo-cli\n```\n\n就可以成功安装Hexo了。\n\n接下来，我们要搭建Hexo，这个也需要三步：\n\n### 搭建Hexo\n``` bash\n1.hexo init <指定的文件夹>\n2. cd <指定的文件夹>\n3. npm install\n```\n\n到这里，我们的Hexo就搭建完成了，搭建完成后本地的具体的配置信息在这这里。\n\n## 将下一步将我们的Hexo与GitHub关联起来\n\n我们需要将我们本地的Hexo代码提交到GitHub,此处省略怎么注册GitHub的账号，以及怎么建立一个Git的仓库。\n在我们在Git创建好后，我们现在将下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：\n\n``` bash\ndeploy:\ntype: git\nrepo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git\nbranch: master\n```\n\n参考如下：\n\n![配置文件](/images/个人博客搭建/1.png)\n\n这时，我们在终端进入Hexo的文件夹后再输入下面四条命令：\n\n``` bash \n1.npm install hexo-deployer-git --save\n2.hexo clean\n3.hexo g\n4.hexo d\n```\n\n至此，我们完成了一半了，已经你的博客已经可以上线，可以访问了，但是，我们现在来点不一样的，已定义域名，以及添加Https。\n\n## 申请域名\n\n接下来，我们去这里Freenom，这个网站是支持中文的，可以调整为中文显示，一样，我们需要申请个账号，注意，这个网站需要翻墙才能进去。在我们注册完账号之后，我们可以在这里申请一个顶级的域名，是免费的，但是期限最长只有一年，后面需要自己再续期。在“Services“里面点击“Register a New Domain”跳转到域名申请页面，填写自己喜欢的域名，然后搜索出来的绿色的都是可以用的，跟购物一样，选择好域名后，在结算页面，期限选择一年，然后点击确定，在我们的邮箱里面确认后，我们就可以拥有这个域名了。在申请完域名后，可以在“My Domains”中找到我们刚刚申请的域名。\n\n\n## 把github上面的代码我们利用Netlify生成属于Netlify的页面\n首先，一样注册账号，可以选择用GitHub的账号注册，按照提示一步一步的走，注册成功后，在主界面点击“New site from Git”生成新的Git页面,\n\n![第一步](/images/个人博客搭建/2.png)\n\n根据提示一步一的来，我们选择下面的“GitHub”,点击后需要获取我们GitHub的权限，点击确定。\n\n![第二步](/images/个人博客搭建/3.png)\n\n这一步我们选择需要生成的分支，这里我们会看到我们托管到GitHub的Hexo的项目，选择这个，进入下一步。\n\n![第三步](/images/个人博客搭建/4.png)\n\n这一步直接点确定进入下一步，等待系统生成页面就好了。\n当生成页面后，我们基于Netlify的的博客页面就搭建好了，这个时候是可以直接访问的，但是并不是我们的自定义域名，接下来我们换成自定义的域名。\n\n## 修改服务器\n\n我们先在本地的Hexo项目里面添加一个文件，在blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。\n然后在Netlify里面找到“Settings”,在里面点击左侧栏目的“Domain management”，在“Custom domains”中填写自己在Freenom中申请的域名。\n去到Freenom在自己的域名设置里面，找到“Nameservers”，将服务器的名称修改为如下：\n\n![服务器名称](/images/个人博客搭建/5.png)\n\n然后等待一个小时左右服务器生效。\n生效后，再在“Domain management”下面的“HTTPS”点击检测按钮，检测服务器是否配置成功，然后后面就很简单了，系统会自动生成DNS的域名解析，然后生成Https的证书。\n\n到此，大功告成，我们的博客页面就搭建完成了。\n\nPS：还有个小东西，在GitHub里面，我们托管的Hexo项目里面，找到设置页，GitHub也提供了自定义域名的功能，将我们刚刚申请的域名填入，这样，在访问你GitHub为域名的页面的时候，会自动跳转到你自定义域名的页面。\n","source":"_posts/2017/个人博客搭建.md","raw":"---\ntitle: 个人博客搭建\ndate: 2017/11/10 20:46:25\ntags: [技术,搭建]\ncategory: [其他技术]\n---\n这个博客从开始到搭建完成，大概历时一个月左右，综合使用了：[Hexo](https://hexo.io/zh-cn/)、[GitHub](https://github.com/)、[Netlify](https://www.netlify.com/)、[Freenom](https://www.freenom.com/zh/index.html?lang=zh)这四个平台。\n这四个平台，Hexo是一款容易上手，并且高效的博客框架。GitHub是一款主流的代码托管平台。Freenom是国外的一个提供免费的域名申请的平台。Netlify提供了自动生成静态的Https网站，提供自带的DNS域名解析。所以，我们的搭建流程是，先用Hexo在本地搭建起来博客的框架，然后将本地的代码托管至GitHub，然后将GitHub的代码提交到Netlify生成静态的Https网站，然后在Freenom申请自己喜欢的自定义域名，将Netlify生成的域名替换为我们申请的域名，然后用Nettify自带的DNS解析为自定义的域名加上Https。\n\n接下来我会慢慢一步一步重现我搭建的过程。\n\n## 首先我们需要到Hexo为本地搭建博客框架。\n在安装Hexo之前，我们需要在本地安装Node.js和Git,以MAC为例，在终端输入\n\n``` bash\nbrew install git\n```\n\n### 安装Git。\n安装Node.js需要三步:\n\n``` bash\n1.curl https://raw.github.com/creationix/nvm/master/install.sh | sh\n2.wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh\n3.nvm install stable\n```\n\n在安装这两个没问题后，再在终端输入\n\n``` bash\nnpm install -g hexo-cli\n```\n\n就可以成功安装Hexo了。\n\n接下来，我们要搭建Hexo，这个也需要三步：\n\n### 搭建Hexo\n``` bash\n1.hexo init <指定的文件夹>\n2. cd <指定的文件夹>\n3. npm install\n```\n\n到这里，我们的Hexo就搭建完成了，搭建完成后本地的具体的配置信息在这这里。\n\n## 将下一步将我们的Hexo与GitHub关联起来\n\n我们需要将我们本地的Hexo代码提交到GitHub,此处省略怎么注册GitHub的账号，以及怎么建立一个Git的仓库。\n在我们在Git创建好后，我们现在将下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：\n\n``` bash\ndeploy:\ntype: git\nrepo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git\nbranch: master\n```\n\n参考如下：\n\n![配置文件](/images/个人博客搭建/1.png)\n\n这时，我们在终端进入Hexo的文件夹后再输入下面四条命令：\n\n``` bash \n1.npm install hexo-deployer-git --save\n2.hexo clean\n3.hexo g\n4.hexo d\n```\n\n至此，我们完成了一半了，已经你的博客已经可以上线，可以访问了，但是，我们现在来点不一样的，已定义域名，以及添加Https。\n\n## 申请域名\n\n接下来，我们去这里Freenom，这个网站是支持中文的，可以调整为中文显示，一样，我们需要申请个账号，注意，这个网站需要翻墙才能进去。在我们注册完账号之后，我们可以在这里申请一个顶级的域名，是免费的，但是期限最长只有一年，后面需要自己再续期。在“Services“里面点击“Register a New Domain”跳转到域名申请页面，填写自己喜欢的域名，然后搜索出来的绿色的都是可以用的，跟购物一样，选择好域名后，在结算页面，期限选择一年，然后点击确定，在我们的邮箱里面确认后，我们就可以拥有这个域名了。在申请完域名后，可以在“My Domains”中找到我们刚刚申请的域名。\n\n\n## 把github上面的代码我们利用Netlify生成属于Netlify的页面\n首先，一样注册账号，可以选择用GitHub的账号注册，按照提示一步一步的走，注册成功后，在主界面点击“New site from Git”生成新的Git页面,\n\n![第一步](/images/个人博客搭建/2.png)\n\n根据提示一步一的来，我们选择下面的“GitHub”,点击后需要获取我们GitHub的权限，点击确定。\n\n![第二步](/images/个人博客搭建/3.png)\n\n这一步我们选择需要生成的分支，这里我们会看到我们托管到GitHub的Hexo的项目，选择这个，进入下一步。\n\n![第三步](/images/个人博客搭建/4.png)\n\n这一步直接点确定进入下一步，等待系统生成页面就好了。\n当生成页面后，我们基于Netlify的的博客页面就搭建好了，这个时候是可以直接访问的，但是并不是我们的自定义域名，接下来我们换成自定义的域名。\n\n## 修改服务器\n\n我们先在本地的Hexo项目里面添加一个文件，在blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。\n然后在Netlify里面找到“Settings”,在里面点击左侧栏目的“Domain management”，在“Custom domains”中填写自己在Freenom中申请的域名。\n去到Freenom在自己的域名设置里面，找到“Nameservers”，将服务器的名称修改为如下：\n\n![服务器名称](/images/个人博客搭建/5.png)\n\n然后等待一个小时左右服务器生效。\n生效后，再在“Domain management”下面的“HTTPS”点击检测按钮，检测服务器是否配置成功，然后后面就很简单了，系统会自动生成DNS的域名解析，然后生成Https的证书。\n\n到此，大功告成，我们的博客页面就搭建完成了。\n\nPS：还有个小东西，在GitHub里面，我们托管的Hexo项目里面，找到设置页，GitHub也提供了自定义域名的功能，将我们刚刚申请的域名填入，这样，在访问你GitHub为域名的页面的时候，会自动跳转到你自定义域名的页面。\n","slug":"2017/个人博客搭建","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglq000kg0vgev9z3fvb","content":"<p>这个博客从开始到搭建完成，大概历时一个月左右，综合使用了：<a href=\"https://hexo.io/zh-cn/\">Hexo</a>、<a href=\"https://github.com/\">GitHub</a>、<a href=\"https://www.netlify.com/\">Netlify</a>、<a href=\"https://www.freenom.com/zh/index.html?lang=zh\">Freenom</a>这四个平台。<br>这四个平台，Hexo是一款容易上手，并且高效的博客框架。GitHub是一款主流的代码托管平台。Freenom是国外的一个提供免费的域名申请的平台。Netlify提供了自动生成静态的Https网站，提供自带的DNS域名解析。所以，我们的搭建流程是，先用Hexo在本地搭建起来博客的框架，然后将本地的代码托管至GitHub，然后将GitHub的代码提交到Netlify生成静态的Https网站，然后在Freenom申请自己喜欢的自定义域名，将Netlify生成的域名替换为我们申请的域名，然后用Nettify自带的DNS解析为自定义的域名加上Https。</p>\n<p>接下来我会慢慢一步一步重现我搭建的过程。</p>\n<h2 id=\"首先我们需要到Hexo为本地搭建博客框架。\"><a href=\"#首先我们需要到Hexo为本地搭建博客框架。\" class=\"headerlink\" title=\"首先我们需要到Hexo为本地搭建博客框架。\"></a>首先我们需要到Hexo为本地搭建博客框架。</h2><p>在安装Hexo之前，我们需要在本地安装Node.js和Git,以MAC为例，在终端输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装Git。\"><a href=\"#安装Git。\" class=\"headerlink\" title=\"安装Git。\"></a>安装Git。</h3><p>安装Node.js需要三步:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br><span class=\"line\">2.wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br><span class=\"line\">3.nvm install stable</span><br></pre></td></tr></table></figure>\n\n<p>在安装这两个没问题后，再在终端输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>就可以成功安装Hexo了。</p>\n<p>接下来，我们要搭建Hexo，这个也需要三步：</p>\n<h3 id=\"搭建Hexo\"><a href=\"#搭建Hexo\" class=\"headerlink\" title=\"搭建Hexo\"></a>搭建Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.hexo init &lt;指定的文件夹&gt;</span><br><span class=\"line\">2. <span class=\"built_in\">cd</span> &lt;指定的文件夹&gt;</span><br><span class=\"line\">3. npm install</span><br></pre></td></tr></table></figure>\n\n<p>到这里，我们的Hexo就搭建完成了，搭建完成后本地的具体的配置信息在这这里。</p>\n<h2 id=\"将下一步将我们的Hexo与GitHub关联起来\"><a href=\"#将下一步将我们的Hexo与GitHub关联起来\" class=\"headerlink\" title=\"将下一步将我们的Hexo与GitHub关联起来\"></a>将下一步将我们的Hexo与GitHub关联起来</h2><p>我们需要将我们本地的Hexo代码提交到GitHub,此处省略怎么注册GitHub的账号，以及怎么建立一个Git的仓库。<br>在我们在Git创建好后，我们现在将下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\"><span class=\"built_in\">type</span>: git</span><br><span class=\"line\">repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n\n<p>参考如下：</p>\n<p><img src=\"/images/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.png\" alt=\"配置文件\"></p>\n<p>这时，我们在终端进入Hexo的文件夹后再输入下面四条命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.npm install hexo-deployer-git --save</span><br><span class=\"line\">2.hexo clean</span><br><span class=\"line\">3.hexo g</span><br><span class=\"line\">4.hexo d</span><br></pre></td></tr></table></figure>\n\n<p>至此，我们完成了一半了，已经你的博客已经可以上线，可以访问了，但是，我们现在来点不一样的，已定义域名，以及添加Https。</p>\n<h2 id=\"申请域名\"><a href=\"#申请域名\" class=\"headerlink\" title=\"申请域名\"></a>申请域名</h2><p>接下来，我们去这里Freenom，这个网站是支持中文的，可以调整为中文显示，一样，我们需要申请个账号，注意，这个网站需要翻墙才能进去。在我们注册完账号之后，我们可以在这里申请一个顶级的域名，是免费的，但是期限最长只有一年，后面需要自己再续期。在“Services“里面点击“Register a New Domain”跳转到域名申请页面，填写自己喜欢的域名，然后搜索出来的绿色的都是可以用的，跟购物一样，选择好域名后，在结算页面，期限选择一年，然后点击确定，在我们的邮箱里面确认后，我们就可以拥有这个域名了。在申请完域名后，可以在“My Domains”中找到我们刚刚申请的域名。</p>\n<h2 id=\"把github上面的代码我们利用Netlify生成属于Netlify的页面\"><a href=\"#把github上面的代码我们利用Netlify生成属于Netlify的页面\" class=\"headerlink\" title=\"把github上面的代码我们利用Netlify生成属于Netlify的页面\"></a>把github上面的代码我们利用Netlify生成属于Netlify的页面</h2><p>首先，一样注册账号，可以选择用GitHub的账号注册，按照提示一步一步的走，注册成功后，在主界面点击“New site from Git”生成新的Git页面,</p>\n<p><img src=\"/images/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2.png\" alt=\"第一步\"></p>\n<p>根据提示一步一的来，我们选择下面的“GitHub”,点击后需要获取我们GitHub的权限，点击确定。</p>\n<p><img src=\"/images/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/3.png\" alt=\"第二步\"></p>\n<p>这一步我们选择需要生成的分支，这里我们会看到我们托管到GitHub的Hexo的项目，选择这个，进入下一步。</p>\n<p><img src=\"/images/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4.png\" alt=\"第三步\"></p>\n<p>这一步直接点确定进入下一步，等待系统生成页面就好了。<br>当生成页面后，我们基于Netlify的的博客页面就搭建好了，这个时候是可以直接访问的，但是并不是我们的自定义域名，接下来我们换成自定义的域名。</p>\n<h2 id=\"修改服务器\"><a href=\"#修改服务器\" class=\"headerlink\" title=\"修改服务器\"></a>修改服务器</h2><p>我们先在本地的Hexo项目里面添加一个文件，在blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。<br>然后在Netlify里面找到“Settings”,在里面点击左侧栏目的“Domain management”，在“Custom domains”中填写自己在Freenom中申请的域名。<br>去到Freenom在自己的域名设置里面，找到“Nameservers”，将服务器的名称修改为如下：</p>\n<p><img src=\"/images/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/5.png\" alt=\"服务器名称\"></p>\n<p>然后等待一个小时左右服务器生效。<br>生效后，再在“Domain management”下面的“HTTPS”点击检测按钮，检测服务器是否配置成功，然后后面就很简单了，系统会自动生成DNS的域名解析，然后生成Https的证书。</p>\n<p>到此，大功告成，我们的博客页面就搭建完成了。</p>\n<p>PS：还有个小东西，在GitHub里面，我们托管的Hexo项目里面，找到设置页，GitHub也提供了自定义域名的功能，将我们刚刚申请的域名填入，这样，在访问你GitHub为域名的页面的时候，会自动跳转到你自定义域名的页面。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>这个博客从开始到搭建完成，大概历时一个月左右，综合使用了：<a href=\"https://hexo.io/zh-cn/\">Hexo</a>、<a href=\"https://github.com/\">GitHub</a>、<a href=\"https://www.netlify.com/\">Netlify</a>、<a href=\"https://www.freenom.com/zh/index.html?lang=zh\">Freenom</a>这四个平台。<br>这四个平台，Hexo是一款容易上手，并且高效的博客框架。GitHub是一款主流的代码托管平台。Freenom是国外的一个提供免费的域名申请的平台。Netlify提供了自动生成静态的Https网站，提供自带的DNS域名解析。所以，我们的搭建流程是，先用Hexo在本地搭建起来博客的框架，然后将本地的代码托管至GitHub，然后将GitHub的代码提交到Netlify生成静态的Https网站，然后在Freenom申请自己喜欢的自定义域名，将Netlify生成的域名替换为我们申请的域名，然后用Nettify自带的DNS解析为自定义的域名加上Https。</p>\n<p>接下来我会慢慢一步一步重现我搭建的过程。</p>\n<h2 id=\"首先我们需要到Hexo为本地搭建博客框架。\"><a href=\"#首先我们需要到Hexo为本地搭建博客框架。\" class=\"headerlink\" title=\"首先我们需要到Hexo为本地搭建博客框架。\"></a>首先我们需要到Hexo为本地搭建博客框架。</h2><p>在安装Hexo之前，我们需要在本地安装Node.js和Git,以MAC为例，在终端输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装Git。\"><a href=\"#安装Git。\" class=\"headerlink\" title=\"安装Git。\"></a>安装Git。</h3><p>安装Node.js需要三步:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.curl https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br><span class=\"line\">2.wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br><span class=\"line\">3.nvm install stable</span><br></pre></td></tr></table></figure>\n\n<p>在安装这两个没问题后，再在终端输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>就可以成功安装Hexo了。</p>\n<p>接下来，我们要搭建Hexo，这个也需要三步：</p>\n<h3 id=\"搭建Hexo\"><a href=\"#搭建Hexo\" class=\"headerlink\" title=\"搭建Hexo\"></a>搭建Hexo</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.hexo init &lt;指定的文件夹&gt;</span><br><span class=\"line\">2. <span class=\"built_in\">cd</span> &lt;指定的文件夹&gt;</span><br><span class=\"line\">3. npm install</span><br></pre></td></tr></table></figure>\n\n<p>到这里，我们的Hexo就搭建完成了，搭建完成后本地的具体的配置信息在这这里。</p>\n<h2 id=\"将下一步将我们的Hexo与GitHub关联起来\"><a href=\"#将下一步将我们的Hexo与GitHub关联起来\" class=\"headerlink\" title=\"将下一步将我们的Hexo与GitHub关联起来\"></a>将下一步将我们的Hexo与GitHub关联起来</h2><p>我们需要将我们本地的Hexo代码提交到GitHub,此处省略怎么注册GitHub的账号，以及怎么建立一个Git的仓库。<br>在我们在Git创建好后，我们现在将下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\"><span class=\"built_in\">type</span>: git</span><br><span class=\"line\">repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git</span><br><span class=\"line\">branch: master</span><br></pre></td></tr></table></figure>\n\n<p>参考如下：</p>\n<p><img src=\"/images/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/1.png\" alt=\"配置文件\"></p>\n<p>这时，我们在终端进入Hexo的文件夹后再输入下面四条命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.npm install hexo-deployer-git --save</span><br><span class=\"line\">2.hexo clean</span><br><span class=\"line\">3.hexo g</span><br><span class=\"line\">4.hexo d</span><br></pre></td></tr></table></figure>\n\n<p>至此，我们完成了一半了，已经你的博客已经可以上线，可以访问了，但是，我们现在来点不一样的，已定义域名，以及添加Https。</p>\n<h2 id=\"申请域名\"><a href=\"#申请域名\" class=\"headerlink\" title=\"申请域名\"></a>申请域名</h2><p>接下来，我们去这里Freenom，这个网站是支持中文的，可以调整为中文显示，一样，我们需要申请个账号，注意，这个网站需要翻墙才能进去。在我们注册完账号之后，我们可以在这里申请一个顶级的域名，是免费的，但是期限最长只有一年，后面需要自己再续期。在“Services“里面点击“Register a New Domain”跳转到域名申请页面，填写自己喜欢的域名，然后搜索出来的绿色的都是可以用的，跟购物一样，选择好域名后，在结算页面，期限选择一年，然后点击确定，在我们的邮箱里面确认后，我们就可以拥有这个域名了。在申请完域名后，可以在“My Domains”中找到我们刚刚申请的域名。</p>\n<h2 id=\"把github上面的代码我们利用Netlify生成属于Netlify的页面\"><a href=\"#把github上面的代码我们利用Netlify生成属于Netlify的页面\" class=\"headerlink\" title=\"把github上面的代码我们利用Netlify生成属于Netlify的页面\"></a>把github上面的代码我们利用Netlify生成属于Netlify的页面</h2><p>首先，一样注册账号，可以选择用GitHub的账号注册，按照提示一步一步的走，注册成功后，在主界面点击“New site from Git”生成新的Git页面,</p>\n<p><img src=\"/images/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/2.png\" alt=\"第一步\"></p>\n<p>根据提示一步一的来，我们选择下面的“GitHub”,点击后需要获取我们GitHub的权限，点击确定。</p>\n<p><img src=\"/images/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/3.png\" alt=\"第二步\"></p>\n<p>这一步我们选择需要生成的分支，这里我们会看到我们托管到GitHub的Hexo的项目，选择这个，进入下一步。</p>\n<p><img src=\"/images/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/4.png\" alt=\"第三步\"></p>\n<p>这一步直接点确定进入下一步，等待系统生成页面就好了。<br>当生成页面后，我们基于Netlify的的博客页面就搭建好了，这个时候是可以直接访问的，但是并不是我们的自定义域名，接下来我们换成自定义的域名。</p>\n<h2 id=\"修改服务器\"><a href=\"#修改服务器\" class=\"headerlink\" title=\"修改服务器\"></a>修改服务器</h2><p>我们先在本地的Hexo项目里面添加一个文件，在blog/source目录下，创建一个记事本文件，输入你的域名，对，只要写进你自己的域名即可。如果带有www，那么以后访问的时候必须带有www完整的域名才可以访问，但如果不带有www，以后访问的时候带不带www都可以访问。<br>然后在Netlify里面找到“Settings”,在里面点击左侧栏目的“Domain management”，在“Custom domains”中填写自己在Freenom中申请的域名。<br>去到Freenom在自己的域名设置里面，找到“Nameservers”，将服务器的名称修改为如下：</p>\n<p><img src=\"/images/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/5.png\" alt=\"服务器名称\"></p>\n<p>然后等待一个小时左右服务器生效。<br>生效后，再在“Domain management”下面的“HTTPS”点击检测按钮，检测服务器是否配置成功，然后后面就很简单了，系统会自动生成DNS的域名解析，然后生成Https的证书。</p>\n<p>到此，大功告成，我们的博客页面就搭建完成了。</p>\n<p>PS：还有个小东西，在GitHub里面，我们托管的Hexo项目里面，找到设置页，GitHub也提供了自定义域名的功能，将我们刚刚申请的域名填入，这样，在访问你GitHub为域名的页面的时候，会自动跳转到你自定义域名的页面。</p>\n"},{"title":"阶段小结（一）","date":"2017-08-16T09:15:57.000Z","_content":"做的第一个APP叫《测量工具箱》，这个APP是我在快一个月的时候昨晚上架，一款工具类的APP，也是和别人合作做的，我负责一半功能的实现以及\n最后的整合。\n\n首先从功能上来说这个是整合的几个功能的APP，所以在整合别人功能的时候发现，在用storyboard的时候，将UI和功能代码分开写，再整合的时候，很简便，只需要根据情况适当的修改一点代码，就可以完成基本的整合，所以，我觉得这样写很好用。另外，在整合代码的时候，每个人的代码风格不一样，所以在看别人代码的时候，习惯别人的代码风格其实也不错，同时还可以收获很多东西，对自己的帮助还是挺大的。\n\n仔细回想起来，自己做完这个APP，非常难的点其实没有，就有一些转不过弯的一些东西需要记住。\n\n``` bash\n1、在做横屏功能的时候，如果没有特别的情况，做的时候就按横屏的做，很方便。\n2、开发中和给用户看到的效果，不一定是同一个，根据情况，偷偷做做弊，其实\n可以让效果更简单。\n3、代码要在不出错的基础上，要写的安全，优化、简洁（代码是给别人看的！）。\n4、虽然现在大多都是用的ARC，但是，并不能完全保证内存不出问题。\n5、要替用户想，尽量适合并提高用户体验。\n6、找错的时候从出问题的地方打断点一级一级的向里面找，要相信自己。\n7、项目的需求要跟产品事先沟通清楚，特别是细节，一定要搞清楚细节之后在做。\n8、国际化语言的时候注意UI的适配。\n9、系统提供的好评接口适用于10.3以上。\n10、封装通用代码，注意安全。\n```\n\n项目中第一次接触相机权限，写下来，希望别人少踩点坑。\n\n首先，iOS相机功能分两种实现方式，一种是系统的UIImagePickerController，一种是自定义的AVCaptureSession，我自己刚开始的时候一直以为UIImagePickerController是自己写的类。。。\n\n另外，使用相机前，要获取相机的使用权限，在iOS10以后还需要在list文件中添加权限配置，不然程序会崩溃报错。\n\n\n## 一、UIImagePickerController\n\n### 1.跳转Controller实现两个协议UIImagePickerControllerDelegate和UINavigationControllerDelegate\n\n### 2.实例化，实现协议跳转\n\n``` bash\nUIImagePickerController*pick = [[UIImagePickerControlleralloc]in\nit];\npick.delegate=self;\npick.sourceType=UIImagePickerControllerSourceTypeCamera;\n想要相机全屏，用这个showsCameraControls设置成NO后相机的UI会被隐藏了，但是底部的工具栏会留下一个个黑块，解决办法是一个取巧的办法，CGAffineTransformMakeScale\n\npick.showsCameraControls=NO;\n\n```\n\n但是这样就是放大的效果，有好有坏吧，不行就只能用自定义的了\n\n``` bash\npick.cameraViewTransform=CGAffineTransformMakeScale(2,2);\n[selfpresentViewController:pickanimated:YEScompletion:^{\n}];\n```\n还有一种相机的实现方式\n\n## 二、AVCaptureSession\n\n### 1，导入AVfounation包\n\n### 2.实例化\n``` bash\n//1.创建媒体管理会话\nAVCaptureSession*session = [[AVCaptureSessionalloc]init];\n//判断分辨率是否支持1280*720，支持就设置为1280*720\nif( [sessioncanSetSessionPreset:AVCaptureSessionPreset1280x720] )\n{\nsession.sessionPreset=AVCaptureSessionPreset1280x720;\n}\n//2.获取后置摄像头设备对象\nAVCaptureDevice*device =nil;\nNSArray*cameras = [AVCaptureDevicedevicesWithMediaType:AVMediaTyp\neVideo];\nfor(AVCaptureDevice*cameraincameras) {\nif(camera.position==AVCaptureDevicePositionBack) {//取得后置摄像头\ndevice = camera;\n}\n}\nif(!device) {\nNSLog(@\"取得后置摄像头错误\");\nreturn;\n}\n//3.创建输入数据对象\nNSError*error =nil;\nAVCaptureDeviceInput*captureInput = [[AVCaptureDeviceInputalloc]\ninitWithDevice:device\nerror:&error];\nif(error) {\nNSLog(@\"创建输入数据对象错误\");\nreturn;\n}\n//4.创建输出数据对象\nAVCaptureStillImageOutput*imageOutput = [[AVCaptureStillImageOutp\nutalloc]init];\nNSDictionary*setting =@{AVVideoCodecKey:AVVideoCodecJPEG};\n[imageOutputsetOutputSettings:setting];\n//5.添加输入数据对象和输出对象到会话中\nif([sessioncanAddInput:captureInput]) {\n[sessionaddInput:captureInput];\n}\nif([sessioncanAddOutput:imageOutput]) {\n[sessionaddOutput:imageOutput];\n}\n//6.创建视频预览图层\nAVCaptureVideoPreviewLayer*videoLayer =\n[[AVCaptureVideoPreviewLayeralloc]initWithSession:session];\nself.view.layer.masksToBounds=YES;\nvideoLayer.frame=self.view.bounds;\nvideoLayer.videoGravity=AVLayerVideoGravityResizeAspectFill;\n[self.view.layeraddSublayer:videoLayer];\n//这里需要设置相机开始捕捉画面\n[sessionstartRunning];//开始捕捉\n```\n","source":"_posts/2017/阶段小结（一）.md","raw":"---\ntitle: 阶段小结（一）\ndate: 2017-08-016 17:15:57\ntags: [技术,总结,iOS]\ncategory: [小结]\n---\n做的第一个APP叫《测量工具箱》，这个APP是我在快一个月的时候昨晚上架，一款工具类的APP，也是和别人合作做的，我负责一半功能的实现以及\n最后的整合。\n\n首先从功能上来说这个是整合的几个功能的APP，所以在整合别人功能的时候发现，在用storyboard的时候，将UI和功能代码分开写，再整合的时候，很简便，只需要根据情况适当的修改一点代码，就可以完成基本的整合，所以，我觉得这样写很好用。另外，在整合代码的时候，每个人的代码风格不一样，所以在看别人代码的时候，习惯别人的代码风格其实也不错，同时还可以收获很多东西，对自己的帮助还是挺大的。\n\n仔细回想起来，自己做完这个APP，非常难的点其实没有，就有一些转不过弯的一些东西需要记住。\n\n``` bash\n1、在做横屏功能的时候，如果没有特别的情况，做的时候就按横屏的做，很方便。\n2、开发中和给用户看到的效果，不一定是同一个，根据情况，偷偷做做弊，其实\n可以让效果更简单。\n3、代码要在不出错的基础上，要写的安全，优化、简洁（代码是给别人看的！）。\n4、虽然现在大多都是用的ARC，但是，并不能完全保证内存不出问题。\n5、要替用户想，尽量适合并提高用户体验。\n6、找错的时候从出问题的地方打断点一级一级的向里面找，要相信自己。\n7、项目的需求要跟产品事先沟通清楚，特别是细节，一定要搞清楚细节之后在做。\n8、国际化语言的时候注意UI的适配。\n9、系统提供的好评接口适用于10.3以上。\n10、封装通用代码，注意安全。\n```\n\n项目中第一次接触相机权限，写下来，希望别人少踩点坑。\n\n首先，iOS相机功能分两种实现方式，一种是系统的UIImagePickerController，一种是自定义的AVCaptureSession，我自己刚开始的时候一直以为UIImagePickerController是自己写的类。。。\n\n另外，使用相机前，要获取相机的使用权限，在iOS10以后还需要在list文件中添加权限配置，不然程序会崩溃报错。\n\n\n## 一、UIImagePickerController\n\n### 1.跳转Controller实现两个协议UIImagePickerControllerDelegate和UINavigationControllerDelegate\n\n### 2.实例化，实现协议跳转\n\n``` bash\nUIImagePickerController*pick = [[UIImagePickerControlleralloc]in\nit];\npick.delegate=self;\npick.sourceType=UIImagePickerControllerSourceTypeCamera;\n想要相机全屏，用这个showsCameraControls设置成NO后相机的UI会被隐藏了，但是底部的工具栏会留下一个个黑块，解决办法是一个取巧的办法，CGAffineTransformMakeScale\n\npick.showsCameraControls=NO;\n\n```\n\n但是这样就是放大的效果，有好有坏吧，不行就只能用自定义的了\n\n``` bash\npick.cameraViewTransform=CGAffineTransformMakeScale(2,2);\n[selfpresentViewController:pickanimated:YEScompletion:^{\n}];\n```\n还有一种相机的实现方式\n\n## 二、AVCaptureSession\n\n### 1，导入AVfounation包\n\n### 2.实例化\n``` bash\n//1.创建媒体管理会话\nAVCaptureSession*session = [[AVCaptureSessionalloc]init];\n//判断分辨率是否支持1280*720，支持就设置为1280*720\nif( [sessioncanSetSessionPreset:AVCaptureSessionPreset1280x720] )\n{\nsession.sessionPreset=AVCaptureSessionPreset1280x720;\n}\n//2.获取后置摄像头设备对象\nAVCaptureDevice*device =nil;\nNSArray*cameras = [AVCaptureDevicedevicesWithMediaType:AVMediaTyp\neVideo];\nfor(AVCaptureDevice*cameraincameras) {\nif(camera.position==AVCaptureDevicePositionBack) {//取得后置摄像头\ndevice = camera;\n}\n}\nif(!device) {\nNSLog(@\"取得后置摄像头错误\");\nreturn;\n}\n//3.创建输入数据对象\nNSError*error =nil;\nAVCaptureDeviceInput*captureInput = [[AVCaptureDeviceInputalloc]\ninitWithDevice:device\nerror:&error];\nif(error) {\nNSLog(@\"创建输入数据对象错误\");\nreturn;\n}\n//4.创建输出数据对象\nAVCaptureStillImageOutput*imageOutput = [[AVCaptureStillImageOutp\nutalloc]init];\nNSDictionary*setting =@{AVVideoCodecKey:AVVideoCodecJPEG};\n[imageOutputsetOutputSettings:setting];\n//5.添加输入数据对象和输出对象到会话中\nif([sessioncanAddInput:captureInput]) {\n[sessionaddInput:captureInput];\n}\nif([sessioncanAddOutput:imageOutput]) {\n[sessionaddOutput:imageOutput];\n}\n//6.创建视频预览图层\nAVCaptureVideoPreviewLayer*videoLayer =\n[[AVCaptureVideoPreviewLayeralloc]initWithSession:session];\nself.view.layer.masksToBounds=YES;\nvideoLayer.frame=self.view.bounds;\nvideoLayer.videoGravity=AVLayerVideoGravityResizeAspectFill;\n[self.view.layeraddSublayer:videoLayer];\n//这里需要设置相机开始捕捉画面\n[sessionstartRunning];//开始捕捉\n```\n","slug":"2017/阶段小结（一）","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglr000pg0vgb13ofwxr","content":"<p>做的第一个APP叫《测量工具箱》，这个APP是我在快一个月的时候昨晚上架，一款工具类的APP，也是和别人合作做的，我负责一半功能的实现以及<br>最后的整合。</p>\n<p>首先从功能上来说这个是整合的几个功能的APP，所以在整合别人功能的时候发现，在用storyboard的时候，将UI和功能代码分开写，再整合的时候，很简便，只需要根据情况适当的修改一点代码，就可以完成基本的整合，所以，我觉得这样写很好用。另外，在整合代码的时候，每个人的代码风格不一样，所以在看别人代码的时候，习惯别人的代码风格其实也不错，同时还可以收获很多东西，对自己的帮助还是挺大的。</p>\n<p>仔细回想起来，自己做完这个APP，非常难的点其实没有，就有一些转不过弯的一些东西需要记住。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、在做横屏功能的时候，如果没有特别的情况，做的时候就按横屏的做，很方便。</span><br><span class=\"line\">2、开发中和给用户看到的效果，不一定是同一个，根据情况，偷偷做做弊，其实</span><br><span class=\"line\">可以让效果更简单。</span><br><span class=\"line\">3、代码要在不出错的基础上，要写的安全，优化、简洁（代码是给别人看的！）。</span><br><span class=\"line\">4、虽然现在大多都是用的ARC，但是，并不能完全保证内存不出问题。</span><br><span class=\"line\">5、要替用户想，尽量适合并提高用户体验。</span><br><span class=\"line\">6、找错的时候从出问题的地方打断点一级一级的向里面找，要相信自己。</span><br><span class=\"line\">7、项目的需求要跟产品事先沟通清楚，特别是细节，一定要搞清楚细节之后在做。</span><br><span class=\"line\">8、国际化语言的时候注意UI的适配。</span><br><span class=\"line\">9、系统提供的好评接口适用于10.3以上。</span><br><span class=\"line\">10、封装通用代码，注意安全。</span><br></pre></td></tr></table></figure>\n\n<p>项目中第一次接触相机权限，写下来，希望别人少踩点坑。</p>\n<p>首先，iOS相机功能分两种实现方式，一种是系统的UIImagePickerController，一种是自定义的AVCaptureSession，我自己刚开始的时候一直以为UIImagePickerController是自己写的类。。。</p>\n<p>另外，使用相机前，要获取相机的使用权限，在iOS10以后还需要在list文件中添加权限配置，不然程序会崩溃报错。</p>\n<h2 id=\"一、UIImagePickerController\"><a href=\"#一、UIImagePickerController\" class=\"headerlink\" title=\"一、UIImagePickerController\"></a>一、UIImagePickerController</h2><h3 id=\"1-跳转Controller实现两个协议UIImagePickerControllerDelegate和UINavigationControllerDelegate\"><a href=\"#1-跳转Controller实现两个协议UIImagePickerControllerDelegate和UINavigationControllerDelegate\" class=\"headerlink\" title=\"1.跳转Controller实现两个协议UIImagePickerControllerDelegate和UINavigationControllerDelegate\"></a>1.跳转Controller实现两个协议UIImagePickerControllerDelegate和UINavigationControllerDelegate</h3><h3 id=\"2-实例化，实现协议跳转\"><a href=\"#2-实例化，实现协议跳转\" class=\"headerlink\" title=\"2.实例化，实现协议跳转\"></a>2.实例化，实现协议跳转</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIImagePickerController*pick = [[UIImagePickerControlleralloc]<span class=\"keyword\">in</span></span><br><span class=\"line\">it];</span><br><span class=\"line\">pick.delegate=self;</span><br><span class=\"line\">pick.sourceType=UIImagePickerControllerSourceTypeCamera;</span><br><span class=\"line\">想要相机全屏，用这个showsCameraControls设置成NO后相机的UI会被隐藏了，但是底部的工具栏会留下一个个黑块，解决办法是一个取巧的办法，CGAffineTransformMakeScale</span><br><span class=\"line\"></span><br><span class=\"line\">pick.showsCameraControls=NO;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>但是这样就是放大的效果，有好有坏吧，不行就只能用自定义的了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick.cameraViewTransform=CGAffineTransformMakeScale(2,2);</span><br><span class=\"line\">[selfpresentViewController:pickanimated:YEScompletion:^&#123;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>还有一种相机的实现方式</p>\n<h2 id=\"二、AVCaptureSession\"><a href=\"#二、AVCaptureSession\" class=\"headerlink\" title=\"二、AVCaptureSession\"></a>二、AVCaptureSession</h2><h3 id=\"1，导入AVfounation包\"><a href=\"#1，导入AVfounation包\" class=\"headerlink\" title=\"1，导入AVfounation包\"></a>1，导入AVfounation包</h3><h3 id=\"2-实例化\"><a href=\"#2-实例化\" class=\"headerlink\" title=\"2.实例化\"></a>2.实例化</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.创建媒体管理会话</span><br><span class=\"line\">AVCaptureSession*session = [[AVCaptureSessionalloc]init];</span><br><span class=\"line\">//判断分辨率是否支持1280*720，支持就设置为1280*720</span><br><span class=\"line\"><span class=\"keyword\">if</span>( [sessioncanSetSessionPreset:AVCaptureSessionPreset1280x720] )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">session.sessionPreset=AVCaptureSessionPreset1280x720;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//2.获取后置摄像头设备对象</span><br><span class=\"line\">AVCaptureDevice*device =nil;</span><br><span class=\"line\">NSArray*cameras = [AVCaptureDevicedevicesWithMediaType:AVMediaTyp</span><br><span class=\"line\">eVideo];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(AVCaptureDevice*cameraincameras) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(camera.position==AVCaptureDevicePositionBack) &#123;//取得后置摄像头</span><br><span class=\"line\">device = camera;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!device) &#123;</span><br><span class=\"line\">NSLog(@<span class=\"string\">&quot;取得后置摄像头错误&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//3.创建输入数据对象</span><br><span class=\"line\">NSError*error =nil;</span><br><span class=\"line\">AVCaptureDeviceInput*captureInput = [[AVCaptureDeviceInputalloc]</span><br><span class=\"line\">initWithDevice:device</span><br><span class=\"line\">error:&amp;error];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">NSLog(@<span class=\"string\">&quot;创建输入数据对象错误&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//4.创建输出数据对象</span><br><span class=\"line\">AVCaptureStillImageOutput*imageOutput = [[AVCaptureStillImageOutp</span><br><span class=\"line\">utalloc]init];</span><br><span class=\"line\">NSDictionary*setting =@&#123;AVVideoCodecKey:AVVideoCodecJPEG&#125;;</span><br><span class=\"line\">[imageOutputsetOutputSettings:setting];</span><br><span class=\"line\">//5.添加输入数据对象和输出对象到会话中</span><br><span class=\"line\"><span class=\"keyword\">if</span>([sessioncanAddInput:captureInput]) &#123;</span><br><span class=\"line\">[sessionaddInput:captureInput];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>([sessioncanAddOutput:imageOutput]) &#123;</span><br><span class=\"line\">[sessionaddOutput:imageOutput];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//6.创建视频预览图层</span><br><span class=\"line\">AVCaptureVideoPreviewLayer*videoLayer =</span><br><span class=\"line\">[[AVCaptureVideoPreviewLayeralloc]initWithSession:session];</span><br><span class=\"line\">self.view.layer.masksToBounds=YES;</span><br><span class=\"line\">videoLayer.frame=self.view.bounds;</span><br><span class=\"line\">videoLayer.videoGravity=AVLayerVideoGravityResizeAspectFill;</span><br><span class=\"line\">[self.view.layeraddSublayer:videoLayer];</span><br><span class=\"line\">//这里需要设置相机开始捕捉画面</span><br><span class=\"line\">[sessionstartRunning];//开始捕捉</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>做的第一个APP叫《测量工具箱》，这个APP是我在快一个月的时候昨晚上架，一款工具类的APP，也是和别人合作做的，我负责一半功能的实现以及<br>最后的整合。</p>\n<p>首先从功能上来说这个是整合的几个功能的APP，所以在整合别人功能的时候发现，在用storyboard的时候，将UI和功能代码分开写，再整合的时候，很简便，只需要根据情况适当的修改一点代码，就可以完成基本的整合，所以，我觉得这样写很好用。另外，在整合代码的时候，每个人的代码风格不一样，所以在看别人代码的时候，习惯别人的代码风格其实也不错，同时还可以收获很多东西，对自己的帮助还是挺大的。</p>\n<p>仔细回想起来，自己做完这个APP，非常难的点其实没有，就有一些转不过弯的一些东西需要记住。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、在做横屏功能的时候，如果没有特别的情况，做的时候就按横屏的做，很方便。</span><br><span class=\"line\">2、开发中和给用户看到的效果，不一定是同一个，根据情况，偷偷做做弊，其实</span><br><span class=\"line\">可以让效果更简单。</span><br><span class=\"line\">3、代码要在不出错的基础上，要写的安全，优化、简洁（代码是给别人看的！）。</span><br><span class=\"line\">4、虽然现在大多都是用的ARC，但是，并不能完全保证内存不出问题。</span><br><span class=\"line\">5、要替用户想，尽量适合并提高用户体验。</span><br><span class=\"line\">6、找错的时候从出问题的地方打断点一级一级的向里面找，要相信自己。</span><br><span class=\"line\">7、项目的需求要跟产品事先沟通清楚，特别是细节，一定要搞清楚细节之后在做。</span><br><span class=\"line\">8、国际化语言的时候注意UI的适配。</span><br><span class=\"line\">9、系统提供的好评接口适用于10.3以上。</span><br><span class=\"line\">10、封装通用代码，注意安全。</span><br></pre></td></tr></table></figure>\n\n<p>项目中第一次接触相机权限，写下来，希望别人少踩点坑。</p>\n<p>首先，iOS相机功能分两种实现方式，一种是系统的UIImagePickerController，一种是自定义的AVCaptureSession，我自己刚开始的时候一直以为UIImagePickerController是自己写的类。。。</p>\n<p>另外，使用相机前，要获取相机的使用权限，在iOS10以后还需要在list文件中添加权限配置，不然程序会崩溃报错。</p>\n<h2 id=\"一、UIImagePickerController\"><a href=\"#一、UIImagePickerController\" class=\"headerlink\" title=\"一、UIImagePickerController\"></a>一、UIImagePickerController</h2><h3 id=\"1-跳转Controller实现两个协议UIImagePickerControllerDelegate和UINavigationControllerDelegate\"><a href=\"#1-跳转Controller实现两个协议UIImagePickerControllerDelegate和UINavigationControllerDelegate\" class=\"headerlink\" title=\"1.跳转Controller实现两个协议UIImagePickerControllerDelegate和UINavigationControllerDelegate\"></a>1.跳转Controller实现两个协议UIImagePickerControllerDelegate和UINavigationControllerDelegate</h3><h3 id=\"2-实例化，实现协议跳转\"><a href=\"#2-实例化，实现协议跳转\" class=\"headerlink\" title=\"2.实例化，实现协议跳转\"></a>2.实例化，实现协议跳转</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UIImagePickerController*pick = [[UIImagePickerControlleralloc]<span class=\"keyword\">in</span></span><br><span class=\"line\">it];</span><br><span class=\"line\">pick.delegate=self;</span><br><span class=\"line\">pick.sourceType=UIImagePickerControllerSourceTypeCamera;</span><br><span class=\"line\">想要相机全屏，用这个showsCameraControls设置成NO后相机的UI会被隐藏了，但是底部的工具栏会留下一个个黑块，解决办法是一个取巧的办法，CGAffineTransformMakeScale</span><br><span class=\"line\"></span><br><span class=\"line\">pick.showsCameraControls=NO;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>但是这样就是放大的效果，有好有坏吧，不行就只能用自定义的了</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pick.cameraViewTransform=CGAffineTransformMakeScale(2,2);</span><br><span class=\"line\">[selfpresentViewController:pickanimated:YEScompletion:^&#123;</span><br><span class=\"line\">&#125;];</span><br></pre></td></tr></table></figure>\n<p>还有一种相机的实现方式</p>\n<h2 id=\"二、AVCaptureSession\"><a href=\"#二、AVCaptureSession\" class=\"headerlink\" title=\"二、AVCaptureSession\"></a>二、AVCaptureSession</h2><h3 id=\"1，导入AVfounation包\"><a href=\"#1，导入AVfounation包\" class=\"headerlink\" title=\"1，导入AVfounation包\"></a>1，导入AVfounation包</h3><h3 id=\"2-实例化\"><a href=\"#2-实例化\" class=\"headerlink\" title=\"2.实例化\"></a>2.实例化</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//1.创建媒体管理会话</span><br><span class=\"line\">AVCaptureSession*session = [[AVCaptureSessionalloc]init];</span><br><span class=\"line\">//判断分辨率是否支持1280*720，支持就设置为1280*720</span><br><span class=\"line\"><span class=\"keyword\">if</span>( [sessioncanSetSessionPreset:AVCaptureSessionPreset1280x720] )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">session.sessionPreset=AVCaptureSessionPreset1280x720;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//2.获取后置摄像头设备对象</span><br><span class=\"line\">AVCaptureDevice*device =nil;</span><br><span class=\"line\">NSArray*cameras = [AVCaptureDevicedevicesWithMediaType:AVMediaTyp</span><br><span class=\"line\">eVideo];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(AVCaptureDevice*cameraincameras) &#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(camera.position==AVCaptureDevicePositionBack) &#123;//取得后置摄像头</span><br><span class=\"line\">device = camera;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!device) &#123;</span><br><span class=\"line\">NSLog(@<span class=\"string\">&quot;取得后置摄像头错误&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//3.创建输入数据对象</span><br><span class=\"line\">NSError*error =nil;</span><br><span class=\"line\">AVCaptureDeviceInput*captureInput = [[AVCaptureDeviceInputalloc]</span><br><span class=\"line\">initWithDevice:device</span><br><span class=\"line\">error:&amp;error];</span><br><span class=\"line\"><span class=\"keyword\">if</span>(error) &#123;</span><br><span class=\"line\">NSLog(@<span class=\"string\">&quot;创建输入数据对象错误&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//4.创建输出数据对象</span><br><span class=\"line\">AVCaptureStillImageOutput*imageOutput = [[AVCaptureStillImageOutp</span><br><span class=\"line\">utalloc]init];</span><br><span class=\"line\">NSDictionary*setting =@&#123;AVVideoCodecKey:AVVideoCodecJPEG&#125;;</span><br><span class=\"line\">[imageOutputsetOutputSettings:setting];</span><br><span class=\"line\">//5.添加输入数据对象和输出对象到会话中</span><br><span class=\"line\"><span class=\"keyword\">if</span>([sessioncanAddInput:captureInput]) &#123;</span><br><span class=\"line\">[sessionaddInput:captureInput];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span>([sessioncanAddOutput:imageOutput]) &#123;</span><br><span class=\"line\">[sessionaddOutput:imageOutput];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//6.创建视频预览图层</span><br><span class=\"line\">AVCaptureVideoPreviewLayer*videoLayer =</span><br><span class=\"line\">[[AVCaptureVideoPreviewLayeralloc]initWithSession:session];</span><br><span class=\"line\">self.view.layer.masksToBounds=YES;</span><br><span class=\"line\">videoLayer.frame=self.view.bounds;</span><br><span class=\"line\">videoLayer.videoGravity=AVLayerVideoGravityResizeAspectFill;</span><br><span class=\"line\">[self.view.layeraddSublayer:videoLayer];</span><br><span class=\"line\">//这里需要设置相机开始捕捉画面</span><br><span class=\"line\">[sessionstartRunning];//开始捕捉</span><br></pre></td></tr></table></figure>\n"},{"title":"阶段小结（二）","date":"2017-09-02T12:46:25.000Z","_content":"这段时间，我完成了第二款和第三款APP的开发。\n\n第二个应用是关于王者荣耀的，属于新闻类的APP吧，主要的功能是展示资讯信息和模拟器的实现，而后来，因为模拟器用了网上的WEB页面，所以跳过了这个麻烦的部分。而对与框架，整个框架的搭建跟主流的应用一样，导航栏页面有四个嵌套的子页面，而子页面里面再嵌套子页面，以前想复杂了，现在做完了发现其实很简单，这里也遇到了一个坑，我是用的pageViewController做的，在滑动页面切换的时候，pageViewController每一次滑动都会加载前一个页面和后一个页面，也就是说，他滑动的时候，会加载前一个页面，还有后一个页面，展示的这个页面是在之前就加载好了的，所以不是加载的当前展示的这个页面，要调节好这个顺序，还有就是pageViewController在滑动的时候，要获取当前这个子页面的属性的话，要调用pageViewController的Will的方法获取。\n\n获取数据的时候需要考虑获取数据的状态和顺序，特别是用View展示的时候需要考虑到复用或者数据重复发送的时候，数据怎么展示，每次获取到数据，就需要刷新View，这里刷新要在主线程里面刷新。\n\n另外，高度自适应，对于tableViewCell，tableView有专门的属性控制自适应，是一个估计的值，自己估计下写进去就好了。但是值是一回事，需要搭配里面的view来做自适应，里面的View在设置约束的时候，要看、好好考虑，最好能占满整个Cell，因为会有cell的复用，在滑动tableView的时候，Cell每次复用都会计算。\n\n也是在这个里面接触了Web和移动端的混合开发，我喜欢用Css，因为简单啊~~哈哈~js还没看~后面去花时间看看，webView在加载出来web页面，这里也需要注意一点，需要修改web页面的话，最好在加载完成后在修改，不然会有很多东西使用不了，或者显示不完整，web页面里面。\n\n还有就是：\n\n``` bash\n有问题一定要沟通，沟通！！！\n```\n\n小福利：\n## 1.自动计算日期：\n\n``` bash\n//输入天数返回当天到后面若干天的日期\n- (NSMutableArray*)GetTomorrowDay:(int)day\n{\nNSDate*date = [NSDatedate];\nNSMutableArray*arr = [NSMutableArrayarray];\nNSCalendar*gregorian = [[NSCalendaralloc]initWithCalendarIdenti\nfier:NSCalendarIdentifierGregorian];\nNSDateComponents*components = [gregoriancomponents:NSCalendarUnit\nWeekday|NSCalendarUnitYear|NSCalendarUnitMonth|NSCalendarUnitDay\nfromDate:date];\nNSDateFormatter*formater = [[NSDateFormatteralloc]init];\n[formatersetDateFormat:@\"MM-dd\"];\nNSString*curTime = [formaterstringFromDate:date];\n[arraddObject:curTime];\nfor(inti =1; i\n{\n[componentssetDay:([componentsday]+1)];\nNSDate*beginningOfWeek = [gregoriandateFromComponents:components]\n;\nNSDateFormatter*dateday = [[NSDateFormatteralloc]init];\n[datedaysetDateFormat:@\"MM-dd\"];\n[arraddObject:[datedaystringFromDate:beginningOfWeek]];\n}\nreturnarr;\n}\n```\n\n## 2.后台播放\n\n这是一段很神奇的代码，除了实现后台播放，还顺带实现了静音播放，GET\n\n### 1.在myApp-Info.plist中添加UIBackgroundModes键值，添加子键值为audio。\n\n### 2.然后在程序中添加入下代码，最好在AppDelegate里面加入：\n\n``` bash\nAVAudioSession*session=[AVAudioSessionsharedInstance];\n[sessionsetActive:YESerror:nil];\n[sessionsetCategory:AVAudioSessionCategoryPlaybackerror:nil];\n3,突发事件，中断播放（打电话）\n\n–>在通知中心注册一个事件中断的通知：\n\n\n//回调两次，开始和结束，最好写在AppDelegate里面\n[[NSNotificationCenter defaultCenter] addObserver:self selector:\n@selector(handleInterreption:) name:AVAudioSessionInterruptionNo\ntification object:[AVAudioSession sharedInstance]];\n-->实现接收到中断通知时的方法\n//处理中断事件\n-(void)handleInterreption:(NSNotification *)sender\n{\nif(_played)\n{\n//操作一\n}\nelse\n{\n//操作二\n}\n}\n```\n","source":"_posts/2017/阶段小结（二）.md","raw":"---\ntitle: 阶段小结（二）\ndate: 2017/9/2 20:46:25\ntags: [技术,总结,iOS]\ncategory: [小结]\n---\n这段时间，我完成了第二款和第三款APP的开发。\n\n第二个应用是关于王者荣耀的，属于新闻类的APP吧，主要的功能是展示资讯信息和模拟器的实现，而后来，因为模拟器用了网上的WEB页面，所以跳过了这个麻烦的部分。而对与框架，整个框架的搭建跟主流的应用一样，导航栏页面有四个嵌套的子页面，而子页面里面再嵌套子页面，以前想复杂了，现在做完了发现其实很简单，这里也遇到了一个坑，我是用的pageViewController做的，在滑动页面切换的时候，pageViewController每一次滑动都会加载前一个页面和后一个页面，也就是说，他滑动的时候，会加载前一个页面，还有后一个页面，展示的这个页面是在之前就加载好了的，所以不是加载的当前展示的这个页面，要调节好这个顺序，还有就是pageViewController在滑动的时候，要获取当前这个子页面的属性的话，要调用pageViewController的Will的方法获取。\n\n获取数据的时候需要考虑获取数据的状态和顺序，特别是用View展示的时候需要考虑到复用或者数据重复发送的时候，数据怎么展示，每次获取到数据，就需要刷新View，这里刷新要在主线程里面刷新。\n\n另外，高度自适应，对于tableViewCell，tableView有专门的属性控制自适应，是一个估计的值，自己估计下写进去就好了。但是值是一回事，需要搭配里面的view来做自适应，里面的View在设置约束的时候，要看、好好考虑，最好能占满整个Cell，因为会有cell的复用，在滑动tableView的时候，Cell每次复用都会计算。\n\n也是在这个里面接触了Web和移动端的混合开发，我喜欢用Css，因为简单啊~~哈哈~js还没看~后面去花时间看看，webView在加载出来web页面，这里也需要注意一点，需要修改web页面的话，最好在加载完成后在修改，不然会有很多东西使用不了，或者显示不完整，web页面里面。\n\n还有就是：\n\n``` bash\n有问题一定要沟通，沟通！！！\n```\n\n小福利：\n## 1.自动计算日期：\n\n``` bash\n//输入天数返回当天到后面若干天的日期\n- (NSMutableArray*)GetTomorrowDay:(int)day\n{\nNSDate*date = [NSDatedate];\nNSMutableArray*arr = [NSMutableArrayarray];\nNSCalendar*gregorian = [[NSCalendaralloc]initWithCalendarIdenti\nfier:NSCalendarIdentifierGregorian];\nNSDateComponents*components = [gregoriancomponents:NSCalendarUnit\nWeekday|NSCalendarUnitYear|NSCalendarUnitMonth|NSCalendarUnitDay\nfromDate:date];\nNSDateFormatter*formater = [[NSDateFormatteralloc]init];\n[formatersetDateFormat:@\"MM-dd\"];\nNSString*curTime = [formaterstringFromDate:date];\n[arraddObject:curTime];\nfor(inti =1; i\n{\n[componentssetDay:([componentsday]+1)];\nNSDate*beginningOfWeek = [gregoriandateFromComponents:components]\n;\nNSDateFormatter*dateday = [[NSDateFormatteralloc]init];\n[datedaysetDateFormat:@\"MM-dd\"];\n[arraddObject:[datedaystringFromDate:beginningOfWeek]];\n}\nreturnarr;\n}\n```\n\n## 2.后台播放\n\n这是一段很神奇的代码，除了实现后台播放，还顺带实现了静音播放，GET\n\n### 1.在myApp-Info.plist中添加UIBackgroundModes键值，添加子键值为audio。\n\n### 2.然后在程序中添加入下代码，最好在AppDelegate里面加入：\n\n``` bash\nAVAudioSession*session=[AVAudioSessionsharedInstance];\n[sessionsetActive:YESerror:nil];\n[sessionsetCategory:AVAudioSessionCategoryPlaybackerror:nil];\n3,突发事件，中断播放（打电话）\n\n–>在通知中心注册一个事件中断的通知：\n\n\n//回调两次，开始和结束，最好写在AppDelegate里面\n[[NSNotificationCenter defaultCenter] addObserver:self selector:\n@selector(handleInterreption:) name:AVAudioSessionInterruptionNo\ntification object:[AVAudioSession sharedInstance]];\n-->实现接收到中断通知时的方法\n//处理中断事件\n-(void)handleInterreption:(NSNotification *)sender\n{\nif(_played)\n{\n//操作一\n}\nelse\n{\n//操作二\n}\n}\n```\n","slug":"2017/阶段小结（二）","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofgls000qg0vg94iv1dks","content":"<p>这段时间，我完成了第二款和第三款APP的开发。</p>\n<p>第二个应用是关于王者荣耀的，属于新闻类的APP吧，主要的功能是展示资讯信息和模拟器的实现，而后来，因为模拟器用了网上的WEB页面，所以跳过了这个麻烦的部分。而对与框架，整个框架的搭建跟主流的应用一样，导航栏页面有四个嵌套的子页面，而子页面里面再嵌套子页面，以前想复杂了，现在做完了发现其实很简单，这里也遇到了一个坑，我是用的pageViewController做的，在滑动页面切换的时候，pageViewController每一次滑动都会加载前一个页面和后一个页面，也就是说，他滑动的时候，会加载前一个页面，还有后一个页面，展示的这个页面是在之前就加载好了的，所以不是加载的当前展示的这个页面，要调节好这个顺序，还有就是pageViewController在滑动的时候，要获取当前这个子页面的属性的话，要调用pageViewController的Will的方法获取。</p>\n<p>获取数据的时候需要考虑获取数据的状态和顺序，特别是用View展示的时候需要考虑到复用或者数据重复发送的时候，数据怎么展示，每次获取到数据，就需要刷新View，这里刷新要在主线程里面刷新。</p>\n<p>另外，高度自适应，对于tableViewCell，tableView有专门的属性控制自适应，是一个估计的值，自己估计下写进去就好了。但是值是一回事，需要搭配里面的view来做自适应，里面的View在设置约束的时候，要看、好好考虑，最好能占满整个Cell，因为会有cell的复用，在滑动tableView的时候，Cell每次复用都会计算。</p>\n<p>也是在这个里面接触了Web和移动端的混合开发，我喜欢用Css，因为简单啊<del>哈哈</del>js还没看~后面去花时间看看，webView在加载出来web页面，这里也需要注意一点，需要修改web页面的话，最好在加载完成后在修改，不然会有很多东西使用不了，或者显示不完整，web页面里面。</p>\n<p>还有就是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有问题一定要沟通，沟通！！！</span><br></pre></td></tr></table></figure>\n\n<p>小福利：</p>\n<h2 id=\"1-自动计算日期：\"><a href=\"#1-自动计算日期：\" class=\"headerlink\" title=\"1.自动计算日期：\"></a>1.自动计算日期：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//输入天数返回当天到后面若干天的日期</span><br><span class=\"line\">- (NSMutableArray*)GetTomorrowDay:(int)day</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">NSDate*date = [NSDatedate];</span><br><span class=\"line\">NSMutableArray*arr = [NSMutableArrayarray];</span><br><span class=\"line\">NSCalendar*gregorian = [[NSCalendaralloc]initWithCalendarIdenti</span><br><span class=\"line\">fier:NSCalendarIdentifierGregorian];</span><br><span class=\"line\">NSDateComponents*components = [gregoriancomponents:NSCalendarUnit</span><br><span class=\"line\">Weekday|NSCalendarUnitYear|NSCalendarUnitMonth|NSCalendarUnitDay</span><br><span class=\"line\">fromDate:date];</span><br><span class=\"line\">NSDateFormatter*formater = [[NSDateFormatteralloc]init];</span><br><span class=\"line\">[formatersetDateFormat:@<span class=\"string\">&quot;MM-dd&quot;</span>];</span><br><span class=\"line\">NSString*curTime = [formaterstringFromDate:date];</span><br><span class=\"line\">[arraddObject:curTime];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti =1; i</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">[componentssetDay:([componentsday]+1)];</span><br><span class=\"line\">NSDate*beginningOfWeek = [gregoriandateFromComponents:components]</span><br><span class=\"line\">;</span><br><span class=\"line\">NSDateFormatter*dateday = [[NSDateFormatteralloc]init];</span><br><span class=\"line\">[datedaysetDateFormat:@<span class=\"string\">&quot;MM-dd&quot;</span>];</span><br><span class=\"line\">[arraddObject:[datedaystringFromDate:beginningOfWeek]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">returnarr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-后台播放\"><a href=\"#2-后台播放\" class=\"headerlink\" title=\"2.后台播放\"></a>2.后台播放</h2><p>这是一段很神奇的代码，除了实现后台播放，还顺带实现了静音播放，GET</p>\n<h3 id=\"1-在myApp-Info-plist中添加UIBackgroundModes键值，添加子键值为audio。\"><a href=\"#1-在myApp-Info-plist中添加UIBackgroundModes键值，添加子键值为audio。\" class=\"headerlink\" title=\"1.在myApp-Info.plist中添加UIBackgroundModes键值，添加子键值为audio。\"></a>1.在myApp-Info.plist中添加UIBackgroundModes键值，添加子键值为audio。</h3><h3 id=\"2-然后在程序中添加入下代码，最好在AppDelegate里面加入：\"><a href=\"#2-然后在程序中添加入下代码，最好在AppDelegate里面加入：\" class=\"headerlink\" title=\"2.然后在程序中添加入下代码，最好在AppDelegate里面加入：\"></a>2.然后在程序中添加入下代码，最好在AppDelegate里面加入：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVAudioSession*session=[AVAudioSessionsharedInstance];</span><br><span class=\"line\">[sessionsetActive:YESerror:nil];</span><br><span class=\"line\">[sessionsetCategory:AVAudioSessionCategoryPlaybackerror:nil];</span><br><span class=\"line\">3,突发事件，中断播放（打电话）</span><br><span class=\"line\"></span><br><span class=\"line\">–&gt;在通知中心注册一个事件中断的通知：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//回调两次，开始和结束，最好写在AppDelegate里面</span><br><span class=\"line\">[[NSNotificationCenter defaultCenter] addObserver:self selector:</span><br><span class=\"line\">@selector(handleInterreption:) name:AVAudioSessionInterruptionNo</span><br><span class=\"line\">tification object:[AVAudioSession sharedInstance]];</span><br><span class=\"line\">--&gt;实现接收到中断通知时的方法</span><br><span class=\"line\">//处理中断事件</span><br><span class=\"line\">-(void)handleInterreption:(NSNotification *)sender</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(_played)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//操作一</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//操作二</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>这段时间，我完成了第二款和第三款APP的开发。</p>\n<p>第二个应用是关于王者荣耀的，属于新闻类的APP吧，主要的功能是展示资讯信息和模拟器的实现，而后来，因为模拟器用了网上的WEB页面，所以跳过了这个麻烦的部分。而对与框架，整个框架的搭建跟主流的应用一样，导航栏页面有四个嵌套的子页面，而子页面里面再嵌套子页面，以前想复杂了，现在做完了发现其实很简单，这里也遇到了一个坑，我是用的pageViewController做的，在滑动页面切换的时候，pageViewController每一次滑动都会加载前一个页面和后一个页面，也就是说，他滑动的时候，会加载前一个页面，还有后一个页面，展示的这个页面是在之前就加载好了的，所以不是加载的当前展示的这个页面，要调节好这个顺序，还有就是pageViewController在滑动的时候，要获取当前这个子页面的属性的话，要调用pageViewController的Will的方法获取。</p>\n<p>获取数据的时候需要考虑获取数据的状态和顺序，特别是用View展示的时候需要考虑到复用或者数据重复发送的时候，数据怎么展示，每次获取到数据，就需要刷新View，这里刷新要在主线程里面刷新。</p>\n<p>另外，高度自适应，对于tableViewCell，tableView有专门的属性控制自适应，是一个估计的值，自己估计下写进去就好了。但是值是一回事，需要搭配里面的view来做自适应，里面的View在设置约束的时候，要看、好好考虑，最好能占满整个Cell，因为会有cell的复用，在滑动tableView的时候，Cell每次复用都会计算。</p>\n<p>也是在这个里面接触了Web和移动端的混合开发，我喜欢用Css，因为简单啊<del>哈哈</del>js还没看~后面去花时间看看，webView在加载出来web页面，这里也需要注意一点，需要修改web页面的话，最好在加载完成后在修改，不然会有很多东西使用不了，或者显示不完整，web页面里面。</p>\n<p>还有就是：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有问题一定要沟通，沟通！！！</span><br></pre></td></tr></table></figure>\n\n<p>小福利：</p>\n<h2 id=\"1-自动计算日期：\"><a href=\"#1-自动计算日期：\" class=\"headerlink\" title=\"1.自动计算日期：\"></a>1.自动计算日期：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//输入天数返回当天到后面若干天的日期</span><br><span class=\"line\">- (NSMutableArray*)GetTomorrowDay:(int)day</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">NSDate*date = [NSDatedate];</span><br><span class=\"line\">NSMutableArray*arr = [NSMutableArrayarray];</span><br><span class=\"line\">NSCalendar*gregorian = [[NSCalendaralloc]initWithCalendarIdenti</span><br><span class=\"line\">fier:NSCalendarIdentifierGregorian];</span><br><span class=\"line\">NSDateComponents*components = [gregoriancomponents:NSCalendarUnit</span><br><span class=\"line\">Weekday|NSCalendarUnitYear|NSCalendarUnitMonth|NSCalendarUnitDay</span><br><span class=\"line\">fromDate:date];</span><br><span class=\"line\">NSDateFormatter*formater = [[NSDateFormatteralloc]init];</span><br><span class=\"line\">[formatersetDateFormat:@<span class=\"string\">&quot;MM-dd&quot;</span>];</span><br><span class=\"line\">NSString*curTime = [formaterstringFromDate:date];</span><br><span class=\"line\">[arraddObject:curTime];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(inti =1; i</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">[componentssetDay:([componentsday]+1)];</span><br><span class=\"line\">NSDate*beginningOfWeek = [gregoriandateFromComponents:components]</span><br><span class=\"line\">;</span><br><span class=\"line\">NSDateFormatter*dateday = [[NSDateFormatteralloc]init];</span><br><span class=\"line\">[datedaysetDateFormat:@<span class=\"string\">&quot;MM-dd&quot;</span>];</span><br><span class=\"line\">[arraddObject:[datedaystringFromDate:beginningOfWeek]];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">returnarr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-后台播放\"><a href=\"#2-后台播放\" class=\"headerlink\" title=\"2.后台播放\"></a>2.后台播放</h2><p>这是一段很神奇的代码，除了实现后台播放，还顺带实现了静音播放，GET</p>\n<h3 id=\"1-在myApp-Info-plist中添加UIBackgroundModes键值，添加子键值为audio。\"><a href=\"#1-在myApp-Info-plist中添加UIBackgroundModes键值，添加子键值为audio。\" class=\"headerlink\" title=\"1.在myApp-Info.plist中添加UIBackgroundModes键值，添加子键值为audio。\"></a>1.在myApp-Info.plist中添加UIBackgroundModes键值，添加子键值为audio。</h3><h3 id=\"2-然后在程序中添加入下代码，最好在AppDelegate里面加入：\"><a href=\"#2-然后在程序中添加入下代码，最好在AppDelegate里面加入：\" class=\"headerlink\" title=\"2.然后在程序中添加入下代码，最好在AppDelegate里面加入：\"></a>2.然后在程序中添加入下代码，最好在AppDelegate里面加入：</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AVAudioSession*session=[AVAudioSessionsharedInstance];</span><br><span class=\"line\">[sessionsetActive:YESerror:nil];</span><br><span class=\"line\">[sessionsetCategory:AVAudioSessionCategoryPlaybackerror:nil];</span><br><span class=\"line\">3,突发事件，中断播放（打电话）</span><br><span class=\"line\"></span><br><span class=\"line\">–&gt;在通知中心注册一个事件中断的通知：</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//回调两次，开始和结束，最好写在AppDelegate里面</span><br><span class=\"line\">[[NSNotificationCenter defaultCenter] addObserver:self selector:</span><br><span class=\"line\">@selector(handleInterreption:) name:AVAudioSessionInterruptionNo</span><br><span class=\"line\">tification object:[AVAudioSession sharedInstance]];</span><br><span class=\"line\">--&gt;实现接收到中断通知时的方法</span><br><span class=\"line\">//处理中断事件</span><br><span class=\"line\">-(void)handleInterreption:(NSNotification *)sender</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(_played)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//操作一</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//操作二</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"关于健身","date":"2018-04-20T12:46:25.000Z","_content":"关于健身，之前是我一个朋友要我写一下，但是我想的是我一个只是喜欢健身的人，给不了别人什么意见，网上有很多大神可以请教，没我什么事情，但是后来看在网上说的一些误区，就想着写一下写一下有些基础的心得分享，就只是一些关于健身的知识分享。\n\n说到健身，为什么要健身。其实，我觉得普通人健身的目的，或者说作用，就两个，一个是想要一个好的身材，不管是男生还是女生，另外一个是想要一个好的身体素质，这也是我的但是决定健身的想法。特别是我现在做的工作，我觉得我需要有一个好的身体才行。\n\n其实，当你决定健身之后，坚持健身下来，你会发现，带来的好处不止这两个，工作累的时候，或者说压抑的时候，需要发泄，而运动，我认为是不二之选，既能锻炼身体，又能发泄放松，何乐而不为。还有你坚持健身下来，你会发现自己的状态会很不一样，其中包括了自信和自律。\n\n## 关于健身的方法，总结就：\n\n``` bash\n控制饮食+制定锻炼计划+坚持+坚持+坚持。\n```\n\n既然决定健身了，就还是适当的控制饮食，这个控制饮食不是叫你不吃东西。看你自己的健身计划是什么，增肌或者是减脂，目标不同，饮食也会不同，以我自己为例，我当时是减脂，增肌只是额外目标，所以，油炸、碳酸、饼干、甜食之类的我就没有再吃过了，网上有一种说法是保持少食多餐，就是说一天可以不必要是三餐是，可以是四餐或者五餐，但是每餐吃少量食物。我不喜欢那个，所以我的做法是，早餐正常，最好中午多吃一点，八分饱，下午少吃。\n\n## 说完了饮食，来说说具体的锻炼，说道锻炼，我来纠正几个误区：\n\n``` bash\n1、首先减肥没有局部减肥，你不管怎么运动都是全身消耗脂肪的，锻炼倒是有局部锻炼。\n2、减肥不是只做有氧运动才能减肥，有效的减肥是无氧+有氧结合。\n3、长时间不练肌肉会变成肥肉，事实是肌肉会因为不锻练而萎缩变小，脂肪会因为摄入\n大于消耗而堆积。\n4、女生没那么容易长肌肉，荷尔蒙在哪，除非你打激素。\n综上所述，我建议锻炼的方法是先无氧再有氧再无氧，这样锻炼。\n```\n\n原因是，在我们开始锻炼的时候，身体首先消耗的不是我们的脂肪能量，而是另外的能量，做无氧首先很快的消耗掉这部分的能量，再去做有氧运动，这样就直接开始消耗脂肪的能量了，最后，再去做无氧，身体在疲惫的情况下，再做无氧运动效果更好，线条也更容易练的更好看。\n\n我当时目标主要是减脂，所以我当时的锻炼方法是，首先是热身加拉伸，让身体活动开，然后是力量锻炼8分钟左右，也就两组动作，然后是跑步至少半个小时以上，然后是体能锻炼40分钟左右，然后是力量锻炼半个小时，最后是拉伸，结束。\n\n这个是我大三时候每天去健身房坚持的事情，除了力量和体能锻炼的方法和部位不同，其他都是雷打不动的一样。\n\n关于蛋白粉，网上的说法有好有坏，我的态度是持中立，不好也不坏吧，不过我是不喜欢吃的，还是吃饭好。\n\n## 最后，再给一点福利，纠正两个误区，如下：\n\n``` bash\n1、“无论男女老少，只要晚上不吃饭，就能减肥”，这个肯定是错的，当然这个也可能减\n下来，但是关键是，你觉得你减肥减下来后，身体还正常吗？还有，这种方法反弹也\n不稳定的。\n2、“吃了XXX，7天瘦10斤不是梦”，我们减肥减下来的一般是10斤脂肪，二、而这个里\n面减下来的可能是4斤肌肉，1.5斤粪便，3斤水，1.5斤脂肪。\n```\n","source":"_posts/2018/关于健身.md","raw":"---\ntitle: 关于健身\ndate: 2018/4/20 20:46:25\ntags: [心得]\ncategory: [随笔]\n---\n关于健身，之前是我一个朋友要我写一下，但是我想的是我一个只是喜欢健身的人，给不了别人什么意见，网上有很多大神可以请教，没我什么事情，但是后来看在网上说的一些误区，就想着写一下写一下有些基础的心得分享，就只是一些关于健身的知识分享。\n\n说到健身，为什么要健身。其实，我觉得普通人健身的目的，或者说作用，就两个，一个是想要一个好的身材，不管是男生还是女生，另外一个是想要一个好的身体素质，这也是我的但是决定健身的想法。特别是我现在做的工作，我觉得我需要有一个好的身体才行。\n\n其实，当你决定健身之后，坚持健身下来，你会发现，带来的好处不止这两个，工作累的时候，或者说压抑的时候，需要发泄，而运动，我认为是不二之选，既能锻炼身体，又能发泄放松，何乐而不为。还有你坚持健身下来，你会发现自己的状态会很不一样，其中包括了自信和自律。\n\n## 关于健身的方法，总结就：\n\n``` bash\n控制饮食+制定锻炼计划+坚持+坚持+坚持。\n```\n\n既然决定健身了，就还是适当的控制饮食，这个控制饮食不是叫你不吃东西。看你自己的健身计划是什么，增肌或者是减脂，目标不同，饮食也会不同，以我自己为例，我当时是减脂，增肌只是额外目标，所以，油炸、碳酸、饼干、甜食之类的我就没有再吃过了，网上有一种说法是保持少食多餐，就是说一天可以不必要是三餐是，可以是四餐或者五餐，但是每餐吃少量食物。我不喜欢那个，所以我的做法是，早餐正常，最好中午多吃一点，八分饱，下午少吃。\n\n## 说完了饮食，来说说具体的锻炼，说道锻炼，我来纠正几个误区：\n\n``` bash\n1、首先减肥没有局部减肥，你不管怎么运动都是全身消耗脂肪的，锻炼倒是有局部锻炼。\n2、减肥不是只做有氧运动才能减肥，有效的减肥是无氧+有氧结合。\n3、长时间不练肌肉会变成肥肉，事实是肌肉会因为不锻练而萎缩变小，脂肪会因为摄入\n大于消耗而堆积。\n4、女生没那么容易长肌肉，荷尔蒙在哪，除非你打激素。\n综上所述，我建议锻炼的方法是先无氧再有氧再无氧，这样锻炼。\n```\n\n原因是，在我们开始锻炼的时候，身体首先消耗的不是我们的脂肪能量，而是另外的能量，做无氧首先很快的消耗掉这部分的能量，再去做有氧运动，这样就直接开始消耗脂肪的能量了，最后，再去做无氧，身体在疲惫的情况下，再做无氧运动效果更好，线条也更容易练的更好看。\n\n我当时目标主要是减脂，所以我当时的锻炼方法是，首先是热身加拉伸，让身体活动开，然后是力量锻炼8分钟左右，也就两组动作，然后是跑步至少半个小时以上，然后是体能锻炼40分钟左右，然后是力量锻炼半个小时，最后是拉伸，结束。\n\n这个是我大三时候每天去健身房坚持的事情，除了力量和体能锻炼的方法和部位不同，其他都是雷打不动的一样。\n\n关于蛋白粉，网上的说法有好有坏，我的态度是持中立，不好也不坏吧，不过我是不喜欢吃的，还是吃饭好。\n\n## 最后，再给一点福利，纠正两个误区，如下：\n\n``` bash\n1、“无论男女老少，只要晚上不吃饭，就能减肥”，这个肯定是错的，当然这个也可能减\n下来，但是关键是，你觉得你减肥减下来后，身体还正常吗？还有，这种方法反弹也\n不稳定的。\n2、“吃了XXX，7天瘦10斤不是梦”，我们减肥减下来的一般是10斤脂肪，二、而这个里\n面减下来的可能是4斤肌肉，1.5斤粪便，3斤水，1.5斤脂肪。\n```\n","slug":"2018/关于健身","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglt000ug0vg42y04acl","content":"<p>关于健身，之前是我一个朋友要我写一下，但是我想的是我一个只是喜欢健身的人，给不了别人什么意见，网上有很多大神可以请教，没我什么事情，但是后来看在网上说的一些误区，就想着写一下写一下有些基础的心得分享，就只是一些关于健身的知识分享。</p>\n<p>说到健身，为什么要健身。其实，我觉得普通人健身的目的，或者说作用，就两个，一个是想要一个好的身材，不管是男生还是女生，另外一个是想要一个好的身体素质，这也是我的但是决定健身的想法。特别是我现在做的工作，我觉得我需要有一个好的身体才行。</p>\n<p>其实，当你决定健身之后，坚持健身下来，你会发现，带来的好处不止这两个，工作累的时候，或者说压抑的时候，需要发泄，而运动，我认为是不二之选，既能锻炼身体，又能发泄放松，何乐而不为。还有你坚持健身下来，你会发现自己的状态会很不一样，其中包括了自信和自律。</p>\n<h2 id=\"关于健身的方法，总结就：\"><a href=\"#关于健身的方法，总结就：\" class=\"headerlink\" title=\"关于健身的方法，总结就：\"></a>关于健身的方法，总结就：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">控制饮食+制定锻炼计划+坚持+坚持+坚持。</span><br></pre></td></tr></table></figure>\n\n<p>既然决定健身了，就还是适当的控制饮食，这个控制饮食不是叫你不吃东西。看你自己的健身计划是什么，增肌或者是减脂，目标不同，饮食也会不同，以我自己为例，我当时是减脂，增肌只是额外目标，所以，油炸、碳酸、饼干、甜食之类的我就没有再吃过了，网上有一种说法是保持少食多餐，就是说一天可以不必要是三餐是，可以是四餐或者五餐，但是每餐吃少量食物。我不喜欢那个，所以我的做法是，早餐正常，最好中午多吃一点，八分饱，下午少吃。</p>\n<h2 id=\"说完了饮食，来说说具体的锻炼，说道锻炼，我来纠正几个误区：\"><a href=\"#说完了饮食，来说说具体的锻炼，说道锻炼，我来纠正几个误区：\" class=\"headerlink\" title=\"说完了饮食，来说说具体的锻炼，说道锻炼，我来纠正几个误区：\"></a>说完了饮食，来说说具体的锻炼，说道锻炼，我来纠正几个误区：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、首先减肥没有局部减肥，你不管怎么运动都是全身消耗脂肪的，锻炼倒是有局部锻炼。</span><br><span class=\"line\">2、减肥不是只做有氧运动才能减肥，有效的减肥是无氧+有氧结合。</span><br><span class=\"line\">3、长时间不练肌肉会变成肥肉，事实是肌肉会因为不锻练而萎缩变小，脂肪会因为摄入</span><br><span class=\"line\">大于消耗而堆积。</span><br><span class=\"line\">4、女生没那么容易长肌肉，荷尔蒙在哪，除非你打激素。</span><br><span class=\"line\">综上所述，我建议锻炼的方法是先无氧再有氧再无氧，这样锻炼。</span><br></pre></td></tr></table></figure>\n\n<p>原因是，在我们开始锻炼的时候，身体首先消耗的不是我们的脂肪能量，而是另外的能量，做无氧首先很快的消耗掉这部分的能量，再去做有氧运动，这样就直接开始消耗脂肪的能量了，最后，再去做无氧，身体在疲惫的情况下，再做无氧运动效果更好，线条也更容易练的更好看。</p>\n<p>我当时目标主要是减脂，所以我当时的锻炼方法是，首先是热身加拉伸，让身体活动开，然后是力量锻炼8分钟左右，也就两组动作，然后是跑步至少半个小时以上，然后是体能锻炼40分钟左右，然后是力量锻炼半个小时，最后是拉伸，结束。</p>\n<p>这个是我大三时候每天去健身房坚持的事情，除了力量和体能锻炼的方法和部位不同，其他都是雷打不动的一样。</p>\n<p>关于蛋白粉，网上的说法有好有坏，我的态度是持中立，不好也不坏吧，不过我是不喜欢吃的，还是吃饭好。</p>\n<h2 id=\"最后，再给一点福利，纠正两个误区，如下：\"><a href=\"#最后，再给一点福利，纠正两个误区，如下：\" class=\"headerlink\" title=\"最后，再给一点福利，纠正两个误区，如下：\"></a>最后，再给一点福利，纠正两个误区，如下：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、“无论男女老少，只要晚上不吃饭，就能减肥”，这个肯定是错的，当然这个也可能减</span><br><span class=\"line\">下来，但是关键是，你觉得你减肥减下来后，身体还正常吗？还有，这种方法反弹也</span><br><span class=\"line\">不稳定的。</span><br><span class=\"line\">2、“吃了XXX，7天瘦10斤不是梦”，我们减肥减下来的一般是10斤脂肪，二、而这个里</span><br><span class=\"line\">面减下来的可能是4斤肌肉，1.5斤粪便，3斤水，1.5斤脂肪。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>关于健身，之前是我一个朋友要我写一下，但是我想的是我一个只是喜欢健身的人，给不了别人什么意见，网上有很多大神可以请教，没我什么事情，但是后来看在网上说的一些误区，就想着写一下写一下有些基础的心得分享，就只是一些关于健身的知识分享。</p>\n<p>说到健身，为什么要健身。其实，我觉得普通人健身的目的，或者说作用，就两个，一个是想要一个好的身材，不管是男生还是女生，另外一个是想要一个好的身体素质，这也是我的但是决定健身的想法。特别是我现在做的工作，我觉得我需要有一个好的身体才行。</p>\n<p>其实，当你决定健身之后，坚持健身下来，你会发现，带来的好处不止这两个，工作累的时候，或者说压抑的时候，需要发泄，而运动，我认为是不二之选，既能锻炼身体，又能发泄放松，何乐而不为。还有你坚持健身下来，你会发现自己的状态会很不一样，其中包括了自信和自律。</p>\n<h2 id=\"关于健身的方法，总结就：\"><a href=\"#关于健身的方法，总结就：\" class=\"headerlink\" title=\"关于健身的方法，总结就：\"></a>关于健身的方法，总结就：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">控制饮食+制定锻炼计划+坚持+坚持+坚持。</span><br></pre></td></tr></table></figure>\n\n<p>既然决定健身了，就还是适当的控制饮食，这个控制饮食不是叫你不吃东西。看你自己的健身计划是什么，增肌或者是减脂，目标不同，饮食也会不同，以我自己为例，我当时是减脂，增肌只是额外目标，所以，油炸、碳酸、饼干、甜食之类的我就没有再吃过了，网上有一种说法是保持少食多餐，就是说一天可以不必要是三餐是，可以是四餐或者五餐，但是每餐吃少量食物。我不喜欢那个，所以我的做法是，早餐正常，最好中午多吃一点，八分饱，下午少吃。</p>\n<h2 id=\"说完了饮食，来说说具体的锻炼，说道锻炼，我来纠正几个误区：\"><a href=\"#说完了饮食，来说说具体的锻炼，说道锻炼，我来纠正几个误区：\" class=\"headerlink\" title=\"说完了饮食，来说说具体的锻炼，说道锻炼，我来纠正几个误区：\"></a>说完了饮食，来说说具体的锻炼，说道锻炼，我来纠正几个误区：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、首先减肥没有局部减肥，你不管怎么运动都是全身消耗脂肪的，锻炼倒是有局部锻炼。</span><br><span class=\"line\">2、减肥不是只做有氧运动才能减肥，有效的减肥是无氧+有氧结合。</span><br><span class=\"line\">3、长时间不练肌肉会变成肥肉，事实是肌肉会因为不锻练而萎缩变小，脂肪会因为摄入</span><br><span class=\"line\">大于消耗而堆积。</span><br><span class=\"line\">4、女生没那么容易长肌肉，荷尔蒙在哪，除非你打激素。</span><br><span class=\"line\">综上所述，我建议锻炼的方法是先无氧再有氧再无氧，这样锻炼。</span><br></pre></td></tr></table></figure>\n\n<p>原因是，在我们开始锻炼的时候，身体首先消耗的不是我们的脂肪能量，而是另外的能量，做无氧首先很快的消耗掉这部分的能量，再去做有氧运动，这样就直接开始消耗脂肪的能量了，最后，再去做无氧，身体在疲惫的情况下，再做无氧运动效果更好，线条也更容易练的更好看。</p>\n<p>我当时目标主要是减脂，所以我当时的锻炼方法是，首先是热身加拉伸，让身体活动开，然后是力量锻炼8分钟左右，也就两组动作，然后是跑步至少半个小时以上，然后是体能锻炼40分钟左右，然后是力量锻炼半个小时，最后是拉伸，结束。</p>\n<p>这个是我大三时候每天去健身房坚持的事情，除了力量和体能锻炼的方法和部位不同，其他都是雷打不动的一样。</p>\n<p>关于蛋白粉，网上的说法有好有坏，我的态度是持中立，不好也不坏吧，不过我是不喜欢吃的，还是吃饭好。</p>\n<h2 id=\"最后，再给一点福利，纠正两个误区，如下：\"><a href=\"#最后，再给一点福利，纠正两个误区，如下：\" class=\"headerlink\" title=\"最后，再给一点福利，纠正两个误区，如下：\"></a>最后，再给一点福利，纠正两个误区，如下：</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、“无论男女老少，只要晚上不吃饭，就能减肥”，这个肯定是错的，当然这个也可能减</span><br><span class=\"line\">下来，但是关键是，你觉得你减肥减下来后，身体还正常吗？还有，这种方法反弹也</span><br><span class=\"line\">不稳定的。</span><br><span class=\"line\">2、“吃了XXX，7天瘦10斤不是梦”，我们减肥减下来的一般是10斤脂肪，二、而这个里</span><br><span class=\"line\">面减下来的可能是4斤肌肉，1.5斤粪便，3斤水，1.5斤脂肪。</span><br></pre></td></tr></table></figure>\n"},{"title":"关于HipHop","date":"2018-05-07T12:46:25.000Z","_content":"## 在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\n\n记得之前在网上看到一条很有趣的自我介绍——会跳舞的程序员，会跳舞的没我编程厉害，会编程的没我跳舞厉害，哈哈，开玩笑的。\n\n接触街舞是在我初中的时候把，初三那个时候第一次知道了有街舞这个东西，在大一的时候，真正的开始学习街舞，那个时候在学校里面报了一个舞团学习，当时学的是Breaking，之后在舞团里面待了两年，在这两年里面，我成为了舞团的队员，参加了一些比赛，接触了一些其他的舞种，比如：Popping、Locking、Hip-hop等，也认识了很多的好朋友，也遇见了我的老大和陈姐，可以说，是我很珍贵的记忆。\n\n我到底是为什么会要学舞呢？当时学舞，主要是因为觉得要找点事情做，加上一直对这个很有兴趣，当然，最重要的是，当你戴上耳机，沉浸在音乐了自己的舞蹈里面的时候，是真的有一种很舒服，很开心的感觉，对，跳舞就是为了开心。\n\n## 舞蹈一定要有音乐\n\n之前有个问题看到过很多次，我也想过很多次，就是街舞和杂技或者体操的区别是什么？\n\n我觉得区别就在于几个地方吧，一个是音乐，一个是心情，一个是影响。没有音乐就没有舞蹈，这说的不是街舞，而是所有的舞，既然是“舞”就一定会有音乐。\n再是，跳舞的时候是开心的，如果你放开跳舞的时候不是开心的，那你就不是喜欢跳舞。\n最后，舞蹈是可以表达东西的，表达的东西是可以影响别人的，不管是你的舞是看着很美，很帅、很酷、很悲伤、很优雅，这都是可以影响别人的，在情感上产生共鸣。\n\n所有，这才是舞蹈。\n\n街舞从美国的起源，到现在，影响力在越来越大了，从七八十年代的国内的接触，再到现在的兴起，再到国际性的比赛，再到体育总局的认可，再到现在的综艺节目的引入，我感觉是越来越好了，也越来越正规化了,当然也避免比了商业化。\n\n走上了这条路，我很庆幸，我很庆幸我选择了这条路，是这个选择改变了我很多，比如我的性格，小学到大学之前，我都是很内向的，是街舞让我改变了很多，街舞教会了我什么是自信，什么是坚强。后面运气不错，给小孩子教了两年的舞，沉淀了两年，使我性格稳重了一些。\n\n## 最后用小猪（罗志祥）在《这，就是街舞里面》说的一句话和大家共勉\n\n``` bash\n我当街舞（舞者）的时候，我是Locking dance，后来，我接触Popping之后，我是Popping dance，当我接触Hip-hop之后了，我是Hip-hop dance，当我给我的老师说的时候，他给我说“不，你要当个专业的舞者”。\n```\n\n```\n所以，我要当一个专业的软件开发者\n```\n\n希望，我们在各自的领域里面最最专业的。\n","source":"_posts/2018/关于HipHop.md","raw":"---\ntitle: 关于HipHop\ndate: 2018/5/7 20:46:25\ntags: [心得]\ncategory: [随笔]\n---\n## 在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\n\n记得之前在网上看到一条很有趣的自我介绍——会跳舞的程序员，会跳舞的没我编程厉害，会编程的没我跳舞厉害，哈哈，开玩笑的。\n\n接触街舞是在我初中的时候把，初三那个时候第一次知道了有街舞这个东西，在大一的时候，真正的开始学习街舞，那个时候在学校里面报了一个舞团学习，当时学的是Breaking，之后在舞团里面待了两年，在这两年里面，我成为了舞团的队员，参加了一些比赛，接触了一些其他的舞种，比如：Popping、Locking、Hip-hop等，也认识了很多的好朋友，也遇见了我的老大和陈姐，可以说，是我很珍贵的记忆。\n\n我到底是为什么会要学舞呢？当时学舞，主要是因为觉得要找点事情做，加上一直对这个很有兴趣，当然，最重要的是，当你戴上耳机，沉浸在音乐了自己的舞蹈里面的时候，是真的有一种很舒服，很开心的感觉，对，跳舞就是为了开心。\n\n## 舞蹈一定要有音乐\n\n之前有个问题看到过很多次，我也想过很多次，就是街舞和杂技或者体操的区别是什么？\n\n我觉得区别就在于几个地方吧，一个是音乐，一个是心情，一个是影响。没有音乐就没有舞蹈，这说的不是街舞，而是所有的舞，既然是“舞”就一定会有音乐。\n再是，跳舞的时候是开心的，如果你放开跳舞的时候不是开心的，那你就不是喜欢跳舞。\n最后，舞蹈是可以表达东西的，表达的东西是可以影响别人的，不管是你的舞是看着很美，很帅、很酷、很悲伤、很优雅，这都是可以影响别人的，在情感上产生共鸣。\n\n所有，这才是舞蹈。\n\n街舞从美国的起源，到现在，影响力在越来越大了，从七八十年代的国内的接触，再到现在的兴起，再到国际性的比赛，再到体育总局的认可，再到现在的综艺节目的引入，我感觉是越来越好了，也越来越正规化了,当然也避免比了商业化。\n\n走上了这条路，我很庆幸，我很庆幸我选择了这条路，是这个选择改变了我很多，比如我的性格，小学到大学之前，我都是很内向的，是街舞让我改变了很多，街舞教会了我什么是自信，什么是坚强。后面运气不错，给小孩子教了两年的舞，沉淀了两年，使我性格稳重了一些。\n\n## 最后用小猪（罗志祥）在《这，就是街舞里面》说的一句话和大家共勉\n\n``` bash\n我当街舞（舞者）的时候，我是Locking dance，后来，我接触Popping之后，我是Popping dance，当我接触Hip-hop之后了，我是Hip-hop dance，当我给我的老师说的时候，他给我说“不，你要当个专业的舞者”。\n```\n\n```\n所以，我要当一个专业的软件开发者\n```\n\n希望，我们在各自的领域里面最最专业的。\n","slug":"2018/关于HipHop","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglt000vg0vgdudng85k","content":"<h2 id=\"在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\"><a href=\"#在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\" class=\"headerlink\" title=\"在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\"></a>在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。</h2><p>记得之前在网上看到一条很有趣的自我介绍——会跳舞的程序员，会跳舞的没我编程厉害，会编程的没我跳舞厉害，哈哈，开玩笑的。</p>\n<p>接触街舞是在我初中的时候把，初三那个时候第一次知道了有街舞这个东西，在大一的时候，真正的开始学习街舞，那个时候在学校里面报了一个舞团学习，当时学的是Breaking，之后在舞团里面待了两年，在这两年里面，我成为了舞团的队员，参加了一些比赛，接触了一些其他的舞种，比如：Popping、Locking、Hip-hop等，也认识了很多的好朋友，也遇见了我的老大和陈姐，可以说，是我很珍贵的记忆。</p>\n<p>我到底是为什么会要学舞呢？当时学舞，主要是因为觉得要找点事情做，加上一直对这个很有兴趣，当然，最重要的是，当你戴上耳机，沉浸在音乐了自己的舞蹈里面的时候，是真的有一种很舒服，很开心的感觉，对，跳舞就是为了开心。</p>\n<h2 id=\"舞蹈一定要有音乐\"><a href=\"#舞蹈一定要有音乐\" class=\"headerlink\" title=\"舞蹈一定要有音乐\"></a>舞蹈一定要有音乐</h2><p>之前有个问题看到过很多次，我也想过很多次，就是街舞和杂技或者体操的区别是什么？</p>\n<p>我觉得区别就在于几个地方吧，一个是音乐，一个是心情，一个是影响。没有音乐就没有舞蹈，这说的不是街舞，而是所有的舞，既然是“舞”就一定会有音乐。<br>再是，跳舞的时候是开心的，如果你放开跳舞的时候不是开心的，那你就不是喜欢跳舞。<br>最后，舞蹈是可以表达东西的，表达的东西是可以影响别人的，不管是你的舞是看着很美，很帅、很酷、很悲伤、很优雅，这都是可以影响别人的，在情感上产生共鸣。</p>\n<p>所有，这才是舞蹈。</p>\n<p>街舞从美国的起源，到现在，影响力在越来越大了，从七八十年代的国内的接触，再到现在的兴起，再到国际性的比赛，再到体育总局的认可，再到现在的综艺节目的引入，我感觉是越来越好了，也越来越正规化了,当然也避免比了商业化。</p>\n<p>走上了这条路，我很庆幸，我很庆幸我选择了这条路，是这个选择改变了我很多，比如我的性格，小学到大学之前，我都是很内向的，是街舞让我改变了很多，街舞教会了我什么是自信，什么是坚强。后面运气不错，给小孩子教了两年的舞，沉淀了两年，使我性格稳重了一些。</p>\n<h2 id=\"最后用小猪（罗志祥）在《这，就是街舞里面》说的一句话和大家共勉\"><a href=\"#最后用小猪（罗志祥）在《这，就是街舞里面》说的一句话和大家共勉\" class=\"headerlink\" title=\"最后用小猪（罗志祥）在《这，就是街舞里面》说的一句话和大家共勉\"></a>最后用小猪（罗志祥）在《这，就是街舞里面》说的一句话和大家共勉</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我当街舞（舞者）的时候，我是Locking dance，后来，我接触Popping之后，我是Popping dance，当我接触Hip-hop之后了，我是Hip-hop dance，当我给我的老师说的时候，他给我说“不，你要当个专业的舞者”。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所以，我要当一个专业的软件开发者</span><br></pre></td></tr></table></figure>\n\n<p>希望，我们在各自的领域里面最最专业的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\"><a href=\"#在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\" class=\"headerlink\" title=\"在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\"></a>在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。</h2><p>记得之前在网上看到一条很有趣的自我介绍——会跳舞的程序员，会跳舞的没我编程厉害，会编程的没我跳舞厉害，哈哈，开玩笑的。</p>\n<p>接触街舞是在我初中的时候把，初三那个时候第一次知道了有街舞这个东西，在大一的时候，真正的开始学习街舞，那个时候在学校里面报了一个舞团学习，当时学的是Breaking，之后在舞团里面待了两年，在这两年里面，我成为了舞团的队员，参加了一些比赛，接触了一些其他的舞种，比如：Popping、Locking、Hip-hop等，也认识了很多的好朋友，也遇见了我的老大和陈姐，可以说，是我很珍贵的记忆。</p>\n<p>我到底是为什么会要学舞呢？当时学舞，主要是因为觉得要找点事情做，加上一直对这个很有兴趣，当然，最重要的是，当你戴上耳机，沉浸在音乐了自己的舞蹈里面的时候，是真的有一种很舒服，很开心的感觉，对，跳舞就是为了开心。</p>\n<h2 id=\"舞蹈一定要有音乐\"><a href=\"#舞蹈一定要有音乐\" class=\"headerlink\" title=\"舞蹈一定要有音乐\"></a>舞蹈一定要有音乐</h2><p>之前有个问题看到过很多次，我也想过很多次，就是街舞和杂技或者体操的区别是什么？</p>\n<p>我觉得区别就在于几个地方吧，一个是音乐，一个是心情，一个是影响。没有音乐就没有舞蹈，这说的不是街舞，而是所有的舞，既然是“舞”就一定会有音乐。<br>再是，跳舞的时候是开心的，如果你放开跳舞的时候不是开心的，那你就不是喜欢跳舞。<br>最后，舞蹈是可以表达东西的，表达的东西是可以影响别人的，不管是你的舞是看着很美，很帅、很酷、很悲伤、很优雅，这都是可以影响别人的，在情感上产生共鸣。</p>\n<p>所有，这才是舞蹈。</p>\n<p>街舞从美国的起源，到现在，影响力在越来越大了，从七八十年代的国内的接触，再到现在的兴起，再到国际性的比赛，再到体育总局的认可，再到现在的综艺节目的引入，我感觉是越来越好了，也越来越正规化了,当然也避免比了商业化。</p>\n<p>走上了这条路，我很庆幸，我很庆幸我选择了这条路，是这个选择改变了我很多，比如我的性格，小学到大学之前，我都是很内向的，是街舞让我改变了很多，街舞教会了我什么是自信，什么是坚强。后面运气不错，给小孩子教了两年的舞，沉淀了两年，使我性格稳重了一些。</p>\n<h2 id=\"最后用小猪（罗志祥）在《这，就是街舞里面》说的一句话和大家共勉\"><a href=\"#最后用小猪（罗志祥）在《这，就是街舞里面》说的一句话和大家共勉\" class=\"headerlink\" title=\"最后用小猪（罗志祥）在《这，就是街舞里面》说的一句话和大家共勉\"></a>最后用小猪（罗志祥）在《这，就是街舞里面》说的一句话和大家共勉</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">我当街舞（舞者）的时候，我是Locking dance，后来，我接触Popping之后，我是Popping dance，当我接触Hip-hop之后了，我是Hip-hop dance，当我给我的老师说的时候，他给我说“不，你要当个专业的舞者”。</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所以，我要当一个专业的软件开发者</span><br></pre></td></tr></table></figure>\n\n<p>希望，我们在各自的领域里面最最专业的。</p>\n"},{"title":"大理记忆","date":"2018-03-13T12:46:25.000Z","_content":"九月份公司组织了一次旅游，这次的目的地是大理。\n\n九月份中旬，我们出发，我们这次的行程是，第一天去丽江，晚上逛逛丽江古城，第二天苍山，第三天去洱海，第四天回丽江，第五天回来，大概的行程就是这样。\n\n第一天，上飞机，飞往丽江。其实，我是第一次第一次坐飞机，从小到大第一次坐飞机，我以为我会挺兴奋的，但是，从上飞机到起飞都并没有，唯一感觉新奇的就是，飞机起飞后，会有一段冲刺加速的过程，让我小小刺激了一下。在冲刺完成，飞入云端，然后我第一次看到了很神奇的景色，真的，很想拍，真正的云海，我终于知道为什么总把云比喻成棉花糖了，又大，又白，又软，让人想用力的抱住。\n\n这个是下飞机后，拍的第一张，云南给我的第一印像就是，云好低，天气好冷。。\n\n![丽江机场](/images/大理记忆/1.jpeg)\n\n等我们到客栈已经是快7点了，我们准备集体去找吃的，后来听说，在丽江有一个什么腊排骨很出名，特别是，一家叫阿婆腊排骨的，有人推荐，我们就去了，去的时候，确实，人挺多的，取了票，排队。在等到快一个小时后，大概吧，一个多小时，终于到我们，于是乎，我们在丽江的第一顿饭。\n\n![腊排骨](/images/大理记忆/2.jpeg)\n\n这就是丽江的腊排骨了，看着很好吃的样子，这个店家还给了我们一个小碗，里面装着的是一些调料，服务员告诉我们，需要把排骨的汤舀一点了倒进去，然后用排骨沾着吃，嗯，有一种涮火锅的感觉，不过，虽然我以前也吃过腊排骨，不过，这边的吃着更有味，特别是，沾着小碗里面的作料，味道更香，该怎么形容，就是，嗯。。。好吃。原谅我不知道怎么形容这个味道。\n\n吃完后我们去逛了下丽江的古城，以前一直想来，没机会，这次来就好好的转转，本来是想好好转转的，结果，人真的好多，不想人挤人，就找了一家咖啡店坐了会，欣赏了下丽江古城的夜景，顺便尝了下，云南的小粒咖啡，听店家说这个小粒咖啡比起其他的咖啡味道没那么苦，我就抱着尝试的心态试了下，嗯，个人感觉，确实没那么苦，但总感觉少了点什么，可能我不适合吧。\n\n古城夜景，画面缩小了，因为是用手机拍的，效果不是很好，但是用于记录一下这个时光，还是可以的。\n\n![丽江](/images/大理记忆/3.jpeg)\n\n第一次认识到大理，是在我还很小很小的时候，那个时候对大理的记忆是电视剧《天龙八部》里面，一个在风沙里面的世界，到处是大理石，所有人都带着面纱、口罩，当然，还有无数的武林豪杰，但是，当我第二天到达了大理的时候，脑袋里面所有对大理的认知，全被颠覆，这个地方不是戈壁风沙，而是，充满了慢慢的绿色，无数独特民族风情的建筑，特色的美食，娇俏的姑娘，以及来来往往的旅人。唯一与我记忆里相同的就是，路面上的石头确实挺多的。\n\n去玩的时候，看到了一句话叫“大理有三宝，苍山、洱海、菩提泉”，中午在吃了点名族特色的美食之后，我们就出发去了“三宝”之一的苍山了。苍山别名点苍山，是云岭山脉南端的主峰，东临洱海，西望黑惠江，共有雄峙嵯峨的19峰，海拔一般都在3500米以上，最高的马龙峰4122米，而我们这目标是目前能去到的一个高度，位于玉局峰和龙泉峰顶的交接处的洗马潭。\n\n等到了苍山下，刚开始还没觉得多高，因为一眼望去，感觉也就那样，也就这么高，后来等我们在导游的引领下，坐上了缆车，向山上进发，才真真切切的感受到苍山的巍峨。说到这个坐缆车，其实是坐到2500米左右的一个地方，然后再自己步行上去，到达最后一个站台后，我们一步步的向山上走去，这个时候山上已经在下着小雨了，温度也因为高度的原因下降了很多，我们慢慢的向山顶走去，我上来之前，其实挺忐忑的，因为，以前从来没体会过什么叫高原反应，后来，等我们在上到洗马潭的时候，才发现，自己的身体已经在不知道什么时候，适应了，突然有点惊喜，锻炼，真的有好处。\n\n另外，还有一个惊喜是，山上除了寒风、雨水、阶梯，那远处的风景，真的很漂亮。\n\n![第一次距离天空这么近](/images/大理记忆/4.jpeg)\n\n第三天，我们的目的地是——洱海，它是云南省第二大淡水湖，长约42.58公里，东西最大宽度9.0公里，湖面面积256.5平方公里，平均湖深10米，最大湖深达20米，这是我在百度百科上面看到了，但是下午我到达洱海边上的时候，给我就一个感觉，好长，好宽，好清澈，好美。\n\n![洱海](/images/大理记忆/5.jpeg)\n\n下车走到洱海上，你会情不自禁的想要张开双手，像电视剧里面一样，想好好的感受这个地方，好好的感受洱海的美丽，这个时候，你会感觉很舒服，心里面就算有什么不开心的事情也会忘掉，只想与这处美丽的地方好好的相处。心里面突然想，以前人们说的好山好水，大抵，就是指的这种地方吧。\n\n下午，回到古城，隔天回丽江，自由活动时间，本来以为没什么了，但没想到，我最后还找到了两个惊喜，一个在大理，一个在丽江。\n\n![瓦片烤肉](/images/大理记忆/6.jpeg)\n\n这个是在大理古城里面，下午一个人去转的时候突然找到的，应该也算是当地的特色菜了吧，烤肉很酥脆，油而不腻，再加上一点这个辣椒，嗯~~\n\n![忘了名字](/images/大理记忆/7.jpeg)\n\n第二个是在丽江，一个有点不易被发现的地方，藏着一处叫《无名小倌》的地方，老板娘人不错，也很漂亮，而且这家菜超好吃超，精致喂。\n\n应该，就这些了，本来丽江之行怎么少的了酒吧，丽江酒吧街可是出名了的，可是，当我在酒吧街上的时候，看着酒吧里面的人群，听着酒吧的音乐，突然觉得，可能还是清吧适合我，我还是喜欢清静点好。\n\n最后的最后，这次的大理之行还是很开心的，吃了很多，玩了很多，以后有机会应该还会再去的。\n","source":"_posts/2018/大理记忆.md","raw":"---\ntitle: 大理记忆\ndate: 2018/3/13 20:46:25\ntags: [游记,大理]\ncategory: [随笔]\n---\n九月份公司组织了一次旅游，这次的目的地是大理。\n\n九月份中旬，我们出发，我们这次的行程是，第一天去丽江，晚上逛逛丽江古城，第二天苍山，第三天去洱海，第四天回丽江，第五天回来，大概的行程就是这样。\n\n第一天，上飞机，飞往丽江。其实，我是第一次第一次坐飞机，从小到大第一次坐飞机，我以为我会挺兴奋的，但是，从上飞机到起飞都并没有，唯一感觉新奇的就是，飞机起飞后，会有一段冲刺加速的过程，让我小小刺激了一下。在冲刺完成，飞入云端，然后我第一次看到了很神奇的景色，真的，很想拍，真正的云海，我终于知道为什么总把云比喻成棉花糖了，又大，又白，又软，让人想用力的抱住。\n\n这个是下飞机后，拍的第一张，云南给我的第一印像就是，云好低，天气好冷。。\n\n![丽江机场](/images/大理记忆/1.jpeg)\n\n等我们到客栈已经是快7点了，我们准备集体去找吃的，后来听说，在丽江有一个什么腊排骨很出名，特别是，一家叫阿婆腊排骨的，有人推荐，我们就去了，去的时候，确实，人挺多的，取了票，排队。在等到快一个小时后，大概吧，一个多小时，终于到我们，于是乎，我们在丽江的第一顿饭。\n\n![腊排骨](/images/大理记忆/2.jpeg)\n\n这就是丽江的腊排骨了，看着很好吃的样子，这个店家还给了我们一个小碗，里面装着的是一些调料，服务员告诉我们，需要把排骨的汤舀一点了倒进去，然后用排骨沾着吃，嗯，有一种涮火锅的感觉，不过，虽然我以前也吃过腊排骨，不过，这边的吃着更有味，特别是，沾着小碗里面的作料，味道更香，该怎么形容，就是，嗯。。。好吃。原谅我不知道怎么形容这个味道。\n\n吃完后我们去逛了下丽江的古城，以前一直想来，没机会，这次来就好好的转转，本来是想好好转转的，结果，人真的好多，不想人挤人，就找了一家咖啡店坐了会，欣赏了下丽江古城的夜景，顺便尝了下，云南的小粒咖啡，听店家说这个小粒咖啡比起其他的咖啡味道没那么苦，我就抱着尝试的心态试了下，嗯，个人感觉，确实没那么苦，但总感觉少了点什么，可能我不适合吧。\n\n古城夜景，画面缩小了，因为是用手机拍的，效果不是很好，但是用于记录一下这个时光，还是可以的。\n\n![丽江](/images/大理记忆/3.jpeg)\n\n第一次认识到大理，是在我还很小很小的时候，那个时候对大理的记忆是电视剧《天龙八部》里面，一个在风沙里面的世界，到处是大理石，所有人都带着面纱、口罩，当然，还有无数的武林豪杰，但是，当我第二天到达了大理的时候，脑袋里面所有对大理的认知，全被颠覆，这个地方不是戈壁风沙，而是，充满了慢慢的绿色，无数独特民族风情的建筑，特色的美食，娇俏的姑娘，以及来来往往的旅人。唯一与我记忆里相同的就是，路面上的石头确实挺多的。\n\n去玩的时候，看到了一句话叫“大理有三宝，苍山、洱海、菩提泉”，中午在吃了点名族特色的美食之后，我们就出发去了“三宝”之一的苍山了。苍山别名点苍山，是云岭山脉南端的主峰，东临洱海，西望黑惠江，共有雄峙嵯峨的19峰，海拔一般都在3500米以上，最高的马龙峰4122米，而我们这目标是目前能去到的一个高度，位于玉局峰和龙泉峰顶的交接处的洗马潭。\n\n等到了苍山下，刚开始还没觉得多高，因为一眼望去，感觉也就那样，也就这么高，后来等我们在导游的引领下，坐上了缆车，向山上进发，才真真切切的感受到苍山的巍峨。说到这个坐缆车，其实是坐到2500米左右的一个地方，然后再自己步行上去，到达最后一个站台后，我们一步步的向山上走去，这个时候山上已经在下着小雨了，温度也因为高度的原因下降了很多，我们慢慢的向山顶走去，我上来之前，其实挺忐忑的，因为，以前从来没体会过什么叫高原反应，后来，等我们在上到洗马潭的时候，才发现，自己的身体已经在不知道什么时候，适应了，突然有点惊喜，锻炼，真的有好处。\n\n另外，还有一个惊喜是，山上除了寒风、雨水、阶梯，那远处的风景，真的很漂亮。\n\n![第一次距离天空这么近](/images/大理记忆/4.jpeg)\n\n第三天，我们的目的地是——洱海，它是云南省第二大淡水湖，长约42.58公里，东西最大宽度9.0公里，湖面面积256.5平方公里，平均湖深10米，最大湖深达20米，这是我在百度百科上面看到了，但是下午我到达洱海边上的时候，给我就一个感觉，好长，好宽，好清澈，好美。\n\n![洱海](/images/大理记忆/5.jpeg)\n\n下车走到洱海上，你会情不自禁的想要张开双手，像电视剧里面一样，想好好的感受这个地方，好好的感受洱海的美丽，这个时候，你会感觉很舒服，心里面就算有什么不开心的事情也会忘掉，只想与这处美丽的地方好好的相处。心里面突然想，以前人们说的好山好水，大抵，就是指的这种地方吧。\n\n下午，回到古城，隔天回丽江，自由活动时间，本来以为没什么了，但没想到，我最后还找到了两个惊喜，一个在大理，一个在丽江。\n\n![瓦片烤肉](/images/大理记忆/6.jpeg)\n\n这个是在大理古城里面，下午一个人去转的时候突然找到的，应该也算是当地的特色菜了吧，烤肉很酥脆，油而不腻，再加上一点这个辣椒，嗯~~\n\n![忘了名字](/images/大理记忆/7.jpeg)\n\n第二个是在丽江，一个有点不易被发现的地方，藏着一处叫《无名小倌》的地方，老板娘人不错，也很漂亮，而且这家菜超好吃超，精致喂。\n\n应该，就这些了，本来丽江之行怎么少的了酒吧，丽江酒吧街可是出名了的，可是，当我在酒吧街上的时候，看着酒吧里面的人群，听着酒吧的音乐，突然觉得，可能还是清吧适合我，我还是喜欢清静点好。\n\n最后的最后，这次的大理之行还是很开心的，吃了很多，玩了很多，以后有机会应该还会再去的。\n","slug":"2018/大理记忆","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglu000zg0vg37xxakzq","content":"<p>九月份公司组织了一次旅游，这次的目的地是大理。</p>\n<p>九月份中旬，我们出发，我们这次的行程是，第一天去丽江，晚上逛逛丽江古城，第二天苍山，第三天去洱海，第四天回丽江，第五天回来，大概的行程就是这样。</p>\n<p>第一天，上飞机，飞往丽江。其实，我是第一次第一次坐飞机，从小到大第一次坐飞机，我以为我会挺兴奋的，但是，从上飞机到起飞都并没有，唯一感觉新奇的就是，飞机起飞后，会有一段冲刺加速的过程，让我小小刺激了一下。在冲刺完成，飞入云端，然后我第一次看到了很神奇的景色，真的，很想拍，真正的云海，我终于知道为什么总把云比喻成棉花糖了，又大，又白，又软，让人想用力的抱住。</p>\n<p>这个是下飞机后，拍的第一张，云南给我的第一印像就是，云好低，天气好冷。。</p>\n<p><img src=\"/images/%E5%A4%A7%E7%90%86%E8%AE%B0%E5%BF%86/1.jpeg\" alt=\"丽江机场\"></p>\n<p>等我们到客栈已经是快7点了，我们准备集体去找吃的，后来听说，在丽江有一个什么腊排骨很出名，特别是，一家叫阿婆腊排骨的，有人推荐，我们就去了，去的时候，确实，人挺多的，取了票，排队。在等到快一个小时后，大概吧，一个多小时，终于到我们，于是乎，我们在丽江的第一顿饭。</p>\n<p><img src=\"/images/%E5%A4%A7%E7%90%86%E8%AE%B0%E5%BF%86/2.jpeg\" alt=\"腊排骨\"></p>\n<p>这就是丽江的腊排骨了，看着很好吃的样子，这个店家还给了我们一个小碗，里面装着的是一些调料，服务员告诉我们，需要把排骨的汤舀一点了倒进去，然后用排骨沾着吃，嗯，有一种涮火锅的感觉，不过，虽然我以前也吃过腊排骨，不过，这边的吃着更有味，特别是，沾着小碗里面的作料，味道更香，该怎么形容，就是，嗯。。。好吃。原谅我不知道怎么形容这个味道。</p>\n<p>吃完后我们去逛了下丽江的古城，以前一直想来，没机会，这次来就好好的转转，本来是想好好转转的，结果，人真的好多，不想人挤人，就找了一家咖啡店坐了会，欣赏了下丽江古城的夜景，顺便尝了下，云南的小粒咖啡，听店家说这个小粒咖啡比起其他的咖啡味道没那么苦，我就抱着尝试的心态试了下，嗯，个人感觉，确实没那么苦，但总感觉少了点什么，可能我不适合吧。</p>\n<p>古城夜景，画面缩小了，因为是用手机拍的，效果不是很好，但是用于记录一下这个时光，还是可以的。</p>\n<p><img src=\"/images/%E5%A4%A7%E7%90%86%E8%AE%B0%E5%BF%86/3.jpeg\" alt=\"丽江\"></p>\n<p>第一次认识到大理，是在我还很小很小的时候，那个时候对大理的记忆是电视剧《天龙八部》里面，一个在风沙里面的世界，到处是大理石，所有人都带着面纱、口罩，当然，还有无数的武林豪杰，但是，当我第二天到达了大理的时候，脑袋里面所有对大理的认知，全被颠覆，这个地方不是戈壁风沙，而是，充满了慢慢的绿色，无数独特民族风情的建筑，特色的美食，娇俏的姑娘，以及来来往往的旅人。唯一与我记忆里相同的就是，路面上的石头确实挺多的。</p>\n<p>去玩的时候，看到了一句话叫“大理有三宝，苍山、洱海、菩提泉”，中午在吃了点名族特色的美食之后，我们就出发去了“三宝”之一的苍山了。苍山别名点苍山，是云岭山脉南端的主峰，东临洱海，西望黑惠江，共有雄峙嵯峨的19峰，海拔一般都在3500米以上，最高的马龙峰4122米，而我们这目标是目前能去到的一个高度，位于玉局峰和龙泉峰顶的交接处的洗马潭。</p>\n<p>等到了苍山下，刚开始还没觉得多高，因为一眼望去，感觉也就那样，也就这么高，后来等我们在导游的引领下，坐上了缆车，向山上进发，才真真切切的感受到苍山的巍峨。说到这个坐缆车，其实是坐到2500米左右的一个地方，然后再自己步行上去，到达最后一个站台后，我们一步步的向山上走去，这个时候山上已经在下着小雨了，温度也因为高度的原因下降了很多，我们慢慢的向山顶走去，我上来之前，其实挺忐忑的，因为，以前从来没体会过什么叫高原反应，后来，等我们在上到洗马潭的时候，才发现，自己的身体已经在不知道什么时候，适应了，突然有点惊喜，锻炼，真的有好处。</p>\n<p>另外，还有一个惊喜是，山上除了寒风、雨水、阶梯，那远处的风景，真的很漂亮。</p>\n<p><img src=\"/images/%E5%A4%A7%E7%90%86%E8%AE%B0%E5%BF%86/4.jpeg\" alt=\"第一次距离天空这么近\"></p>\n<p>第三天，我们的目的地是——洱海，它是云南省第二大淡水湖，长约42.58公里，东西最大宽度9.0公里，湖面面积256.5平方公里，平均湖深10米，最大湖深达20米，这是我在百度百科上面看到了，但是下午我到达洱海边上的时候，给我就一个感觉，好长，好宽，好清澈，好美。</p>\n<p><img src=\"/images/%E5%A4%A7%E7%90%86%E8%AE%B0%E5%BF%86/5.jpeg\" alt=\"洱海\"></p>\n<p>下车走到洱海上，你会情不自禁的想要张开双手，像电视剧里面一样，想好好的感受这个地方，好好的感受洱海的美丽，这个时候，你会感觉很舒服，心里面就算有什么不开心的事情也会忘掉，只想与这处美丽的地方好好的相处。心里面突然想，以前人们说的好山好水，大抵，就是指的这种地方吧。</p>\n<p>下午，回到古城，隔天回丽江，自由活动时间，本来以为没什么了，但没想到，我最后还找到了两个惊喜，一个在大理，一个在丽江。</p>\n<p><img src=\"/images/%E5%A4%A7%E7%90%86%E8%AE%B0%E5%BF%86/6.jpeg\" alt=\"瓦片烤肉\"></p>\n<p>这个是在大理古城里面，下午一个人去转的时候突然找到的，应该也算是当地的特色菜了吧，烤肉很酥脆，油而不腻，再加上一点这个辣椒，嗯~~</p>\n<p><img src=\"/images/%E5%A4%A7%E7%90%86%E8%AE%B0%E5%BF%86/7.jpeg\" alt=\"忘了名字\"></p>\n<p>第二个是在丽江，一个有点不易被发现的地方，藏着一处叫《无名小倌》的地方，老板娘人不错，也很漂亮，而且这家菜超好吃超，精致喂。</p>\n<p>应该，就这些了，本来丽江之行怎么少的了酒吧，丽江酒吧街可是出名了的，可是，当我在酒吧街上的时候，看着酒吧里面的人群，听着酒吧的音乐，突然觉得，可能还是清吧适合我，我还是喜欢清静点好。</p>\n<p>最后的最后，这次的大理之行还是很开心的，吃了很多，玩了很多，以后有机会应该还会再去的。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>九月份公司组织了一次旅游，这次的目的地是大理。</p>\n<p>九月份中旬，我们出发，我们这次的行程是，第一天去丽江，晚上逛逛丽江古城，第二天苍山，第三天去洱海，第四天回丽江，第五天回来，大概的行程就是这样。</p>\n<p>第一天，上飞机，飞往丽江。其实，我是第一次第一次坐飞机，从小到大第一次坐飞机，我以为我会挺兴奋的，但是，从上飞机到起飞都并没有，唯一感觉新奇的就是，飞机起飞后，会有一段冲刺加速的过程，让我小小刺激了一下。在冲刺完成，飞入云端，然后我第一次看到了很神奇的景色，真的，很想拍，真正的云海，我终于知道为什么总把云比喻成棉花糖了，又大，又白，又软，让人想用力的抱住。</p>\n<p>这个是下飞机后，拍的第一张，云南给我的第一印像就是，云好低，天气好冷。。</p>\n<p><img src=\"/images/%E5%A4%A7%E7%90%86%E8%AE%B0%E5%BF%86/1.jpeg\" alt=\"丽江机场\"></p>\n<p>等我们到客栈已经是快7点了，我们准备集体去找吃的，后来听说，在丽江有一个什么腊排骨很出名，特别是，一家叫阿婆腊排骨的，有人推荐，我们就去了，去的时候，确实，人挺多的，取了票，排队。在等到快一个小时后，大概吧，一个多小时，终于到我们，于是乎，我们在丽江的第一顿饭。</p>\n<p><img src=\"/images/%E5%A4%A7%E7%90%86%E8%AE%B0%E5%BF%86/2.jpeg\" alt=\"腊排骨\"></p>\n<p>这就是丽江的腊排骨了，看着很好吃的样子，这个店家还给了我们一个小碗，里面装着的是一些调料，服务员告诉我们，需要把排骨的汤舀一点了倒进去，然后用排骨沾着吃，嗯，有一种涮火锅的感觉，不过，虽然我以前也吃过腊排骨，不过，这边的吃着更有味，特别是，沾着小碗里面的作料，味道更香，该怎么形容，就是，嗯。。。好吃。原谅我不知道怎么形容这个味道。</p>\n<p>吃完后我们去逛了下丽江的古城，以前一直想来，没机会，这次来就好好的转转，本来是想好好转转的，结果，人真的好多，不想人挤人，就找了一家咖啡店坐了会，欣赏了下丽江古城的夜景，顺便尝了下，云南的小粒咖啡，听店家说这个小粒咖啡比起其他的咖啡味道没那么苦，我就抱着尝试的心态试了下，嗯，个人感觉，确实没那么苦，但总感觉少了点什么，可能我不适合吧。</p>\n<p>古城夜景，画面缩小了，因为是用手机拍的，效果不是很好，但是用于记录一下这个时光，还是可以的。</p>\n<p><img src=\"/images/%E5%A4%A7%E7%90%86%E8%AE%B0%E5%BF%86/3.jpeg\" alt=\"丽江\"></p>\n<p>第一次认识到大理，是在我还很小很小的时候，那个时候对大理的记忆是电视剧《天龙八部》里面，一个在风沙里面的世界，到处是大理石，所有人都带着面纱、口罩，当然，还有无数的武林豪杰，但是，当我第二天到达了大理的时候，脑袋里面所有对大理的认知，全被颠覆，这个地方不是戈壁风沙，而是，充满了慢慢的绿色，无数独特民族风情的建筑，特色的美食，娇俏的姑娘，以及来来往往的旅人。唯一与我记忆里相同的就是，路面上的石头确实挺多的。</p>\n<p>去玩的时候，看到了一句话叫“大理有三宝，苍山、洱海、菩提泉”，中午在吃了点名族特色的美食之后，我们就出发去了“三宝”之一的苍山了。苍山别名点苍山，是云岭山脉南端的主峰，东临洱海，西望黑惠江，共有雄峙嵯峨的19峰，海拔一般都在3500米以上，最高的马龙峰4122米，而我们这目标是目前能去到的一个高度，位于玉局峰和龙泉峰顶的交接处的洗马潭。</p>\n<p>等到了苍山下，刚开始还没觉得多高，因为一眼望去，感觉也就那样，也就这么高，后来等我们在导游的引领下，坐上了缆车，向山上进发，才真真切切的感受到苍山的巍峨。说到这个坐缆车，其实是坐到2500米左右的一个地方，然后再自己步行上去，到达最后一个站台后，我们一步步的向山上走去，这个时候山上已经在下着小雨了，温度也因为高度的原因下降了很多，我们慢慢的向山顶走去，我上来之前，其实挺忐忑的，因为，以前从来没体会过什么叫高原反应，后来，等我们在上到洗马潭的时候，才发现，自己的身体已经在不知道什么时候，适应了，突然有点惊喜，锻炼，真的有好处。</p>\n<p>另外，还有一个惊喜是，山上除了寒风、雨水、阶梯，那远处的风景，真的很漂亮。</p>\n<p><img src=\"/images/%E5%A4%A7%E7%90%86%E8%AE%B0%E5%BF%86/4.jpeg\" alt=\"第一次距离天空这么近\"></p>\n<p>第三天，我们的目的地是——洱海，它是云南省第二大淡水湖，长约42.58公里，东西最大宽度9.0公里，湖面面积256.5平方公里，平均湖深10米，最大湖深达20米，这是我在百度百科上面看到了，但是下午我到达洱海边上的时候，给我就一个感觉，好长，好宽，好清澈，好美。</p>\n<p><img src=\"/images/%E5%A4%A7%E7%90%86%E8%AE%B0%E5%BF%86/5.jpeg\" alt=\"洱海\"></p>\n<p>下车走到洱海上，你会情不自禁的想要张开双手，像电视剧里面一样，想好好的感受这个地方，好好的感受洱海的美丽，这个时候，你会感觉很舒服，心里面就算有什么不开心的事情也会忘掉，只想与这处美丽的地方好好的相处。心里面突然想，以前人们说的好山好水，大抵，就是指的这种地方吧。</p>\n<p>下午，回到古城，隔天回丽江，自由活动时间，本来以为没什么了，但没想到，我最后还找到了两个惊喜，一个在大理，一个在丽江。</p>\n<p><img src=\"/images/%E5%A4%A7%E7%90%86%E8%AE%B0%E5%BF%86/6.jpeg\" alt=\"瓦片烤肉\"></p>\n<p>这个是在大理古城里面，下午一个人去转的时候突然找到的，应该也算是当地的特色菜了吧，烤肉很酥脆，油而不腻，再加上一点这个辣椒，嗯~~</p>\n<p><img src=\"/images/%E5%A4%A7%E7%90%86%E8%AE%B0%E5%BF%86/7.jpeg\" alt=\"忘了名字\"></p>\n<p>第二个是在丽江，一个有点不易被发现的地方，藏着一处叫《无名小倌》的地方，老板娘人不错，也很漂亮，而且这家菜超好吃超，精致喂。</p>\n<p>应该，就这些了，本来丽江之行怎么少的了酒吧，丽江酒吧街可是出名了的，可是，当我在酒吧街上的时候，看着酒吧里面的人群，听着酒吧的音乐，突然觉得，可能还是清吧适合我，我还是喜欢清静点好。</p>\n<p>最后的最后，这次的大理之行还是很开心的，吃了很多，玩了很多，以后有机会应该还会再去的。</p>\n"},{"title":"我的大学舍友","date":"2018-03-23T12:46:25.000Z","_content":"2018年1月，距离我毕业上班已经快大半年了，兄弟们，你们还好吧。\n\n大半年了，距离我毕业，已经过去了大半年，看起来很短，可是为什么我感觉过了很久，很长一段时间，有时候回想起来都误以为已经过了几年。\n\n对于我的大学舍友，首先想起来的是我们寝室的称呼，戏说为我们寝室的“爱称”，只属于我们寝室的，很肉麻的称呼，大家呢，都以“小”开头，分别是小锦锦，小磊磊，小刀刀，小旭旭，小熠熠，还有我，小鑫鑫，一共六个人。虽然这些爱称被班上的女生吐槽过很多次，也可能不止是女生，但是我们还是很喜欢啊。\n\n还记得，开学的第一天，去见我这群即将陪伴我思念的舍友的时候，是磊哥给我开门，他呢，估计是睡了个午觉，从床上爬起来，一脸迷茫的开门，然后一脸迷茫的又躺回去，进寝室后，环顾四周，看了看我的室友们：\n\n小磊磊，有点酷酷的小伙子，哎呦，不错哦。\n\n小刀刀，靠，这小伙子好刁，不理我。\n\n小熠熠，躺床上，没看到脸。\n\n小旭旭，阳光小伙子，看起来文质彬彬的。\n\n小锦锦，社会我小锦锦，大概是这种感觉，\n\n不知道他们对我的第一印象是什么，有没有觉得我第一天没回寝室，有没有酷酷的。\n\n班上应该是我们寝室的关系最好吧，回想起来，并没有真正打过架，发生过冲突，有问题都是约一顿酒，然后借着酒劲，看着两个莫名其妙的白痴互诉衷肠，然后关系莫名其妙的就和好了。我们寝室倒是一致对外，平常也很喜欢打闹，我喜欢没事欺负小旭旭，小旭旭倒是很看得开，小磊磊喜欢和我们所有人打闹开玩笑，小刀刀比较温和，但是偶尔也会起来反抗，特别是当小旭旭跟小刀刀大闹的时候，两个人就翻天了，小锦锦感觉比我们成熟点，一般是开玩笑的认怂，偶尔看着好玩，会闹闹，小熠熠属于自己对自己的认识不够深刻的类型，我和小锦锦和小刀刀还好，小旭旭每次都会把小熠熠好好“招待”下，然后小熠熠只能认怂，唯独小磊磊不经常和他打闹，大概是知道不好惹。\n\n军训完后，我们寝室做过的第一件大事记是，我们寝室占了班委的一大部分，每个人都在班上弄了个职务。某天下午，某个教室，我们正式的开始了我们的大学生活，竞选完成，结果是，小锦锦班长，小磊磊团支书，小熠熠学习委员，小刀刀体育委员，小旭旭心理委员，我文娱委员，后面我们就这个事情吹嘘了很久。\n\n寝室里面，每个人个都喝醉过，区别只是醉过的次数，以及喝醉之后的表现。小磊磊喝醉会努力压制着清醒，压制住了就回床上打电话，压制不住就完了……小旭旭喝醉了，会直接躺床上睡，他应该是喝醉后，我们寝室唯一不发酒疯的吧，小锦锦酒量倒是挺好的，一般不喝醉，喝醉了就跟小磊磊一样，小熠熠是你不知道他醉没醉，反正喝完你看他就是趴你肩上要你带他回寝室，回到寝室，先跟不知道那个妹子打会电话，然后睡觉，一心只有妹子，我了，是假装喝不醉，一醉就看情况撒泼，这是在都是熟人的情况下，不是熟人我可不敢喝醉。说道这个喝醉，我最看不起的是小刀刀，给自己喜欢的女生表白，都只敢借着喝醉了才敢打电话，还是在我们寝室的怂恿下，还是在快毕业的时候，说起来，其实小刀刀还是很帅的，会打篮球，个子也高，身体也好，性格属于温柔，很传统的男生，爱整洁，现代三好男人啊，无奈，却很害羞，如果再大胆点，或许，大一就有女票了吧。\n\n小旭旭是我们寝室，我觉得变化最大，性格最琢磨不透的一个人，很倔，谁教人家是双子座的男生，没事喜欢人格分裂。说起小旭旭们，大一来的时候，我们寝室一致觉得是一个阳光帅气的小伙子，当你见到他，你会觉得，看着很舒服，外表文质彬彬，书生气很重，体格也很柔弱的那种，用小磊磊的话来说就是，身娇体柔易推倒的那种。可是，这都是外表啊，小旭旭们可不是这么容易被看透的，他是我们寝室，身体最好的，力气最大的，性格最倔的，他决定的事情，一般是改不了的，平时喜欢宅在寝室的，可以很长时间不出去。但是，实际上也是个很帅的小伙子啊，稍微注意和打扮一下，绝对是养眼的帅哥一枚，毕业之后，这家伙就变成兵哥哥了，不知道现在在干嘛。\n\n真的，回想起来，做过好多事情：五个人通宵在寝室打魔兽、几个寝室在我们寝室一起玩桌游、一起去公园玩、一起出去旅游、一起去撸串、一起去网吧打内战、一起去KTV嗨歌、一起去参加比赛、一起准备文艺节目……\n\n从大一到大四毕业，实际上我们在寝室就待了三年多，寝室每个人都在外面奔波了一段时间，而这段时间，现在想想，可真短，不过，还是很感谢让我遇到你们，感谢四年的陪伴，感谢四年的宽容。\n\n希望，往后归来时，我们任是少年。\n","source":"_posts/2018/我的大学舍友.md","raw":"---\ntitle: 我的大学舍友\ndate: 2018/3/23 20:46:25\ntags: [青春]\ncategory: [随笔]\n---\n2018年1月，距离我毕业上班已经快大半年了，兄弟们，你们还好吧。\n\n大半年了，距离我毕业，已经过去了大半年，看起来很短，可是为什么我感觉过了很久，很长一段时间，有时候回想起来都误以为已经过了几年。\n\n对于我的大学舍友，首先想起来的是我们寝室的称呼，戏说为我们寝室的“爱称”，只属于我们寝室的，很肉麻的称呼，大家呢，都以“小”开头，分别是小锦锦，小磊磊，小刀刀，小旭旭，小熠熠，还有我，小鑫鑫，一共六个人。虽然这些爱称被班上的女生吐槽过很多次，也可能不止是女生，但是我们还是很喜欢啊。\n\n还记得，开学的第一天，去见我这群即将陪伴我思念的舍友的时候，是磊哥给我开门，他呢，估计是睡了个午觉，从床上爬起来，一脸迷茫的开门，然后一脸迷茫的又躺回去，进寝室后，环顾四周，看了看我的室友们：\n\n小磊磊，有点酷酷的小伙子，哎呦，不错哦。\n\n小刀刀，靠，这小伙子好刁，不理我。\n\n小熠熠，躺床上，没看到脸。\n\n小旭旭，阳光小伙子，看起来文质彬彬的。\n\n小锦锦，社会我小锦锦，大概是这种感觉，\n\n不知道他们对我的第一印象是什么，有没有觉得我第一天没回寝室，有没有酷酷的。\n\n班上应该是我们寝室的关系最好吧，回想起来，并没有真正打过架，发生过冲突，有问题都是约一顿酒，然后借着酒劲，看着两个莫名其妙的白痴互诉衷肠，然后关系莫名其妙的就和好了。我们寝室倒是一致对外，平常也很喜欢打闹，我喜欢没事欺负小旭旭，小旭旭倒是很看得开，小磊磊喜欢和我们所有人打闹开玩笑，小刀刀比较温和，但是偶尔也会起来反抗，特别是当小旭旭跟小刀刀大闹的时候，两个人就翻天了，小锦锦感觉比我们成熟点，一般是开玩笑的认怂，偶尔看着好玩，会闹闹，小熠熠属于自己对自己的认识不够深刻的类型，我和小锦锦和小刀刀还好，小旭旭每次都会把小熠熠好好“招待”下，然后小熠熠只能认怂，唯独小磊磊不经常和他打闹，大概是知道不好惹。\n\n军训完后，我们寝室做过的第一件大事记是，我们寝室占了班委的一大部分，每个人都在班上弄了个职务。某天下午，某个教室，我们正式的开始了我们的大学生活，竞选完成，结果是，小锦锦班长，小磊磊团支书，小熠熠学习委员，小刀刀体育委员，小旭旭心理委员，我文娱委员，后面我们就这个事情吹嘘了很久。\n\n寝室里面，每个人个都喝醉过，区别只是醉过的次数，以及喝醉之后的表现。小磊磊喝醉会努力压制着清醒，压制住了就回床上打电话，压制不住就完了……小旭旭喝醉了，会直接躺床上睡，他应该是喝醉后，我们寝室唯一不发酒疯的吧，小锦锦酒量倒是挺好的，一般不喝醉，喝醉了就跟小磊磊一样，小熠熠是你不知道他醉没醉，反正喝完你看他就是趴你肩上要你带他回寝室，回到寝室，先跟不知道那个妹子打会电话，然后睡觉，一心只有妹子，我了，是假装喝不醉，一醉就看情况撒泼，这是在都是熟人的情况下，不是熟人我可不敢喝醉。说道这个喝醉，我最看不起的是小刀刀，给自己喜欢的女生表白，都只敢借着喝醉了才敢打电话，还是在我们寝室的怂恿下，还是在快毕业的时候，说起来，其实小刀刀还是很帅的，会打篮球，个子也高，身体也好，性格属于温柔，很传统的男生，爱整洁，现代三好男人啊，无奈，却很害羞，如果再大胆点，或许，大一就有女票了吧。\n\n小旭旭是我们寝室，我觉得变化最大，性格最琢磨不透的一个人，很倔，谁教人家是双子座的男生，没事喜欢人格分裂。说起小旭旭们，大一来的时候，我们寝室一致觉得是一个阳光帅气的小伙子，当你见到他，你会觉得，看着很舒服，外表文质彬彬，书生气很重，体格也很柔弱的那种，用小磊磊的话来说就是，身娇体柔易推倒的那种。可是，这都是外表啊，小旭旭们可不是这么容易被看透的，他是我们寝室，身体最好的，力气最大的，性格最倔的，他决定的事情，一般是改不了的，平时喜欢宅在寝室的，可以很长时间不出去。但是，实际上也是个很帅的小伙子啊，稍微注意和打扮一下，绝对是养眼的帅哥一枚，毕业之后，这家伙就变成兵哥哥了，不知道现在在干嘛。\n\n真的，回想起来，做过好多事情：五个人通宵在寝室打魔兽、几个寝室在我们寝室一起玩桌游、一起去公园玩、一起出去旅游、一起去撸串、一起去网吧打内战、一起去KTV嗨歌、一起去参加比赛、一起准备文艺节目……\n\n从大一到大四毕业，实际上我们在寝室就待了三年多，寝室每个人都在外面奔波了一段时间，而这段时间，现在想想，可真短，不过，还是很感谢让我遇到你们，感谢四年的陪伴，感谢四年的宽容。\n\n希望，往后归来时，我们任是少年。\n","slug":"2018/我的大学舍友","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglv0012g0vg0ndb0io1","content":"<p>2018年1月，距离我毕业上班已经快大半年了，兄弟们，你们还好吧。</p>\n<p>大半年了，距离我毕业，已经过去了大半年，看起来很短，可是为什么我感觉过了很久，很长一段时间，有时候回想起来都误以为已经过了几年。</p>\n<p>对于我的大学舍友，首先想起来的是我们寝室的称呼，戏说为我们寝室的“爱称”，只属于我们寝室的，很肉麻的称呼，大家呢，都以“小”开头，分别是小锦锦，小磊磊，小刀刀，小旭旭，小熠熠，还有我，小鑫鑫，一共六个人。虽然这些爱称被班上的女生吐槽过很多次，也可能不止是女生，但是我们还是很喜欢啊。</p>\n<p>还记得，开学的第一天，去见我这群即将陪伴我思念的舍友的时候，是磊哥给我开门，他呢，估计是睡了个午觉，从床上爬起来，一脸迷茫的开门，然后一脸迷茫的又躺回去，进寝室后，环顾四周，看了看我的室友们：</p>\n<p>小磊磊，有点酷酷的小伙子，哎呦，不错哦。</p>\n<p>小刀刀，靠，这小伙子好刁，不理我。</p>\n<p>小熠熠，躺床上，没看到脸。</p>\n<p>小旭旭，阳光小伙子，看起来文质彬彬的。</p>\n<p>小锦锦，社会我小锦锦，大概是这种感觉，</p>\n<p>不知道他们对我的第一印象是什么，有没有觉得我第一天没回寝室，有没有酷酷的。</p>\n<p>班上应该是我们寝室的关系最好吧，回想起来，并没有真正打过架，发生过冲突，有问题都是约一顿酒，然后借着酒劲，看着两个莫名其妙的白痴互诉衷肠，然后关系莫名其妙的就和好了。我们寝室倒是一致对外，平常也很喜欢打闹，我喜欢没事欺负小旭旭，小旭旭倒是很看得开，小磊磊喜欢和我们所有人打闹开玩笑，小刀刀比较温和，但是偶尔也会起来反抗，特别是当小旭旭跟小刀刀大闹的时候，两个人就翻天了，小锦锦感觉比我们成熟点，一般是开玩笑的认怂，偶尔看着好玩，会闹闹，小熠熠属于自己对自己的认识不够深刻的类型，我和小锦锦和小刀刀还好，小旭旭每次都会把小熠熠好好“招待”下，然后小熠熠只能认怂，唯独小磊磊不经常和他打闹，大概是知道不好惹。</p>\n<p>军训完后，我们寝室做过的第一件大事记是，我们寝室占了班委的一大部分，每个人都在班上弄了个职务。某天下午，某个教室，我们正式的开始了我们的大学生活，竞选完成，结果是，小锦锦班长，小磊磊团支书，小熠熠学习委员，小刀刀体育委员，小旭旭心理委员，我文娱委员，后面我们就这个事情吹嘘了很久。</p>\n<p>寝室里面，每个人个都喝醉过，区别只是醉过的次数，以及喝醉之后的表现。小磊磊喝醉会努力压制着清醒，压制住了就回床上打电话，压制不住就完了……小旭旭喝醉了，会直接躺床上睡，他应该是喝醉后，我们寝室唯一不发酒疯的吧，小锦锦酒量倒是挺好的，一般不喝醉，喝醉了就跟小磊磊一样，小熠熠是你不知道他醉没醉，反正喝完你看他就是趴你肩上要你带他回寝室，回到寝室，先跟不知道那个妹子打会电话，然后睡觉，一心只有妹子，我了，是假装喝不醉，一醉就看情况撒泼，这是在都是熟人的情况下，不是熟人我可不敢喝醉。说道这个喝醉，我最看不起的是小刀刀，给自己喜欢的女生表白，都只敢借着喝醉了才敢打电话，还是在我们寝室的怂恿下，还是在快毕业的时候，说起来，其实小刀刀还是很帅的，会打篮球，个子也高，身体也好，性格属于温柔，很传统的男生，爱整洁，现代三好男人啊，无奈，却很害羞，如果再大胆点，或许，大一就有女票了吧。</p>\n<p>小旭旭是我们寝室，我觉得变化最大，性格最琢磨不透的一个人，很倔，谁教人家是双子座的男生，没事喜欢人格分裂。说起小旭旭们，大一来的时候，我们寝室一致觉得是一个阳光帅气的小伙子，当你见到他，你会觉得，看着很舒服，外表文质彬彬，书生气很重，体格也很柔弱的那种，用小磊磊的话来说就是，身娇体柔易推倒的那种。可是，这都是外表啊，小旭旭们可不是这么容易被看透的，他是我们寝室，身体最好的，力气最大的，性格最倔的，他决定的事情，一般是改不了的，平时喜欢宅在寝室的，可以很长时间不出去。但是，实际上也是个很帅的小伙子啊，稍微注意和打扮一下，绝对是养眼的帅哥一枚，毕业之后，这家伙就变成兵哥哥了，不知道现在在干嘛。</p>\n<p>真的，回想起来，做过好多事情：五个人通宵在寝室打魔兽、几个寝室在我们寝室一起玩桌游、一起去公园玩、一起出去旅游、一起去撸串、一起去网吧打内战、一起去KTV嗨歌、一起去参加比赛、一起准备文艺节目……</p>\n<p>从大一到大四毕业，实际上我们在寝室就待了三年多，寝室每个人都在外面奔波了一段时间，而这段时间，现在想想，可真短，不过，还是很感谢让我遇到你们，感谢四年的陪伴，感谢四年的宽容。</p>\n<p>希望，往后归来时，我们任是少年。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>2018年1月，距离我毕业上班已经快大半年了，兄弟们，你们还好吧。</p>\n<p>大半年了，距离我毕业，已经过去了大半年，看起来很短，可是为什么我感觉过了很久，很长一段时间，有时候回想起来都误以为已经过了几年。</p>\n<p>对于我的大学舍友，首先想起来的是我们寝室的称呼，戏说为我们寝室的“爱称”，只属于我们寝室的，很肉麻的称呼，大家呢，都以“小”开头，分别是小锦锦，小磊磊，小刀刀，小旭旭，小熠熠，还有我，小鑫鑫，一共六个人。虽然这些爱称被班上的女生吐槽过很多次，也可能不止是女生，但是我们还是很喜欢啊。</p>\n<p>还记得，开学的第一天，去见我这群即将陪伴我思念的舍友的时候，是磊哥给我开门，他呢，估计是睡了个午觉，从床上爬起来，一脸迷茫的开门，然后一脸迷茫的又躺回去，进寝室后，环顾四周，看了看我的室友们：</p>\n<p>小磊磊，有点酷酷的小伙子，哎呦，不错哦。</p>\n<p>小刀刀，靠，这小伙子好刁，不理我。</p>\n<p>小熠熠，躺床上，没看到脸。</p>\n<p>小旭旭，阳光小伙子，看起来文质彬彬的。</p>\n<p>小锦锦，社会我小锦锦，大概是这种感觉，</p>\n<p>不知道他们对我的第一印象是什么，有没有觉得我第一天没回寝室，有没有酷酷的。</p>\n<p>班上应该是我们寝室的关系最好吧，回想起来，并没有真正打过架，发生过冲突，有问题都是约一顿酒，然后借着酒劲，看着两个莫名其妙的白痴互诉衷肠，然后关系莫名其妙的就和好了。我们寝室倒是一致对外，平常也很喜欢打闹，我喜欢没事欺负小旭旭，小旭旭倒是很看得开，小磊磊喜欢和我们所有人打闹开玩笑，小刀刀比较温和，但是偶尔也会起来反抗，特别是当小旭旭跟小刀刀大闹的时候，两个人就翻天了，小锦锦感觉比我们成熟点，一般是开玩笑的认怂，偶尔看着好玩，会闹闹，小熠熠属于自己对自己的认识不够深刻的类型，我和小锦锦和小刀刀还好，小旭旭每次都会把小熠熠好好“招待”下，然后小熠熠只能认怂，唯独小磊磊不经常和他打闹，大概是知道不好惹。</p>\n<p>军训完后，我们寝室做过的第一件大事记是，我们寝室占了班委的一大部分，每个人都在班上弄了个职务。某天下午，某个教室，我们正式的开始了我们的大学生活，竞选完成，结果是，小锦锦班长，小磊磊团支书，小熠熠学习委员，小刀刀体育委员，小旭旭心理委员，我文娱委员，后面我们就这个事情吹嘘了很久。</p>\n<p>寝室里面，每个人个都喝醉过，区别只是醉过的次数，以及喝醉之后的表现。小磊磊喝醉会努力压制着清醒，压制住了就回床上打电话，压制不住就完了……小旭旭喝醉了，会直接躺床上睡，他应该是喝醉后，我们寝室唯一不发酒疯的吧，小锦锦酒量倒是挺好的，一般不喝醉，喝醉了就跟小磊磊一样，小熠熠是你不知道他醉没醉，反正喝完你看他就是趴你肩上要你带他回寝室，回到寝室，先跟不知道那个妹子打会电话，然后睡觉，一心只有妹子，我了，是假装喝不醉，一醉就看情况撒泼，这是在都是熟人的情况下，不是熟人我可不敢喝醉。说道这个喝醉，我最看不起的是小刀刀，给自己喜欢的女生表白，都只敢借着喝醉了才敢打电话，还是在我们寝室的怂恿下，还是在快毕业的时候，说起来，其实小刀刀还是很帅的，会打篮球，个子也高，身体也好，性格属于温柔，很传统的男生，爱整洁，现代三好男人啊，无奈，却很害羞，如果再大胆点，或许，大一就有女票了吧。</p>\n<p>小旭旭是我们寝室，我觉得变化最大，性格最琢磨不透的一个人，很倔，谁教人家是双子座的男生，没事喜欢人格分裂。说起小旭旭们，大一来的时候，我们寝室一致觉得是一个阳光帅气的小伙子，当你见到他，你会觉得，看着很舒服，外表文质彬彬，书生气很重，体格也很柔弱的那种，用小磊磊的话来说就是，身娇体柔易推倒的那种。可是，这都是外表啊，小旭旭们可不是这么容易被看透的，他是我们寝室，身体最好的，力气最大的，性格最倔的，他决定的事情，一般是改不了的，平时喜欢宅在寝室的，可以很长时间不出去。但是，实际上也是个很帅的小伙子啊，稍微注意和打扮一下，绝对是养眼的帅哥一枚，毕业之后，这家伙就变成兵哥哥了，不知道现在在干嘛。</p>\n<p>真的，回想起来，做过好多事情：五个人通宵在寝室打魔兽、几个寝室在我们寝室一起玩桌游、一起去公园玩、一起出去旅游、一起去撸串、一起去网吧打内战、一起去KTV嗨歌、一起去参加比赛、一起准备文艺节目……</p>\n<p>从大一到大四毕业，实际上我们在寝室就待了三年多，寝室每个人都在外面奔波了一段时间，而这段时间，现在想想，可真短，不过，还是很感谢让我遇到你们，感谢四年的陪伴，感谢四年的宽容。</p>\n<p>希望，往后归来时，我们任是少年。</p>\n"},{"title":"阶段小结（三）","date":"2017-08-16T09:15:57.000Z","_content":"## 在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\n\n5月份从武汉来到杭州，上班到现在有两个多月了，期间我完成了对现有公司应用的两次重大更新，（无奈的是，第二次更新的东西我们都快做完了，结果被砍，换到小程序做去了），以及几次小的更新。\n\n最近接触比较多的是腾讯云的SDK，我们应用接入的是腾讯云的完整版，包括了点播、直播和小视频的内容，也是这个SDK有很多的坑，一个个踩过来。\n\n开始我们最先要做的是小视频的一个功能，这个接入腾讯云的SDK后，SDK里面小视频的录制需要腾讯云的一个授权的key，可是这个key还真的是贵，虽然不是我出钱，但是需要这个key，才能使用小视频的录制功能，后面的使用就简单了，腾讯云提供了录制和视频编辑的功能，录制完成后，后面的编辑功能，很好接入的。\n\n后面还要注意的一点是因为这个小视频是仿某音APP，小视频的播放，需要的是创建多个播放器，当一个播放器播放的时候，下一个播放器就要开始缓冲，准备播放了，上一个播放器继续缓冲直到小视频缓冲完成，上下滑动的时候播放器切换。\n\n后来第二次改版是为一次活动做的页面改版，里面有直播，有点播，后来发现直播和点播的的player，在SDK里面，官方说的是，之前是用的一个livPlayer，后来因为框架越做越大，为了减少livePlayer的负担，分离出了movPlayer以供点播需要，这个livePlayer功能上来说比MovPlayer强大，但是比较大，可以选择使用。\n\n后来，就是一些日常的优化和维护，后面需要自己看看视频学习下了，目前的目标是把iOS学号的基础上，学习Swift，再向Web端学习。\n\n## 附：小福利，获取View的截图\n\n以当前view 生成图片\n``` bash\n+ (UIImage *)makeImageWithView:(UIView *)view withSize:(CGSize)s\nize\n{\nUIGraphicsBeginImageContextWithOptions(size, NO, 0.0);\n[view.layer renderInContext:UIGraphicsGetCurrentContext()];\nUIImage *image = UIGraphicsGetImageFromCurrentImageContext();\nUIGraphicsEndImageContext();\nreturn image;\n}\n```\n\n以当前移动view 生成图片\n``` bash\n+ (UIImage *)makeMoveImageWithView:(UIView *)view withSize:(CGSi\nze)size\n{\nUIGraphicsBeginImageContext(view.frame.size);\n[view drawViewHierarchyInRect:view.bounds afterScreenUpdates\n:NO];\nUIImage *image = UIGraphicsGetImageFromCurrentImageContext();\nUIGraphicsEndImageContext();\nreturn image;\n}\n```\n","source":"_posts/2018/阶段小结（三）.md","raw":"---\ntitle: 阶段小结（三）\ndate: 2017-08-16 17:15:57\ntags: [技术,总结,iOS]\ncategory: [小结]\n---\n## 在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\n\n5月份从武汉来到杭州，上班到现在有两个多月了，期间我完成了对现有公司应用的两次重大更新，（无奈的是，第二次更新的东西我们都快做完了，结果被砍，换到小程序做去了），以及几次小的更新。\n\n最近接触比较多的是腾讯云的SDK，我们应用接入的是腾讯云的完整版，包括了点播、直播和小视频的内容，也是这个SDK有很多的坑，一个个踩过来。\n\n开始我们最先要做的是小视频的一个功能，这个接入腾讯云的SDK后，SDK里面小视频的录制需要腾讯云的一个授权的key，可是这个key还真的是贵，虽然不是我出钱，但是需要这个key，才能使用小视频的录制功能，后面的使用就简单了，腾讯云提供了录制和视频编辑的功能，录制完成后，后面的编辑功能，很好接入的。\n\n后面还要注意的一点是因为这个小视频是仿某音APP，小视频的播放，需要的是创建多个播放器，当一个播放器播放的时候，下一个播放器就要开始缓冲，准备播放了，上一个播放器继续缓冲直到小视频缓冲完成，上下滑动的时候播放器切换。\n\n后来第二次改版是为一次活动做的页面改版，里面有直播，有点播，后来发现直播和点播的的player，在SDK里面，官方说的是，之前是用的一个livPlayer，后来因为框架越做越大，为了减少livePlayer的负担，分离出了movPlayer以供点播需要，这个livePlayer功能上来说比MovPlayer强大，但是比较大，可以选择使用。\n\n后来，就是一些日常的优化和维护，后面需要自己看看视频学习下了，目前的目标是把iOS学号的基础上，学习Swift，再向Web端学习。\n\n## 附：小福利，获取View的截图\n\n以当前view 生成图片\n``` bash\n+ (UIImage *)makeImageWithView:(UIView *)view withSize:(CGSize)s\nize\n{\nUIGraphicsBeginImageContextWithOptions(size, NO, 0.0);\n[view.layer renderInContext:UIGraphicsGetCurrentContext()];\nUIImage *image = UIGraphicsGetImageFromCurrentImageContext();\nUIGraphicsEndImageContext();\nreturn image;\n}\n```\n\n以当前移动view 生成图片\n``` bash\n+ (UIImage *)makeMoveImageWithView:(UIView *)view withSize:(CGSi\nze)size\n{\nUIGraphicsBeginImageContext(view.frame.size);\n[view drawViewHierarchyInRect:view.bounds afterScreenUpdates\n:NO];\nUIImage *image = UIGraphicsGetImageFromCurrentImageContext();\nUIGraphicsEndImageContext();\nreturn image;\n}\n```\n","slug":"2018/阶段小结（三）","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglw0017g0vgc5w4291e","content":"<h2 id=\"在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\"><a href=\"#在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\" class=\"headerlink\" title=\"在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\"></a>在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。</h2><p>5月份从武汉来到杭州，上班到现在有两个多月了，期间我完成了对现有公司应用的两次重大更新，（无奈的是，第二次更新的东西我们都快做完了，结果被砍，换到小程序做去了），以及几次小的更新。</p>\n<p>最近接触比较多的是腾讯云的SDK，我们应用接入的是腾讯云的完整版，包括了点播、直播和小视频的内容，也是这个SDK有很多的坑，一个个踩过来。</p>\n<p>开始我们最先要做的是小视频的一个功能，这个接入腾讯云的SDK后，SDK里面小视频的录制需要腾讯云的一个授权的key，可是这个key还真的是贵，虽然不是我出钱，但是需要这个key，才能使用小视频的录制功能，后面的使用就简单了，腾讯云提供了录制和视频编辑的功能，录制完成后，后面的编辑功能，很好接入的。</p>\n<p>后面还要注意的一点是因为这个小视频是仿某音APP，小视频的播放，需要的是创建多个播放器，当一个播放器播放的时候，下一个播放器就要开始缓冲，准备播放了，上一个播放器继续缓冲直到小视频缓冲完成，上下滑动的时候播放器切换。</p>\n<p>后来第二次改版是为一次活动做的页面改版，里面有直播，有点播，后来发现直播和点播的的player，在SDK里面，官方说的是，之前是用的一个livPlayer，后来因为框架越做越大，为了减少livePlayer的负担，分离出了movPlayer以供点播需要，这个livePlayer功能上来说比MovPlayer强大，但是比较大，可以选择使用。</p>\n<p>后来，就是一些日常的优化和维护，后面需要自己看看视频学习下了，目前的目标是把iOS学号的基础上，学习Swift，再向Web端学习。</p>\n<h2 id=\"附：小福利，获取View的截图\"><a href=\"#附：小福利，获取View的截图\" class=\"headerlink\" title=\"附：小福利，获取View的截图\"></a>附：小福利，获取View的截图</h2><p>以当前view 生成图片</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (UIImage *)makeImageWithView:(UIView *)view withSize:(CGSize)s</span><br><span class=\"line\">ize</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">UIGraphicsBeginImageContextWithOptions(size, NO, 0.0);</span><br><span class=\"line\">[view.layer renderInContext:UIGraphicsGetCurrentContext()];</span><br><span class=\"line\">UIImage *image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">UIGraphicsEndImageContext();</span><br><span class=\"line\"><span class=\"built_in\">return</span> image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以当前移动view 生成图片</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (UIImage *)makeMoveImageWithView:(UIView *)view withSize:(CGSi</span><br><span class=\"line\">ze)size</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">UIGraphicsBeginImageContext(view.frame.size);</span><br><span class=\"line\">[view drawViewHierarchyInRect:view.bounds afterScreenUpdates</span><br><span class=\"line\">:NO];</span><br><span class=\"line\">UIImage *image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">UIGraphicsEndImageContext();</span><br><span class=\"line\"><span class=\"built_in\">return</span> image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\"><a href=\"#在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\" class=\"headerlink\" title=\"在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。\"></a>在这里面，我不会讲什么科普内容，我只会讲我知道的街舞。</h2><p>5月份从武汉来到杭州，上班到现在有两个多月了，期间我完成了对现有公司应用的两次重大更新，（无奈的是，第二次更新的东西我们都快做完了，结果被砍，换到小程序做去了），以及几次小的更新。</p>\n<p>最近接触比较多的是腾讯云的SDK，我们应用接入的是腾讯云的完整版，包括了点播、直播和小视频的内容，也是这个SDK有很多的坑，一个个踩过来。</p>\n<p>开始我们最先要做的是小视频的一个功能，这个接入腾讯云的SDK后，SDK里面小视频的录制需要腾讯云的一个授权的key，可是这个key还真的是贵，虽然不是我出钱，但是需要这个key，才能使用小视频的录制功能，后面的使用就简单了，腾讯云提供了录制和视频编辑的功能，录制完成后，后面的编辑功能，很好接入的。</p>\n<p>后面还要注意的一点是因为这个小视频是仿某音APP，小视频的播放，需要的是创建多个播放器，当一个播放器播放的时候，下一个播放器就要开始缓冲，准备播放了，上一个播放器继续缓冲直到小视频缓冲完成，上下滑动的时候播放器切换。</p>\n<p>后来第二次改版是为一次活动做的页面改版，里面有直播，有点播，后来发现直播和点播的的player，在SDK里面，官方说的是，之前是用的一个livPlayer，后来因为框架越做越大，为了减少livePlayer的负担，分离出了movPlayer以供点播需要，这个livePlayer功能上来说比MovPlayer强大，但是比较大，可以选择使用。</p>\n<p>后来，就是一些日常的优化和维护，后面需要自己看看视频学习下了，目前的目标是把iOS学号的基础上，学习Swift，再向Web端学习。</p>\n<h2 id=\"附：小福利，获取View的截图\"><a href=\"#附：小福利，获取View的截图\" class=\"headerlink\" title=\"附：小福利，获取View的截图\"></a>附：小福利，获取View的截图</h2><p>以当前view 生成图片</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (UIImage *)makeImageWithView:(UIView *)view withSize:(CGSize)s</span><br><span class=\"line\">ize</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">UIGraphicsBeginImageContextWithOptions(size, NO, 0.0);</span><br><span class=\"line\">[view.layer renderInContext:UIGraphicsGetCurrentContext()];</span><br><span class=\"line\">UIImage *image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">UIGraphicsEndImageContext();</span><br><span class=\"line\"><span class=\"built_in\">return</span> image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以当前移动view 生成图片</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ (UIImage *)makeMoveImageWithView:(UIView *)view withSize:(CGSi</span><br><span class=\"line\">ze)size</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">UIGraphicsBeginImageContext(view.frame.size);</span><br><span class=\"line\">[view drawViewHierarchyInRect:view.bounds afterScreenUpdates</span><br><span class=\"line\">:NO];</span><br><span class=\"line\">UIImage *image = UIGraphicsGetImageFromCurrentImageContext();</span><br><span class=\"line\">UIGraphicsEndImageContext();</span><br><span class=\"line\"><span class=\"built_in\">return</span> image;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"iOS之静态库生成","date":"2023-07-11T09:04:36.000Z","_content":"\n最近在公司接手了主要项目，做了公司自己SDK库的开发，也大概总结了一些步骤，就此记录下，另外，先介绍下静态库：\n\n```\n关键特点：\n\n编译时链接： 静态库在编译时被完全链接到应用程序中。这意味着库的代码被复制到应用程序的可执行文件中，使得应用程序在运行时不再依赖于原始的库文件。\n\n独立性： 由于静态库在编译时被嵌入到应用程序中，应用程序在其他系统上运行时无需依赖外部库的存在。这增加了应用程序的独立性和可移植性。\n\n多语言支持： 静态库通常可以用于多种编程语言，只要它们符合相应的二进制接口（ABI）。这使得开发者能够在不同的语言中共享和重用代码。\n\n快速执行： 由于静态库的代码被直接嵌入到应用程序中，其执行速度可能比动态库稍快，因为无需在运行时进行额外的加载和链接操作。\n\n使用场景：\n\n模块化开发： 静态库促进了代码的模块化和重用，允许开发者将常用的功能打包成库，方便在不同项目中共享。\n\n独立发布： 开发者可以将自己的功能或工具以静态库的形式发布，供其他开发者集成到他们的应用程序中。\n\n性能优化： 静态库的使用可以在一定程度上提高应用程序的性能，尤其是对于小型项目或特定场景。\n\n```\n\n静态库搭建，并且上传到pod，主要分为以下几步：\n1.创建项目；\n2.编写代码；\n3.构建静态库；\n4.查找库文件；\n5.创建podspec文件；\n6.提交到GitHub\n7.发布到CocoaPods\n\n### 1.创建项目\n\n首先，我们要打开Xcode，并创建了一个新的项目。在项目模板选择界面，注意要选择了\"Framework & Library\"，然后点击\"Static Library\"。这样就创建了一个静态库的项目。\n\n### 2.编写代码\n\n接下来就是正常的编写自己项目的代码，并且调试，注意这里既然时一个库的话，就要好好注意下规范，可复用性，代码安全等东西。\n\n\n### 3.构建静态库\n\n完成代码编写后，在xcode中，选择项目的 scheme，并将设备设置为“Generic iOS Device”。然后，点击 Xcode 的 Product -> Build 功能来构建静态库。\n\n### 4.查找库文件\n\n构建成功后，前往Xcode的DerivedData目录中查找生成的静态库文件。通常情况下，它们位于`~/Library/Developer/Xcode/DerivedData/YourLibrary-xxxx/Build/Products/Debug-iphoneos/YourLibrary.a`路径下。\n\n### 5.创建podspec文件\n\n接下来，在项目的根目录创建了一个`.podspec`文件。这个文件包含了有关我的库的信息，例如名称、版本、作者等，并指定了静态库文件的路径。\n\n```ruby\nPod::Spec.new do |s|\n  s.name         = 'YourLibrary'\n  s.version      = '1.0.0'\n  s.summary      = 'A brief description of YourLibrary.'\n  s.homepage     = 'https://github.com/yourusername/YourLibrary'\n  s.license      = { :type => 'MIT', :file => 'LICENSE' }\n  s.author       = { 'Your Name' => 'youremail@example.com' }\n  s.source       = { :git => 'https://github.com/yourusername/YourLibrary.git', :tag => s.version.to_s }\n\n  s.ios.deployment_target = '12.0'\n\n  s.source_files  = 'YourLibrary/**/*.swift' # 调整以符合你的文件结构\n  s.public_header_files = 'YourLibrary/**/*.h' # 调整以符合你的文件结构\n\n  s.frameworks = 'UIKit' # 如果你的库需要，添加框架\n\n  # 这里可以添加其他规格，比如依赖项\n\nend\n```\n\n### 6.提交到仓库\n\n将项目提交到了GitHub或类似的代码仓库，要检查下`.podspec`文件也包含在其中。\n\n### 7.发布到CocoaPods\n\n最后，运行以下命令将我的库发布到了CocoaPods：\n\n```bash\npod trunk register your@email.com 'Your Name' --description='Your description'\npod trunk push YourLibrary.podspec\n```\n\n到这里为止，其他人就可以通过在他们的项目中添加`pod 'YourLibrary'`来下载和使用我们的第三方库了。\n\n大概就是这些，整体梳理下来的大概流程，具体实践中肯定还会遇到很多问题，就要自己一个个解决了。","source":"_posts/2023/iOS之静态库生成.md","raw":"---\ntitle: iOS之静态库生成\ndate: 2023-07-11 17:04:36\ntags: [iOS]\ncategory: [iOS]\n---\n\n最近在公司接手了主要项目，做了公司自己SDK库的开发，也大概总结了一些步骤，就此记录下，另外，先介绍下静态库：\n\n```\n关键特点：\n\n编译时链接： 静态库在编译时被完全链接到应用程序中。这意味着库的代码被复制到应用程序的可执行文件中，使得应用程序在运行时不再依赖于原始的库文件。\n\n独立性： 由于静态库在编译时被嵌入到应用程序中，应用程序在其他系统上运行时无需依赖外部库的存在。这增加了应用程序的独立性和可移植性。\n\n多语言支持： 静态库通常可以用于多种编程语言，只要它们符合相应的二进制接口（ABI）。这使得开发者能够在不同的语言中共享和重用代码。\n\n快速执行： 由于静态库的代码被直接嵌入到应用程序中，其执行速度可能比动态库稍快，因为无需在运行时进行额外的加载和链接操作。\n\n使用场景：\n\n模块化开发： 静态库促进了代码的模块化和重用，允许开发者将常用的功能打包成库，方便在不同项目中共享。\n\n独立发布： 开发者可以将自己的功能或工具以静态库的形式发布，供其他开发者集成到他们的应用程序中。\n\n性能优化： 静态库的使用可以在一定程度上提高应用程序的性能，尤其是对于小型项目或特定场景。\n\n```\n\n静态库搭建，并且上传到pod，主要分为以下几步：\n1.创建项目；\n2.编写代码；\n3.构建静态库；\n4.查找库文件；\n5.创建podspec文件；\n6.提交到GitHub\n7.发布到CocoaPods\n\n### 1.创建项目\n\n首先，我们要打开Xcode，并创建了一个新的项目。在项目模板选择界面，注意要选择了\"Framework & Library\"，然后点击\"Static Library\"。这样就创建了一个静态库的项目。\n\n### 2.编写代码\n\n接下来就是正常的编写自己项目的代码，并且调试，注意这里既然时一个库的话，就要好好注意下规范，可复用性，代码安全等东西。\n\n\n### 3.构建静态库\n\n完成代码编写后，在xcode中，选择项目的 scheme，并将设备设置为“Generic iOS Device”。然后，点击 Xcode 的 Product -> Build 功能来构建静态库。\n\n### 4.查找库文件\n\n构建成功后，前往Xcode的DerivedData目录中查找生成的静态库文件。通常情况下，它们位于`~/Library/Developer/Xcode/DerivedData/YourLibrary-xxxx/Build/Products/Debug-iphoneos/YourLibrary.a`路径下。\n\n### 5.创建podspec文件\n\n接下来，在项目的根目录创建了一个`.podspec`文件。这个文件包含了有关我的库的信息，例如名称、版本、作者等，并指定了静态库文件的路径。\n\n```ruby\nPod::Spec.new do |s|\n  s.name         = 'YourLibrary'\n  s.version      = '1.0.0'\n  s.summary      = 'A brief description of YourLibrary.'\n  s.homepage     = 'https://github.com/yourusername/YourLibrary'\n  s.license      = { :type => 'MIT', :file => 'LICENSE' }\n  s.author       = { 'Your Name' => 'youremail@example.com' }\n  s.source       = { :git => 'https://github.com/yourusername/YourLibrary.git', :tag => s.version.to_s }\n\n  s.ios.deployment_target = '12.0'\n\n  s.source_files  = 'YourLibrary/**/*.swift' # 调整以符合你的文件结构\n  s.public_header_files = 'YourLibrary/**/*.h' # 调整以符合你的文件结构\n\n  s.frameworks = 'UIKit' # 如果你的库需要，添加框架\n\n  # 这里可以添加其他规格，比如依赖项\n\nend\n```\n\n### 6.提交到仓库\n\n将项目提交到了GitHub或类似的代码仓库，要检查下`.podspec`文件也包含在其中。\n\n### 7.发布到CocoaPods\n\n最后，运行以下命令将我的库发布到了CocoaPods：\n\n```bash\npod trunk register your@email.com 'Your Name' --description='Your description'\npod trunk push YourLibrary.podspec\n```\n\n到这里为止，其他人就可以通过在他们的项目中添加`pod 'YourLibrary'`来下载和使用我们的第三方库了。\n\n大概就是这些，整体梳理下来的大概流程，具体实践中肯定还会遇到很多问题，就要自己一个个解决了。","slug":"2023/iOS之静态库生成","published":1,"updated":"2024-02-26T08:19:48.889Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglw0019g0vg2r2x68y6","content":"<p>最近在公司接手了主要项目，做了公司自己SDK库的开发，也大概总结了一些步骤，就此记录下，另外，先介绍下静态库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关键特点：</span><br><span class=\"line\"></span><br><span class=\"line\">编译时链接： 静态库在编译时被完全链接到应用程序中。这意味着库的代码被复制到应用程序的可执行文件中，使得应用程序在运行时不再依赖于原始的库文件。</span><br><span class=\"line\"></span><br><span class=\"line\">独立性： 由于静态库在编译时被嵌入到应用程序中，应用程序在其他系统上运行时无需依赖外部库的存在。这增加了应用程序的独立性和可移植性。</span><br><span class=\"line\"></span><br><span class=\"line\">多语言支持： 静态库通常可以用于多种编程语言，只要它们符合相应的二进制接口（ABI）。这使得开发者能够在不同的语言中共享和重用代码。</span><br><span class=\"line\"></span><br><span class=\"line\">快速执行： 由于静态库的代码被直接嵌入到应用程序中，其执行速度可能比动态库稍快，因为无需在运行时进行额外的加载和链接操作。</span><br><span class=\"line\"></span><br><span class=\"line\">使用场景：</span><br><span class=\"line\"></span><br><span class=\"line\">模块化开发： 静态库促进了代码的模块化和重用，允许开发者将常用的功能打包成库，方便在不同项目中共享。</span><br><span class=\"line\"></span><br><span class=\"line\">独立发布： 开发者可以将自己的功能或工具以静态库的形式发布，供其他开发者集成到他们的应用程序中。</span><br><span class=\"line\"></span><br><span class=\"line\">性能优化： 静态库的使用可以在一定程度上提高应用程序的性能，尤其是对于小型项目或特定场景。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>静态库搭建，并且上传到pod，主要分为以下几步：<br>1.创建项目；<br>2.编写代码；<br>3.构建静态库；<br>4.查找库文件；<br>5.创建podspec文件；<br>6.提交到GitHub<br>7.发布到CocoaPods</p>\n<h3 id=\"1-创建项目\"><a href=\"#1-创建项目\" class=\"headerlink\" title=\"1.创建项目\"></a>1.创建项目</h3><p>首先，我们要打开Xcode，并创建了一个新的项目。在项目模板选择界面，注意要选择了”Framework &amp; Library”，然后点击”Static Library”。这样就创建了一个静态库的项目。</p>\n<h3 id=\"2-编写代码\"><a href=\"#2-编写代码\" class=\"headerlink\" title=\"2.编写代码\"></a>2.编写代码</h3><p>接下来就是正常的编写自己项目的代码，并且调试，注意这里既然时一个库的话，就要好好注意下规范，可复用性，代码安全等东西。</p>\n<h3 id=\"3-构建静态库\"><a href=\"#3-构建静态库\" class=\"headerlink\" title=\"3.构建静态库\"></a>3.构建静态库</h3><p>完成代码编写后，在xcode中，选择项目的 scheme，并将设备设置为“Generic iOS Device”。然后，点击 Xcode 的 Product -&gt; Build 功能来构建静态库。</p>\n<h3 id=\"4-查找库文件\"><a href=\"#4-查找库文件\" class=\"headerlink\" title=\"4.查找库文件\"></a>4.查找库文件</h3><p>构建成功后，前往Xcode的DerivedData目录中查找生成的静态库文件。通常情况下，它们位于<code>~/Library/Developer/Xcode/DerivedData/YourLibrary-xxxx/Build/Products/Debug-iphoneos/YourLibrary.a</code>路径下。</p>\n<h3 id=\"5-创建podspec文件\"><a href=\"#5-创建podspec文件\" class=\"headerlink\" title=\"5.创建podspec文件\"></a>5.创建podspec文件</h3><p>接下来，在项目的根目录创建了一个<code>.podspec</code>文件。这个文件包含了有关我的库的信息，例如名称、版本、作者等，并指定了静态库文件的路径。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new <span class=\"keyword\">do</span> <span class=\"params\">|s|</span></span><br><span class=\"line\">  s.name         = <span class=\"string\">&#x27;YourLibrary&#x27;</span></span><br><span class=\"line\">  s.version      = <span class=\"string\">&#x27;1.0.0&#x27;</span></span><br><span class=\"line\">  s.summary      = <span class=\"string\">&#x27;A brief description of YourLibrary.&#x27;</span></span><br><span class=\"line\">  s.homepage     = <span class=\"string\">&#x27;https://github.com/yourusername/YourLibrary&#x27;</span></span><br><span class=\"line\">  s.license      = &#123; <span class=\"symbol\">:type</span> =&gt; <span class=\"string\">&#x27;MIT&#x27;</span>, <span class=\"symbol\">:file</span> =&gt; <span class=\"string\">&#x27;LICENSE&#x27;</span> &#125;</span><br><span class=\"line\">  s.author       = &#123; <span class=\"string\">&#x27;Your Name&#x27;</span> =&gt; <span class=\"string\">&#x27;youremail@example.com&#x27;</span> &#125;</span><br><span class=\"line\">  s.source       = &#123; <span class=\"symbol\">:git</span> =&gt; <span class=\"string\">&#x27;https://github.com/yourusername/YourLibrary.git&#x27;</span>, <span class=\"symbol\">:tag</span> =&gt; s.version.to_s &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  s.ios.deployment_target = <span class=\"string\">&#x27;12.0&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  s.source_files  = <span class=\"string\">&#x27;YourLibrary/**/*.swift&#x27;</span> <span class=\"comment\"># 调整以符合你的文件结构</span></span><br><span class=\"line\">  s.public_header_files = <span class=\"string\">&#x27;YourLibrary/**/*.h&#x27;</span> <span class=\"comment\"># 调整以符合你的文件结构</span></span><br><span class=\"line\"></span><br><span class=\"line\">  s.frameworks = <span class=\"string\">&#x27;UIKit&#x27;</span> <span class=\"comment\"># 如果你的库需要，添加框架</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 这里可以添加其他规格，比如依赖项</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-提交到仓库\"><a href=\"#6-提交到仓库\" class=\"headerlink\" title=\"6.提交到仓库\"></a>6.提交到仓库</h3><p>将项目提交到了GitHub或类似的代码仓库，要检查下<code>.podspec</code>文件也包含在其中。</p>\n<h3 id=\"7-发布到CocoaPods\"><a href=\"#7-发布到CocoaPods\" class=\"headerlink\" title=\"7.发布到CocoaPods\"></a>7.发布到CocoaPods</h3><p>最后，运行以下命令将我的库发布到了CocoaPods：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk register your@email.com <span class=\"string\">&#x27;Your Name&#x27;</span> --description=<span class=\"string\">&#x27;Your description&#x27;</span></span><br><span class=\"line\">pod trunk push YourLibrary.podspec</span><br></pre></td></tr></table></figure>\n\n<p>到这里为止，其他人就可以通过在他们的项目中添加<code>pod &#39;YourLibrary&#39;</code>来下载和使用我们的第三方库了。</p>\n<p>大概就是这些，整体梳理下来的大概流程，具体实践中肯定还会遇到很多问题，就要自己一个个解决了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在公司接手了主要项目，做了公司自己SDK库的开发，也大概总结了一些步骤，就此记录下，另外，先介绍下静态库：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">关键特点：</span><br><span class=\"line\"></span><br><span class=\"line\">编译时链接： 静态库在编译时被完全链接到应用程序中。这意味着库的代码被复制到应用程序的可执行文件中，使得应用程序在运行时不再依赖于原始的库文件。</span><br><span class=\"line\"></span><br><span class=\"line\">独立性： 由于静态库在编译时被嵌入到应用程序中，应用程序在其他系统上运行时无需依赖外部库的存在。这增加了应用程序的独立性和可移植性。</span><br><span class=\"line\"></span><br><span class=\"line\">多语言支持： 静态库通常可以用于多种编程语言，只要它们符合相应的二进制接口（ABI）。这使得开发者能够在不同的语言中共享和重用代码。</span><br><span class=\"line\"></span><br><span class=\"line\">快速执行： 由于静态库的代码被直接嵌入到应用程序中，其执行速度可能比动态库稍快，因为无需在运行时进行额外的加载和链接操作。</span><br><span class=\"line\"></span><br><span class=\"line\">使用场景：</span><br><span class=\"line\"></span><br><span class=\"line\">模块化开发： 静态库促进了代码的模块化和重用，允许开发者将常用的功能打包成库，方便在不同项目中共享。</span><br><span class=\"line\"></span><br><span class=\"line\">独立发布： 开发者可以将自己的功能或工具以静态库的形式发布，供其他开发者集成到他们的应用程序中。</span><br><span class=\"line\"></span><br><span class=\"line\">性能优化： 静态库的使用可以在一定程度上提高应用程序的性能，尤其是对于小型项目或特定场景。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>静态库搭建，并且上传到pod，主要分为以下几步：<br>1.创建项目；<br>2.编写代码；<br>3.构建静态库；<br>4.查找库文件；<br>5.创建podspec文件；<br>6.提交到GitHub<br>7.发布到CocoaPods</p>\n<h3 id=\"1-创建项目\"><a href=\"#1-创建项目\" class=\"headerlink\" title=\"1.创建项目\"></a>1.创建项目</h3><p>首先，我们要打开Xcode，并创建了一个新的项目。在项目模板选择界面，注意要选择了”Framework &amp; Library”，然后点击”Static Library”。这样就创建了一个静态库的项目。</p>\n<h3 id=\"2-编写代码\"><a href=\"#2-编写代码\" class=\"headerlink\" title=\"2.编写代码\"></a>2.编写代码</h3><p>接下来就是正常的编写自己项目的代码，并且调试，注意这里既然时一个库的话，就要好好注意下规范，可复用性，代码安全等东西。</p>\n<h3 id=\"3-构建静态库\"><a href=\"#3-构建静态库\" class=\"headerlink\" title=\"3.构建静态库\"></a>3.构建静态库</h3><p>完成代码编写后，在xcode中，选择项目的 scheme，并将设备设置为“Generic iOS Device”。然后，点击 Xcode 的 Product -&gt; Build 功能来构建静态库。</p>\n<h3 id=\"4-查找库文件\"><a href=\"#4-查找库文件\" class=\"headerlink\" title=\"4.查找库文件\"></a>4.查找库文件</h3><p>构建成功后，前往Xcode的DerivedData目录中查找生成的静态库文件。通常情况下，它们位于<code>~/Library/Developer/Xcode/DerivedData/YourLibrary-xxxx/Build/Products/Debug-iphoneos/YourLibrary.a</code>路径下。</p>\n<h3 id=\"5-创建podspec文件\"><a href=\"#5-创建podspec文件\" class=\"headerlink\" title=\"5.创建podspec文件\"></a>5.创建podspec文件</h3><p>接下来，在项目的根目录创建了一个<code>.podspec</code>文件。这个文件包含了有关我的库的信息，例如名称、版本、作者等，并指定了静态库文件的路径。</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pod::Spec.new <span class=\"keyword\">do</span> <span class=\"params\">|s|</span></span><br><span class=\"line\">  s.name         = <span class=\"string\">&#x27;YourLibrary&#x27;</span></span><br><span class=\"line\">  s.version      = <span class=\"string\">&#x27;1.0.0&#x27;</span></span><br><span class=\"line\">  s.summary      = <span class=\"string\">&#x27;A brief description of YourLibrary.&#x27;</span></span><br><span class=\"line\">  s.homepage     = <span class=\"string\">&#x27;https://github.com/yourusername/YourLibrary&#x27;</span></span><br><span class=\"line\">  s.license      = &#123; <span class=\"symbol\">:type</span> =&gt; <span class=\"string\">&#x27;MIT&#x27;</span>, <span class=\"symbol\">:file</span> =&gt; <span class=\"string\">&#x27;LICENSE&#x27;</span> &#125;</span><br><span class=\"line\">  s.author       = &#123; <span class=\"string\">&#x27;Your Name&#x27;</span> =&gt; <span class=\"string\">&#x27;youremail@example.com&#x27;</span> &#125;</span><br><span class=\"line\">  s.source       = &#123; <span class=\"symbol\">:git</span> =&gt; <span class=\"string\">&#x27;https://github.com/yourusername/YourLibrary.git&#x27;</span>, <span class=\"symbol\">:tag</span> =&gt; s.version.to_s &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  s.ios.deployment_target = <span class=\"string\">&#x27;12.0&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  s.source_files  = <span class=\"string\">&#x27;YourLibrary/**/*.swift&#x27;</span> <span class=\"comment\"># 调整以符合你的文件结构</span></span><br><span class=\"line\">  s.public_header_files = <span class=\"string\">&#x27;YourLibrary/**/*.h&#x27;</span> <span class=\"comment\"># 调整以符合你的文件结构</span></span><br><span class=\"line\"></span><br><span class=\"line\">  s.frameworks = <span class=\"string\">&#x27;UIKit&#x27;</span> <span class=\"comment\"># 如果你的库需要，添加框架</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># 这里可以添加其他规格，比如依赖项</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-提交到仓库\"><a href=\"#6-提交到仓库\" class=\"headerlink\" title=\"6.提交到仓库\"></a>6.提交到仓库</h3><p>将项目提交到了GitHub或类似的代码仓库，要检查下<code>.podspec</code>文件也包含在其中。</p>\n<h3 id=\"7-发布到CocoaPods\"><a href=\"#7-发布到CocoaPods\" class=\"headerlink\" title=\"7.发布到CocoaPods\"></a>7.发布到CocoaPods</h3><p>最后，运行以下命令将我的库发布到了CocoaPods：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod trunk register your@email.com <span class=\"string\">&#x27;Your Name&#x27;</span> --description=<span class=\"string\">&#x27;Your description&#x27;</span></span><br><span class=\"line\">pod trunk push YourLibrary.podspec</span><br></pre></td></tr></table></figure>\n\n<p>到这里为止，其他人就可以通过在他们的项目中添加<code>pod &#39;YourLibrary&#39;</code>来下载和使用我们的第三方库了。</p>\n<p>大概就是这些，整体梳理下来的大概流程，具体实践中肯定还会遇到很多问题，就要自己一个个解决了。</p>\n"},{"title":"SwiftUI之登陆界面","date":"2021-01-19T06:23:08.000Z","_content":"\n昨天捣鼓了下新出的SwiftUI的使用，绘制了一个登陆页面，但是在做登陆完成跳转的时候犯了难，网上介绍的都是利用NavigationView或者NavigationLink进行页面的跳转，但是，在登陆页面的时候，将登陆页面做成根页面进行跳转，总觉得很奇怪，虽然按着方法push跳转后返回按钮能隐藏掉，但是，在栈里面，根页面还是存在了，并且是登陆页面，所以想用一下其他的方法，于是找到了一个利用ObservableObject协议来实现重绘View的一个方法。\n\n那，我们的目标就来了，需求就是：\n\n1.在登陆页面登陆成功时，直接跳转到首页，不用push的方式去跳转；\n2.后续进行push跳转时，根页面是首页；\n3.用户已经登陆，再进入APP时，直接到首页；\n\n\n方法是：\n\n在首页和登陆页面之前有一个父View，App显示的根View也是他，他来根据某一个值，来判断是现实登陆页面还是首页，也或者在登陆页面实现跳转。\n\n\n步骤是：\n\n1.利用ObservableObject协议，定义一个控制绘制页面的类\n\n```\n\nclass CenterLogin: ObservableObject {\n    //是否跳转到首页\n    @Published var isLogin = false\n    \n    func toLogin()  {\n        self.isLogin = true\n    }\n}\n\n\n```\n\n在这个类里面有一个控制是绘制登陆页面还是首页的属性“isLogin”，当为false的时候，到登陆页面，当为true的时候到首页。\n\n2.定义登陆页面的View和首页的View\n\n```\n\n//登陆页\nstruct LoginPage: View {\n    \n    //用户账号\n    @State private var userName: String = \"\"\n    //用户米密码\n    @State private var userPassWord: String = \"\"\n    \n    //持有一个跳转控制器\n    @ObservedObject var loginCenter : CenterLogin\n    \n    @State var isActive = false\n    let detail = HomePage()\n    \n    var body: some View {\n        \n        VStack {\n            HStack{\n                \n                Label(\"账号：\", systemImage: \"\")\n                TextField(\"请输入账号：\", text: $userName)\n                \n            }\n            .padding(EdgeInsets(top: 10, leading: 20, bottom: 10, trailing: 20))\n            \n            \n            HStack{\n                \n                Label(\"密码：\", systemImage: \"\")\n                TextField(\"请输入密码：\", text: $userPassWord)\n                \n            }\n            .padding(EdgeInsets(top: 10, leading: 20, bottom: 10, trailing: 20))\n            \n            Button(action: ({\n                //前往首页\n                self.loginCenter.toLogin()\n                \n            }), label: {\n                Text(\"登陆\")\n                    .accentColor(.blue)\n                \n            })\n            .padding(.top)\n            \n            \n            \n        }\n        \n        \n    }\n    \n}\n\n//首页\nstruct HomePage: View {\n    \n    var body: some View {\n        \n        TabView{\n            \n            Text(\"Tab1\")\n                \n                .tabItem {\n                    \n                    Image(systemName: \"1.square.fill\")\n                    \n                    Text(\"First\")\n                    \n                }\n            \n            Text(\"Tab2\")\n                \n                .tabItem {\n                    \n                    Image(systemName: \"2.square.fill\")\n                    \n                    Text(\"Second\")\n                    \n                }\n            \n            Text(\"Tab3\")\n                \n                .tabItem {\n                    \n                    Image(systemName: \"3.square.fill\")\n                    \n                    Text(\"Third\")\n                    \n                }\n            \n            Text(\"Tab4\")\n                \n                .tabItem {\n                    \n                    Image(systemName: \"4.square.fill\")\n                    \n                    Text(\"four\")\n                    \n                }\n            \n        }\n        \n    }\n    \n}\n\n\n```\n\n在登陆页面，需要持有一个父View传进来的绘制控制器，也就是我们定义的“CenterLogin”类，因为我们需要在用户登陆成功的时候，调用这个类的方法，给\"isLogin\"重新赋值，同时调用父View重新绘制页面。\n\n3.定义现实的父View\n\n```\n\n//显示的父类\nstruct UserRootPage: View {\n    //持有跳转控制器\n    @ObservedObject var login = CenterLogin()\n    \n    \n    init() {\n        //init时切换页面\n        self.login.isLogin = true\n    }\n    \n    var body: some View {\n        VStack{\n            if self.login.isLogin == false{\n                LoginPage(loginCenter: login)\n            }else{\n                HomePage()\n            }\n            \n        }\n    }\n}\n\n\n```\n\nAPP显示的也是这个View，由他来判断是显示那个页面，同时他持有一个“CenterLogin”的类，来交给登陆页，告诉自己什么时候重新绘制页面，在init的方法里面，可以进行判断，用户是否是已经登陆过的，如果已经登陆过直接绘制首页。\n\n\n到此，我们的功能也就全部实现完成了，指的注意的是\"ObservableObject\"这个类，在这个类是SwiftUI框架所包含的，所有的类都可以调用，实现了这个协议的类，在类里面所用“Published”关键字声明的属性，在属性改变时，可使拥有此类实例的视图重新调用body属性，也就是可以重新绘制界面。\n","source":"_posts/2021/SwiftUI之登陆界面.md","raw":"---\ntitle: SwiftUI之登陆界面\ndate: 2021-01-19 14:23:08\ntags: [Swift,SwiftUI]\ncategory: [iOS]\n---\n\n昨天捣鼓了下新出的SwiftUI的使用，绘制了一个登陆页面，但是在做登陆完成跳转的时候犯了难，网上介绍的都是利用NavigationView或者NavigationLink进行页面的跳转，但是，在登陆页面的时候，将登陆页面做成根页面进行跳转，总觉得很奇怪，虽然按着方法push跳转后返回按钮能隐藏掉，但是，在栈里面，根页面还是存在了，并且是登陆页面，所以想用一下其他的方法，于是找到了一个利用ObservableObject协议来实现重绘View的一个方法。\n\n那，我们的目标就来了，需求就是：\n\n1.在登陆页面登陆成功时，直接跳转到首页，不用push的方式去跳转；\n2.后续进行push跳转时，根页面是首页；\n3.用户已经登陆，再进入APP时，直接到首页；\n\n\n方法是：\n\n在首页和登陆页面之前有一个父View，App显示的根View也是他，他来根据某一个值，来判断是现实登陆页面还是首页，也或者在登陆页面实现跳转。\n\n\n步骤是：\n\n1.利用ObservableObject协议，定义一个控制绘制页面的类\n\n```\n\nclass CenterLogin: ObservableObject {\n    //是否跳转到首页\n    @Published var isLogin = false\n    \n    func toLogin()  {\n        self.isLogin = true\n    }\n}\n\n\n```\n\n在这个类里面有一个控制是绘制登陆页面还是首页的属性“isLogin”，当为false的时候，到登陆页面，当为true的时候到首页。\n\n2.定义登陆页面的View和首页的View\n\n```\n\n//登陆页\nstruct LoginPage: View {\n    \n    //用户账号\n    @State private var userName: String = \"\"\n    //用户米密码\n    @State private var userPassWord: String = \"\"\n    \n    //持有一个跳转控制器\n    @ObservedObject var loginCenter : CenterLogin\n    \n    @State var isActive = false\n    let detail = HomePage()\n    \n    var body: some View {\n        \n        VStack {\n            HStack{\n                \n                Label(\"账号：\", systemImage: \"\")\n                TextField(\"请输入账号：\", text: $userName)\n                \n            }\n            .padding(EdgeInsets(top: 10, leading: 20, bottom: 10, trailing: 20))\n            \n            \n            HStack{\n                \n                Label(\"密码：\", systemImage: \"\")\n                TextField(\"请输入密码：\", text: $userPassWord)\n                \n            }\n            .padding(EdgeInsets(top: 10, leading: 20, bottom: 10, trailing: 20))\n            \n            Button(action: ({\n                //前往首页\n                self.loginCenter.toLogin()\n                \n            }), label: {\n                Text(\"登陆\")\n                    .accentColor(.blue)\n                \n            })\n            .padding(.top)\n            \n            \n            \n        }\n        \n        \n    }\n    \n}\n\n//首页\nstruct HomePage: View {\n    \n    var body: some View {\n        \n        TabView{\n            \n            Text(\"Tab1\")\n                \n                .tabItem {\n                    \n                    Image(systemName: \"1.square.fill\")\n                    \n                    Text(\"First\")\n                    \n                }\n            \n            Text(\"Tab2\")\n                \n                .tabItem {\n                    \n                    Image(systemName: \"2.square.fill\")\n                    \n                    Text(\"Second\")\n                    \n                }\n            \n            Text(\"Tab3\")\n                \n                .tabItem {\n                    \n                    Image(systemName: \"3.square.fill\")\n                    \n                    Text(\"Third\")\n                    \n                }\n            \n            Text(\"Tab4\")\n                \n                .tabItem {\n                    \n                    Image(systemName: \"4.square.fill\")\n                    \n                    Text(\"four\")\n                    \n                }\n            \n        }\n        \n    }\n    \n}\n\n\n```\n\n在登陆页面，需要持有一个父View传进来的绘制控制器，也就是我们定义的“CenterLogin”类，因为我们需要在用户登陆成功的时候，调用这个类的方法，给\"isLogin\"重新赋值，同时调用父View重新绘制页面。\n\n3.定义现实的父View\n\n```\n\n//显示的父类\nstruct UserRootPage: View {\n    //持有跳转控制器\n    @ObservedObject var login = CenterLogin()\n    \n    \n    init() {\n        //init时切换页面\n        self.login.isLogin = true\n    }\n    \n    var body: some View {\n        VStack{\n            if self.login.isLogin == false{\n                LoginPage(loginCenter: login)\n            }else{\n                HomePage()\n            }\n            \n        }\n    }\n}\n\n\n```\n\nAPP显示的也是这个View，由他来判断是显示那个页面，同时他持有一个“CenterLogin”的类，来交给登陆页，告诉自己什么时候重新绘制页面，在init的方法里面，可以进行判断，用户是否是已经登陆过的，如果已经登陆过直接绘制首页。\n\n\n到此，我们的功能也就全部实现完成了，指的注意的是\"ObservableObject\"这个类，在这个类是SwiftUI框架所包含的，所有的类都可以调用，实现了这个协议的类，在类里面所用“Published”关键字声明的属性，在属性改变时，可使拥有此类实例的视图重新调用body属性，也就是可以重新绘制界面。\n","slug":"2021/SwiftUI之登陆界面","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglx001dg0vggh43geas","content":"<p>昨天捣鼓了下新出的SwiftUI的使用，绘制了一个登陆页面，但是在做登陆完成跳转的时候犯了难，网上介绍的都是利用NavigationView或者NavigationLink进行页面的跳转，但是，在登陆页面的时候，将登陆页面做成根页面进行跳转，总觉得很奇怪，虽然按着方法push跳转后返回按钮能隐藏掉，但是，在栈里面，根页面还是存在了，并且是登陆页面，所以想用一下其他的方法，于是找到了一个利用ObservableObject协议来实现重绘View的一个方法。</p>\n<p>那，我们的目标就来了，需求就是：</p>\n<p>1.在登陆页面登陆成功时，直接跳转到首页，不用push的方式去跳转；<br>2.后续进行push跳转时，根页面是首页；<br>3.用户已经登陆，再进入APP时，直接到首页；</p>\n<p>方法是：</p>\n<p>在首页和登陆页面之前有一个父View，App显示的根View也是他，他来根据某一个值，来判断是现实登陆页面还是首页，也或者在登陆页面实现跳转。</p>\n<p>步骤是：</p>\n<p>1.利用ObservableObject协议，定义一个控制绘制页面的类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class CenterLogin: ObservableObject &#123;</span><br><span class=\"line\">    //是否跳转到首页</span><br><span class=\"line\">    @Published var isLogin = false</span><br><span class=\"line\">    </span><br><span class=\"line\">    func toLogin()  &#123;</span><br><span class=\"line\">        self.isLogin = true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在这个类里面有一个控制是绘制登陆页面还是首页的属性“isLogin”，当为false的时候，到登陆页面，当为true的时候到首页。</p>\n<p>2.定义登陆页面的View和首页的View</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//登陆页</span><br><span class=\"line\">struct LoginPage: View &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //用户账号</span><br><span class=\"line\">    @State private var userName: String = &quot;&quot;</span><br><span class=\"line\">    //用户米密码</span><br><span class=\"line\">    @State private var userPassWord: String = &quot;&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //持有一个跳转控制器</span><br><span class=\"line\">    @ObservedObject var loginCenter : CenterLogin</span><br><span class=\"line\">    </span><br><span class=\"line\">    @State var isActive = false</span><br><span class=\"line\">    let detail = HomePage()</span><br><span class=\"line\">    </span><br><span class=\"line\">    var body: some View &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        VStack &#123;</span><br><span class=\"line\">            HStack&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                Label(&quot;账号：&quot;, systemImage: &quot;&quot;)</span><br><span class=\"line\">                TextField(&quot;请输入账号：&quot;, text: $userName)</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .padding(EdgeInsets(top: 10, leading: 20, bottom: 10, trailing: 20))</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            HStack&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                Label(&quot;密码：&quot;, systemImage: &quot;&quot;)</span><br><span class=\"line\">                TextField(&quot;请输入密码：&quot;, text: $userPassWord)</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .padding(EdgeInsets(top: 10, leading: 20, bottom: 10, trailing: 20))</span><br><span class=\"line\">            </span><br><span class=\"line\">            Button(action: (&#123;</span><br><span class=\"line\">                //前往首页</span><br><span class=\"line\">                self.loginCenter.toLogin()</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;), label: &#123;</span><br><span class=\"line\">                Text(&quot;登陆&quot;)</span><br><span class=\"line\">                    .accentColor(.blue)</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .padding(.top)</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//首页</span><br><span class=\"line\">struct HomePage: View &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var body: some View &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        TabView&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Text(&quot;Tab1&quot;)</span><br><span class=\"line\">                </span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Image(systemName: &quot;1.square.fill&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Text(&quot;First&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Text(&quot;Tab2&quot;)</span><br><span class=\"line\">                </span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Image(systemName: &quot;2.square.fill&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Text(&quot;Second&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Text(&quot;Tab3&quot;)</span><br><span class=\"line\">                </span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Image(systemName: &quot;3.square.fill&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Text(&quot;Third&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Text(&quot;Tab4&quot;)</span><br><span class=\"line\">                </span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Image(systemName: &quot;4.square.fill&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Text(&quot;four&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在登陆页面，需要持有一个父View传进来的绘制控制器，也就是我们定义的“CenterLogin”类，因为我们需要在用户登陆成功的时候，调用这个类的方法，给”isLogin”重新赋值，同时调用父View重新绘制页面。</p>\n<p>3.定义现实的父View</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//显示的父类</span><br><span class=\"line\">struct UserRootPage: View &#123;</span><br><span class=\"line\">    //持有跳转控制器</span><br><span class=\"line\">    @ObservedObject var login = CenterLogin()</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    init() &#123;</span><br><span class=\"line\">        //init时切换页面</span><br><span class=\"line\">        self.login.isLogin = true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var body: some View &#123;</span><br><span class=\"line\">        VStack&#123;</span><br><span class=\"line\">            if self.login.isLogin == false&#123;</span><br><span class=\"line\">                LoginPage(loginCenter: login)</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                HomePage()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>APP显示的也是这个View，由他来判断是显示那个页面，同时他持有一个“CenterLogin”的类，来交给登陆页，告诉自己什么时候重新绘制页面，在init的方法里面，可以进行判断，用户是否是已经登陆过的，如果已经登陆过直接绘制首页。</p>\n<p>到此，我们的功能也就全部实现完成了，指的注意的是”ObservableObject”这个类，在这个类是SwiftUI框架所包含的，所有的类都可以调用，实现了这个协议的类，在类里面所用“Published”关键字声明的属性，在属性改变时，可使拥有此类实例的视图重新调用body属性，也就是可以重新绘制界面。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>昨天捣鼓了下新出的SwiftUI的使用，绘制了一个登陆页面，但是在做登陆完成跳转的时候犯了难，网上介绍的都是利用NavigationView或者NavigationLink进行页面的跳转，但是，在登陆页面的时候，将登陆页面做成根页面进行跳转，总觉得很奇怪，虽然按着方法push跳转后返回按钮能隐藏掉，但是，在栈里面，根页面还是存在了，并且是登陆页面，所以想用一下其他的方法，于是找到了一个利用ObservableObject协议来实现重绘View的一个方法。</p>\n<p>那，我们的目标就来了，需求就是：</p>\n<p>1.在登陆页面登陆成功时，直接跳转到首页，不用push的方式去跳转；<br>2.后续进行push跳转时，根页面是首页；<br>3.用户已经登陆，再进入APP时，直接到首页；</p>\n<p>方法是：</p>\n<p>在首页和登陆页面之前有一个父View，App显示的根View也是他，他来根据某一个值，来判断是现实登陆页面还是首页，也或者在登陆页面实现跳转。</p>\n<p>步骤是：</p>\n<p>1.利用ObservableObject协议，定义一个控制绘制页面的类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">class CenterLogin: ObservableObject &#123;</span><br><span class=\"line\">    //是否跳转到首页</span><br><span class=\"line\">    @Published var isLogin = false</span><br><span class=\"line\">    </span><br><span class=\"line\">    func toLogin()  &#123;</span><br><span class=\"line\">        self.isLogin = true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在这个类里面有一个控制是绘制登陆页面还是首页的属性“isLogin”，当为false的时候，到登陆页面，当为true的时候到首页。</p>\n<p>2.定义登陆页面的View和首页的View</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//登陆页</span><br><span class=\"line\">struct LoginPage: View &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //用户账号</span><br><span class=\"line\">    @State private var userName: String = &quot;&quot;</span><br><span class=\"line\">    //用户米密码</span><br><span class=\"line\">    @State private var userPassWord: String = &quot;&quot;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //持有一个跳转控制器</span><br><span class=\"line\">    @ObservedObject var loginCenter : CenterLogin</span><br><span class=\"line\">    </span><br><span class=\"line\">    @State var isActive = false</span><br><span class=\"line\">    let detail = HomePage()</span><br><span class=\"line\">    </span><br><span class=\"line\">    var body: some View &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        VStack &#123;</span><br><span class=\"line\">            HStack&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                Label(&quot;账号：&quot;, systemImage: &quot;&quot;)</span><br><span class=\"line\">                TextField(&quot;请输入账号：&quot;, text: $userName)</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .padding(EdgeInsets(top: 10, leading: 20, bottom: 10, trailing: 20))</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            HStack&#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                Label(&quot;密码：&quot;, systemImage: &quot;&quot;)</span><br><span class=\"line\">                TextField(&quot;请输入密码：&quot;, text: $userPassWord)</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            .padding(EdgeInsets(top: 10, leading: 20, bottom: 10, trailing: 20))</span><br><span class=\"line\">            </span><br><span class=\"line\">            Button(action: (&#123;</span><br><span class=\"line\">                //前往首页</span><br><span class=\"line\">                self.loginCenter.toLogin()</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;), label: &#123;</span><br><span class=\"line\">                Text(&quot;登陆&quot;)</span><br><span class=\"line\">                    .accentColor(.blue)</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">            .padding(.top)</span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//首页</span><br><span class=\"line\">struct HomePage: View &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var body: some View &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        TabView&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Text(&quot;Tab1&quot;)</span><br><span class=\"line\">                </span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Image(systemName: &quot;1.square.fill&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Text(&quot;First&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Text(&quot;Tab2&quot;)</span><br><span class=\"line\">                </span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Image(systemName: &quot;2.square.fill&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Text(&quot;Second&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Text(&quot;Tab3&quot;)</span><br><span class=\"line\">                </span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Image(systemName: &quot;3.square.fill&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Text(&quot;Third&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            Text(&quot;Tab4&quot;)</span><br><span class=\"line\">                </span><br><span class=\"line\">                .tabItem &#123;</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Image(systemName: &quot;4.square.fill&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                    Text(&quot;four&quot;)</span><br><span class=\"line\">                    </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>在登陆页面，需要持有一个父View传进来的绘制控制器，也就是我们定义的“CenterLogin”类，因为我们需要在用户登陆成功的时候，调用这个类的方法，给”isLogin”重新赋值，同时调用父View重新绘制页面。</p>\n<p>3.定义现实的父View</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//显示的父类</span><br><span class=\"line\">struct UserRootPage: View &#123;</span><br><span class=\"line\">    //持有跳转控制器</span><br><span class=\"line\">    @ObservedObject var login = CenterLogin()</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    init() &#123;</span><br><span class=\"line\">        //init时切换页面</span><br><span class=\"line\">        self.login.isLogin = true</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    var body: some View &#123;</span><br><span class=\"line\">        VStack&#123;</span><br><span class=\"line\">            if self.login.isLogin == false&#123;</span><br><span class=\"line\">                LoginPage(loginCenter: login)</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">                HomePage()</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>APP显示的也是这个View，由他来判断是显示那个页面，同时他持有一个“CenterLogin”的类，来交给登陆页，告诉自己什么时候重新绘制页面，在init的方法里面，可以进行判断，用户是否是已经登陆过的，如果已经登陆过直接绘制首页。</p>\n<p>到此，我们的功能也就全部实现完成了，指的注意的是”ObservableObject”这个类，在这个类是SwiftUI框架所包含的，所有的类都可以调用，实现了这个协议的类，在类里面所用“Published”关键字声明的属性，在属性改变时，可使拥有此类实例的视图重新调用body属性，也就是可以重新绘制界面。</p>\n"},{"title":"WEB端接入阿里多人音视频通信","date":"2020-09-30T07:32:07.000Z","_content":"\n###  1.序\n前段时间做完了一个项目，其中有个视频会议的功能，其中要实现的核心是多对多音视频通话功能，用介入第三方SDK，也就是接入了阿里的音视频RTC实现，觉得还是可以记录一下。\n\n当时其实考察了很多其他的SDK，比如腾讯的视频会议，还有阿里的视频会议，但是，实际操作完后，发现这两个SDK还在开发中，不完善，而且其实具体的实现方式，还是跳转回他们自己视频会议的页面，觉得这样的接入方式限制太多，于是考虑自己实现所有功能，也就是换了阿里的音视频会议的RTC。\n\n### 2.概述\n因为涉及到的场景是多对多人视频通话，阿里这边的实现方式是，通过一个key值，可以理解为一个房间号，或者通道号，把进入这个房间（通道）中的人的音视频信息共享，都向这个房间传音视频流，同时从这个房间拉取别人的音视频流。\n\n### 3.接入流程\n在这里接入流程有两个，第一个是SDK的接入流程，另外一个是功能实现的流程。\n\n\n#### 3.1 SDK接入\n官方给的SDK的接入流程是三步：\n1.开通服务\n2.创建应用\n3.集成客户端\n\n在这里，我主要是再介绍下这里面一些注意的地方:\n1.第一个是开通服务后，测试是不收费的，也就是说，可以先接入调试，不需要先付费，\n2.第二步，需要在阿里内置的控制台创建一个应用，名字可随意，主要是生成完应用后，会给你一个app key 和 app id ，这两个很重要，是接入SDK的凭证，做完这两步，然后在下载页面，直接下载自己平台的SDK就好了，我这边是下载的是WEB端的SDK。\n\n接入SDK后，也就是将SDK包下载下来，我这边是WEB端，主要是三步：\n1.首先下载SDK，然后将AliWebRtcSDK包保存到本地项目下\n2.最后在项目相应的前端页面文件中3.\n3.对aliyun-webrtc-sdk.js文件进行引用\n\n#### 3.2 SDK功能实现\n\n1.接入SDK后，首先要初始化SDK,获得SDK的对象实例。\n\n```bash\nvar aliWebrtc = new AliRtcEngine();\n```\n推荐在进入视频页面的时候，先预览下视频状态，也就是预览视频,预览成功时，正常执行，预览失败，则说明有其他问题，跳出提示。\n```bash\naliWebrtc.startPreview(\nvideo    // html中的video元素\n).then(()=>{\n}).catch((error) => {\n// 预览失败\n});\n```\n\n2.加入频道,预览成功后，加入制定的房间\n```bash\naliWebrtc.joinChannel({\nuserid,         // 用户ID\nchannel,        // 频道\nappid,          // 应用ID\nnonce,          // 随机码\ntimestamp,      // 时间戳\ngslb,           // gslb服务地址\ntoken,          // 令牌\n},displayName).then(()=>{\n// 入会成功\n} ,(error)=>{\n// 入会失败，打印错误内容，可以看到失败原因\nconsole.log(error.message);\n});\n```\n\n将我们之前申请的appid 和appkey放上去，然后根据文档提示，将参数补全，这里要重点说下两个参数，一个是timestamp,他是说明你这个加入频道的请求是否过期，从你发出请求的那个时间开始，过期了是会进入房间失败的，第二个是token，他是有其他的参数一起生成，如果进入频道失败，很大的可能就是这个参数生成错误。\n\n3.发布或取消发布本地流。\n```bash\n//开始推音视频流\naliWebrtc.publish().then(()=>{\n} ,(error)=>{\nconsole.log(error.message);\n});\n//取消推流\naliWebrtc.unPublish().then(()=>{\n} ,(error)=>{\nconsole.log(error.message);\n});\n```\n当我们进入房间成功后，就可以设置是否推流了。\n\n4.订阅onPublisher回调或onUnPublisher回调\n```bash\n//拉取音视频流\naliWebrtc.on('onPublisher',(publisher) =>{\n//远程发布者userId\nconsole.log(publisher.userId);\n//远程发布名字\nconsole.log(publisher.displayName);\n//远程流内容，streamConfigs是数组格式\nconsole.log(publisher.streamConfigs);\n});\n\n//用户取消推流\naliWebrtc.on('onUnPublisher',(publisher) =>{\n//远程发布者userId\nconsole.log(publisher.userId);\n//远程发布名字\nconsole.log(publisher.displayName);\n});\n\n```\n这里，可以让用户自己选择是否开始打开视频（是否推流），然后拉取别的用户的音视频流，你需要根据用户数量来设置展示视频的view，然后在拉取视频流的回调里面将回调里面的内容放在view里面展示，就可以了，然后在“onUnPublisher”的回调里面，获取到那个用户取消推流了，就把那个用户取消掉就好了,这里说下，进入频道传的那个“userid”就是在这里用的，最好用唯一的，不然会出现奇观的问题。\n\n5.订阅或取消订阅远程流\n\n```bash\naliWebrtc.subscribe(userId).then((userId)=>{\naliWebrtc.setDisplayRemoteVideo(\nuserId,       // 用户ID\nvideo,        // html中用于显示stream对象的video元素\n1             // 1表示摄像头流（大流和小流），2表示屏幕分享流\n)\n},(error)=>{\nconsole.log(error.message);\n});\n//取消订阅\naliWebrtc.unSubscribe(userId).then(() => {\n},(error)=>{\nconsole.log(error.message);\n});\n```\n可以在这个里面拿到数据后，用\"setDisplayRemoteVideo\"指定播放view，开始播放\n\n\n6.离开频道\n\n```bash\naliWebrtc.leaveChannel().then(()=>{\n} ,(error)=>{\nconsole.log(error.message);\n});\n```\n\n7.其他\n打开/关闭摄像头\n```bash\n//关闭摄像头\nthis.isOpenVieo = false;\n\nif (this.isScreen == true) {\naliWebrtc.configLocalScreenPublish = false;\n} else {\naliWebrtc.configLocalAudioPublish = false;\naliWebrtc.configLocalCameraPublish = false;\n}\n\n\naliWebrtc.unPublish().then(() => {}, (error) => {\n//                    console.log(error.message);\n});\n//打开摄像头\nthis.isOpenVieo = true;\n\n\nif (this.isScreen == true) {\naliWebrtc.configLocalScreenPublish = true;\n} else {\naliWebrtc.configLocalAudioPublish = true;\naliWebrtc.configLocalCameraPublish = true;\n}\n\n\n\naliWebrtc.publish().then(() => {}, (error) => {\n//                    console.log(error.message);\n});\n```\n\n打开/关闭 共享桌面\n```bash\nif (this.isScreen) {\n//关闭共享\nthis.isScreen = false;\naliWebrtc.configLocalAudioPublish = true;\naliWebrtc.configLocalCameraPublish = true;\naliWebrtc.configLocalScreenPublish = false;\n} else {\n//打开共享\nthis.isScreen = true;\naliWebrtc.configLocalAudioPublish = false;\naliWebrtc.configLocalCameraPublish = false;\naliWebrtc.configLocalScreenPublish = true;\n}\n\n//热切换\naliWebrtc.publish().then((res) => {\nsetTimeout(() => {\n//                    console.log(\"发布流成功\");\nthis.isOpenVieo = true;\n}, 2000)\n\n}, (error) => {\n\nconsole.log(\"[推流失败]\" + error.message, \"danger\");\n});\n```\n错误处理\n```bash\n//error 处理\naliWebrtc.on(\"onError\", (error) => {\n//10010 屏幕共享未知错误\n//10011 屏幕共享在选择页面取消选择 屏幕共享被禁止\n//10012 屏幕共享在网页底部悬浮窗单击停止共享  屏幕共享已取消\n\nif (error.errorCode == 10012 || error.errorCode == 10011) {\nthis.isScreen = true;\nthis.openScreen();\n}\n\n//console.log(error.errorCode);\n});\n```\n\n到这里，基本上所有的功能都接入完了，最后，要注意的是，退出频道的时候会有个延迟，在其他用户哪里可能会白屏一会，暂时还没找到原因。\n","source":"_posts/2021/WEB端接入阿里多人音视频通信.md","raw":"---\ntitle: WEB端接入阿里多人音视频通信\ndate: 2020-09-30 15:32:07\ntags: [WEB,SDK,音视频]\ncategory: [WEB]\n---\n\n###  1.序\n前段时间做完了一个项目，其中有个视频会议的功能，其中要实现的核心是多对多音视频通话功能，用介入第三方SDK，也就是接入了阿里的音视频RTC实现，觉得还是可以记录一下。\n\n当时其实考察了很多其他的SDK，比如腾讯的视频会议，还有阿里的视频会议，但是，实际操作完后，发现这两个SDK还在开发中，不完善，而且其实具体的实现方式，还是跳转回他们自己视频会议的页面，觉得这样的接入方式限制太多，于是考虑自己实现所有功能，也就是换了阿里的音视频会议的RTC。\n\n### 2.概述\n因为涉及到的场景是多对多人视频通话，阿里这边的实现方式是，通过一个key值，可以理解为一个房间号，或者通道号，把进入这个房间（通道）中的人的音视频信息共享，都向这个房间传音视频流，同时从这个房间拉取别人的音视频流。\n\n### 3.接入流程\n在这里接入流程有两个，第一个是SDK的接入流程，另外一个是功能实现的流程。\n\n\n#### 3.1 SDK接入\n官方给的SDK的接入流程是三步：\n1.开通服务\n2.创建应用\n3.集成客户端\n\n在这里，我主要是再介绍下这里面一些注意的地方:\n1.第一个是开通服务后，测试是不收费的，也就是说，可以先接入调试，不需要先付费，\n2.第二步，需要在阿里内置的控制台创建一个应用，名字可随意，主要是生成完应用后，会给你一个app key 和 app id ，这两个很重要，是接入SDK的凭证，做完这两步，然后在下载页面，直接下载自己平台的SDK就好了，我这边是下载的是WEB端的SDK。\n\n接入SDK后，也就是将SDK包下载下来，我这边是WEB端，主要是三步：\n1.首先下载SDK，然后将AliWebRtcSDK包保存到本地项目下\n2.最后在项目相应的前端页面文件中3.\n3.对aliyun-webrtc-sdk.js文件进行引用\n\n#### 3.2 SDK功能实现\n\n1.接入SDK后，首先要初始化SDK,获得SDK的对象实例。\n\n```bash\nvar aliWebrtc = new AliRtcEngine();\n```\n推荐在进入视频页面的时候，先预览下视频状态，也就是预览视频,预览成功时，正常执行，预览失败，则说明有其他问题，跳出提示。\n```bash\naliWebrtc.startPreview(\nvideo    // html中的video元素\n).then(()=>{\n}).catch((error) => {\n// 预览失败\n});\n```\n\n2.加入频道,预览成功后，加入制定的房间\n```bash\naliWebrtc.joinChannel({\nuserid,         // 用户ID\nchannel,        // 频道\nappid,          // 应用ID\nnonce,          // 随机码\ntimestamp,      // 时间戳\ngslb,           // gslb服务地址\ntoken,          // 令牌\n},displayName).then(()=>{\n// 入会成功\n} ,(error)=>{\n// 入会失败，打印错误内容，可以看到失败原因\nconsole.log(error.message);\n});\n```\n\n将我们之前申请的appid 和appkey放上去，然后根据文档提示，将参数补全，这里要重点说下两个参数，一个是timestamp,他是说明你这个加入频道的请求是否过期，从你发出请求的那个时间开始，过期了是会进入房间失败的，第二个是token，他是有其他的参数一起生成，如果进入频道失败，很大的可能就是这个参数生成错误。\n\n3.发布或取消发布本地流。\n```bash\n//开始推音视频流\naliWebrtc.publish().then(()=>{\n} ,(error)=>{\nconsole.log(error.message);\n});\n//取消推流\naliWebrtc.unPublish().then(()=>{\n} ,(error)=>{\nconsole.log(error.message);\n});\n```\n当我们进入房间成功后，就可以设置是否推流了。\n\n4.订阅onPublisher回调或onUnPublisher回调\n```bash\n//拉取音视频流\naliWebrtc.on('onPublisher',(publisher) =>{\n//远程发布者userId\nconsole.log(publisher.userId);\n//远程发布名字\nconsole.log(publisher.displayName);\n//远程流内容，streamConfigs是数组格式\nconsole.log(publisher.streamConfigs);\n});\n\n//用户取消推流\naliWebrtc.on('onUnPublisher',(publisher) =>{\n//远程发布者userId\nconsole.log(publisher.userId);\n//远程发布名字\nconsole.log(publisher.displayName);\n});\n\n```\n这里，可以让用户自己选择是否开始打开视频（是否推流），然后拉取别的用户的音视频流，你需要根据用户数量来设置展示视频的view，然后在拉取视频流的回调里面将回调里面的内容放在view里面展示，就可以了，然后在“onUnPublisher”的回调里面，获取到那个用户取消推流了，就把那个用户取消掉就好了,这里说下，进入频道传的那个“userid”就是在这里用的，最好用唯一的，不然会出现奇观的问题。\n\n5.订阅或取消订阅远程流\n\n```bash\naliWebrtc.subscribe(userId).then((userId)=>{\naliWebrtc.setDisplayRemoteVideo(\nuserId,       // 用户ID\nvideo,        // html中用于显示stream对象的video元素\n1             // 1表示摄像头流（大流和小流），2表示屏幕分享流\n)\n},(error)=>{\nconsole.log(error.message);\n});\n//取消订阅\naliWebrtc.unSubscribe(userId).then(() => {\n},(error)=>{\nconsole.log(error.message);\n});\n```\n可以在这个里面拿到数据后，用\"setDisplayRemoteVideo\"指定播放view，开始播放\n\n\n6.离开频道\n\n```bash\naliWebrtc.leaveChannel().then(()=>{\n} ,(error)=>{\nconsole.log(error.message);\n});\n```\n\n7.其他\n打开/关闭摄像头\n```bash\n//关闭摄像头\nthis.isOpenVieo = false;\n\nif (this.isScreen == true) {\naliWebrtc.configLocalScreenPublish = false;\n} else {\naliWebrtc.configLocalAudioPublish = false;\naliWebrtc.configLocalCameraPublish = false;\n}\n\n\naliWebrtc.unPublish().then(() => {}, (error) => {\n//                    console.log(error.message);\n});\n//打开摄像头\nthis.isOpenVieo = true;\n\n\nif (this.isScreen == true) {\naliWebrtc.configLocalScreenPublish = true;\n} else {\naliWebrtc.configLocalAudioPublish = true;\naliWebrtc.configLocalCameraPublish = true;\n}\n\n\n\naliWebrtc.publish().then(() => {}, (error) => {\n//                    console.log(error.message);\n});\n```\n\n打开/关闭 共享桌面\n```bash\nif (this.isScreen) {\n//关闭共享\nthis.isScreen = false;\naliWebrtc.configLocalAudioPublish = true;\naliWebrtc.configLocalCameraPublish = true;\naliWebrtc.configLocalScreenPublish = false;\n} else {\n//打开共享\nthis.isScreen = true;\naliWebrtc.configLocalAudioPublish = false;\naliWebrtc.configLocalCameraPublish = false;\naliWebrtc.configLocalScreenPublish = true;\n}\n\n//热切换\naliWebrtc.publish().then((res) => {\nsetTimeout(() => {\n//                    console.log(\"发布流成功\");\nthis.isOpenVieo = true;\n}, 2000)\n\n}, (error) => {\n\nconsole.log(\"[推流失败]\" + error.message, \"danger\");\n});\n```\n错误处理\n```bash\n//error 处理\naliWebrtc.on(\"onError\", (error) => {\n//10010 屏幕共享未知错误\n//10011 屏幕共享在选择页面取消选择 屏幕共享被禁止\n//10012 屏幕共享在网页底部悬浮窗单击停止共享  屏幕共享已取消\n\nif (error.errorCode == 10012 || error.errorCode == 10011) {\nthis.isScreen = true;\nthis.openScreen();\n}\n\n//console.log(error.errorCode);\n});\n```\n\n到这里，基本上所有的功能都接入完了，最后，要注意的是，退出频道的时候会有个延迟，在其他用户哪里可能会白屏一会，暂时还没找到原因。\n","slug":"2021/WEB端接入阿里多人音视频通信","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofgly001eg0vg6tvmbr3e","content":"<h3 id=\"1-序\"><a href=\"#1-序\" class=\"headerlink\" title=\"1.序\"></a>1.序</h3><p>前段时间做完了一个项目，其中有个视频会议的功能，其中要实现的核心是多对多音视频通话功能，用介入第三方SDK，也就是接入了阿里的音视频RTC实现，觉得还是可以记录一下。</p>\n<p>当时其实考察了很多其他的SDK，比如腾讯的视频会议，还有阿里的视频会议，但是，实际操作完后，发现这两个SDK还在开发中，不完善，而且其实具体的实现方式，还是跳转回他们自己视频会议的页面，觉得这样的接入方式限制太多，于是考虑自己实现所有功能，也就是换了阿里的音视频会议的RTC。</p>\n<h3 id=\"2-概述\"><a href=\"#2-概述\" class=\"headerlink\" title=\"2.概述\"></a>2.概述</h3><p>因为涉及到的场景是多对多人视频通话，阿里这边的实现方式是，通过一个key值，可以理解为一个房间号，或者通道号，把进入这个房间（通道）中的人的音视频信息共享，都向这个房间传音视频流，同时从这个房间拉取别人的音视频流。</p>\n<h3 id=\"3-接入流程\"><a href=\"#3-接入流程\" class=\"headerlink\" title=\"3.接入流程\"></a>3.接入流程</h3><p>在这里接入流程有两个，第一个是SDK的接入流程，另外一个是功能实现的流程。</p>\n<h4 id=\"3-1-SDK接入\"><a href=\"#3-1-SDK接入\" class=\"headerlink\" title=\"3.1 SDK接入\"></a>3.1 SDK接入</h4><p>官方给的SDK的接入流程是三步：<br>1.开通服务<br>2.创建应用<br>3.集成客户端</p>\n<p>在这里，我主要是再介绍下这里面一些注意的地方:<br>1.第一个是开通服务后，测试是不收费的，也就是说，可以先接入调试，不需要先付费，<br>2.第二步，需要在阿里内置的控制台创建一个应用，名字可随意，主要是生成完应用后，会给你一个app key 和 app id ，这两个很重要，是接入SDK的凭证，做完这两步，然后在下载页面，直接下载自己平台的SDK就好了，我这边是下载的是WEB端的SDK。</p>\n<p>接入SDK后，也就是将SDK包下载下来，我这边是WEB端，主要是三步：<br>1.首先下载SDK，然后将AliWebRtcSDK包保存到本地项目下<br>2.最后在项目相应的前端页面文件中3.<br>3.对aliyun-webrtc-sdk.js文件进行引用</p>\n<h4 id=\"3-2-SDK功能实现\"><a href=\"#3-2-SDK功能实现\" class=\"headerlink\" title=\"3.2 SDK功能实现\"></a>3.2 SDK功能实现</h4><p>1.接入SDK后，首先要初始化SDK,获得SDK的对象实例。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var aliWebrtc = new AliRtcEngine();</span><br></pre></td></tr></table></figure>\n<p>推荐在进入视频页面的时候，先预览下视频状态，也就是预览视频,预览成功时，正常执行，预览失败，则说明有其他问题，跳出提示。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aliWebrtc.startPreview(</span><br><span class=\"line\">video    // html中的video元素</span><br><span class=\"line\">).<span class=\"keyword\">then</span>(()=&gt;&#123;</span><br><span class=\"line\">&#125;).catch((error) =&gt; &#123;</span><br><span class=\"line\">// 预览失败</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>2.加入频道,预览成功后，加入制定的房间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aliWebrtc.joinChannel(&#123;</span><br><span class=\"line\">userid,         // 用户ID</span><br><span class=\"line\">channel,        // 频道</span><br><span class=\"line\">appid,          // 应用ID</span><br><span class=\"line\">nonce,          // 随机码</span><br><span class=\"line\">timestamp,      // 时间戳</span><br><span class=\"line\">gslb,           // gslb服务地址</span><br><span class=\"line\">token,          // 令牌</span><br><span class=\"line\">&#125;,displayName).<span class=\"keyword\">then</span>(()=&gt;&#123;</span><br><span class=\"line\">// 入会成功</span><br><span class=\"line\">&#125; ,(error)=&gt;&#123;</span><br><span class=\"line\">// 入会失败，打印错误内容，可以看到失败原因</span><br><span class=\"line\">console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>将我们之前申请的appid 和appkey放上去，然后根据文档提示，将参数补全，这里要重点说下两个参数，一个是timestamp,他是说明你这个加入频道的请求是否过期，从你发出请求的那个时间开始，过期了是会进入房间失败的，第二个是token，他是有其他的参数一起生成，如果进入频道失败，很大的可能就是这个参数生成错误。</p>\n<p>3.发布或取消发布本地流。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//开始推音视频流</span><br><span class=\"line\">aliWebrtc.publish().<span class=\"keyword\">then</span>(()=&gt;&#123;</span><br><span class=\"line\">&#125; ,(error)=&gt;&#123;</span><br><span class=\"line\">console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//取消推流</span><br><span class=\"line\">aliWebrtc.unPublish().<span class=\"keyword\">then</span>(()=&gt;&#123;</span><br><span class=\"line\">&#125; ,(error)=&gt;&#123;</span><br><span class=\"line\">console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当我们进入房间成功后，就可以设置是否推流了。</p>\n<p>4.订阅onPublisher回调或onUnPublisher回调</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//拉取音视频流</span><br><span class=\"line\">aliWebrtc.on(<span class=\"string\">&#x27;onPublisher&#x27;</span>,(publisher) =&gt;&#123;</span><br><span class=\"line\">//远程发布者userId</span><br><span class=\"line\">console.log(publisher.userId);</span><br><span class=\"line\">//远程发布名字</span><br><span class=\"line\">console.log(publisher.displayName);</span><br><span class=\"line\">//远程流内容，streamConfigs是数组格式</span><br><span class=\"line\">console.log(publisher.streamConfigs);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//用户取消推流</span><br><span class=\"line\">aliWebrtc.on(<span class=\"string\">&#x27;onUnPublisher&#x27;</span>,(publisher) =&gt;&#123;</span><br><span class=\"line\">//远程发布者userId</span><br><span class=\"line\">console.log(publisher.userId);</span><br><span class=\"line\">//远程发布名字</span><br><span class=\"line\">console.log(publisher.displayName);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这里，可以让用户自己选择是否开始打开视频（是否推流），然后拉取别的用户的音视频流，你需要根据用户数量来设置展示视频的view，然后在拉取视频流的回调里面将回调里面的内容放在view里面展示，就可以了，然后在“onUnPublisher”的回调里面，获取到那个用户取消推流了，就把那个用户取消掉就好了,这里说下，进入频道传的那个“userid”就是在这里用的，最好用唯一的，不然会出现奇观的问题。</p>\n<p>5.订阅或取消订阅远程流</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aliWebrtc.subscribe(userId).<span class=\"keyword\">then</span>((userId)=&gt;&#123;</span><br><span class=\"line\">aliWebrtc.setDisplayRemoteVideo(</span><br><span class=\"line\">userId,       // 用户ID</span><br><span class=\"line\">video,        // html中用于显示stream对象的video元素</span><br><span class=\"line\">1             // 1表示摄像头流（大流和小流），2表示屏幕分享流</span><br><span class=\"line\">)</span><br><span class=\"line\">&#125;,(error)=&gt;&#123;</span><br><span class=\"line\">console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//取消订阅</span><br><span class=\"line\">aliWebrtc.unSubscribe(userId).<span class=\"keyword\">then</span>(() =&gt; &#123;</span><br><span class=\"line\">&#125;,(error)=&gt;&#123;</span><br><span class=\"line\">console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以在这个里面拿到数据后，用”setDisplayRemoteVideo”指定播放view，开始播放</p>\n<p>6.离开频道</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aliWebrtc.leaveChannel().<span class=\"keyword\">then</span>(()=&gt;&#123;</span><br><span class=\"line\">&#125; ,(error)=&gt;&#123;</span><br><span class=\"line\">console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>7.其他<br>打开/关闭摄像头</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//关闭摄像头</span><br><span class=\"line\">this.isOpenVieo = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (this.isScreen == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">aliWebrtc.configLocalScreenPublish = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">aliWebrtc.configLocalAudioPublish = <span class=\"literal\">false</span>;</span><br><span class=\"line\">aliWebrtc.configLocalCameraPublish = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">aliWebrtc.unPublish().<span class=\"keyword\">then</span>(() =&gt; &#123;&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">//                    console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//打开摄像头</span><br><span class=\"line\">this.isOpenVieo = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (this.isScreen == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">aliWebrtc.configLocalScreenPublish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">aliWebrtc.configLocalAudioPublish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">aliWebrtc.configLocalCameraPublish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">aliWebrtc.publish().<span class=\"keyword\">then</span>(() =&gt; &#123;&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">//                    console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>打开/关闭 共享桌面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (this.isScreen) &#123;</span><br><span class=\"line\">//关闭共享</span><br><span class=\"line\">this.isScreen = <span class=\"literal\">false</span>;</span><br><span class=\"line\">aliWebrtc.configLocalAudioPublish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">aliWebrtc.configLocalCameraPublish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">aliWebrtc.configLocalScreenPublish = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">//打开共享</span><br><span class=\"line\">this.isScreen = <span class=\"literal\">true</span>;</span><br><span class=\"line\">aliWebrtc.configLocalAudioPublish = <span class=\"literal\">false</span>;</span><br><span class=\"line\">aliWebrtc.configLocalCameraPublish = <span class=\"literal\">false</span>;</span><br><span class=\"line\">aliWebrtc.configLocalScreenPublish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//热切换</span><br><span class=\"line\">aliWebrtc.publish().<span class=\"keyword\">then</span>((res) =&gt; &#123;</span><br><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">//                    console.log(<span class=\"string\">&quot;发布流成功&quot;</span>);</span><br><span class=\"line\">this.isOpenVieo = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;, 2000)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(<span class=\"string\">&quot;[推流失败]&quot;</span> + error.message, <span class=\"string\">&quot;danger&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>错误处理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//error 处理</span><br><span class=\"line\">aliWebrtc.on(<span class=\"string\">&quot;onError&quot;</span>, (error) =&gt; &#123;</span><br><span class=\"line\">//10010 屏幕共享未知错误</span><br><span class=\"line\">//10011 屏幕共享在选择页面取消选择 屏幕共享被禁止</span><br><span class=\"line\">//10012 屏幕共享在网页底部悬浮窗单击停止共享  屏幕共享已取消</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (error.errorCode == 10012 || error.errorCode == 10011) &#123;</span><br><span class=\"line\">this.isScreen = <span class=\"literal\">true</span>;</span><br><span class=\"line\">this.openScreen();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//console.log(error.errorCode);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>到这里，基本上所有的功能都接入完了，最后，要注意的是，退出频道的时候会有个延迟，在其他用户哪里可能会白屏一会，暂时还没找到原因。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-序\"><a href=\"#1-序\" class=\"headerlink\" title=\"1.序\"></a>1.序</h3><p>前段时间做完了一个项目，其中有个视频会议的功能，其中要实现的核心是多对多音视频通话功能，用介入第三方SDK，也就是接入了阿里的音视频RTC实现，觉得还是可以记录一下。</p>\n<p>当时其实考察了很多其他的SDK，比如腾讯的视频会议，还有阿里的视频会议，但是，实际操作完后，发现这两个SDK还在开发中，不完善，而且其实具体的实现方式，还是跳转回他们自己视频会议的页面，觉得这样的接入方式限制太多，于是考虑自己实现所有功能，也就是换了阿里的音视频会议的RTC。</p>\n<h3 id=\"2-概述\"><a href=\"#2-概述\" class=\"headerlink\" title=\"2.概述\"></a>2.概述</h3><p>因为涉及到的场景是多对多人视频通话，阿里这边的实现方式是，通过一个key值，可以理解为一个房间号，或者通道号，把进入这个房间（通道）中的人的音视频信息共享，都向这个房间传音视频流，同时从这个房间拉取别人的音视频流。</p>\n<h3 id=\"3-接入流程\"><a href=\"#3-接入流程\" class=\"headerlink\" title=\"3.接入流程\"></a>3.接入流程</h3><p>在这里接入流程有两个，第一个是SDK的接入流程，另外一个是功能实现的流程。</p>\n<h4 id=\"3-1-SDK接入\"><a href=\"#3-1-SDK接入\" class=\"headerlink\" title=\"3.1 SDK接入\"></a>3.1 SDK接入</h4><p>官方给的SDK的接入流程是三步：<br>1.开通服务<br>2.创建应用<br>3.集成客户端</p>\n<p>在这里，我主要是再介绍下这里面一些注意的地方:<br>1.第一个是开通服务后，测试是不收费的，也就是说，可以先接入调试，不需要先付费，<br>2.第二步，需要在阿里内置的控制台创建一个应用，名字可随意，主要是生成完应用后，会给你一个app key 和 app id ，这两个很重要，是接入SDK的凭证，做完这两步，然后在下载页面，直接下载自己平台的SDK就好了，我这边是下载的是WEB端的SDK。</p>\n<p>接入SDK后，也就是将SDK包下载下来，我这边是WEB端，主要是三步：<br>1.首先下载SDK，然后将AliWebRtcSDK包保存到本地项目下<br>2.最后在项目相应的前端页面文件中3.<br>3.对aliyun-webrtc-sdk.js文件进行引用</p>\n<h4 id=\"3-2-SDK功能实现\"><a href=\"#3-2-SDK功能实现\" class=\"headerlink\" title=\"3.2 SDK功能实现\"></a>3.2 SDK功能实现</h4><p>1.接入SDK后，首先要初始化SDK,获得SDK的对象实例。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var aliWebrtc = new AliRtcEngine();</span><br></pre></td></tr></table></figure>\n<p>推荐在进入视频页面的时候，先预览下视频状态，也就是预览视频,预览成功时，正常执行，预览失败，则说明有其他问题，跳出提示。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aliWebrtc.startPreview(</span><br><span class=\"line\">video    // html中的video元素</span><br><span class=\"line\">).<span class=\"keyword\">then</span>(()=&gt;&#123;</span><br><span class=\"line\">&#125;).catch((error) =&gt; &#123;</span><br><span class=\"line\">// 预览失败</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>2.加入频道,预览成功后，加入制定的房间</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aliWebrtc.joinChannel(&#123;</span><br><span class=\"line\">userid,         // 用户ID</span><br><span class=\"line\">channel,        // 频道</span><br><span class=\"line\">appid,          // 应用ID</span><br><span class=\"line\">nonce,          // 随机码</span><br><span class=\"line\">timestamp,      // 时间戳</span><br><span class=\"line\">gslb,           // gslb服务地址</span><br><span class=\"line\">token,          // 令牌</span><br><span class=\"line\">&#125;,displayName).<span class=\"keyword\">then</span>(()=&gt;&#123;</span><br><span class=\"line\">// 入会成功</span><br><span class=\"line\">&#125; ,(error)=&gt;&#123;</span><br><span class=\"line\">// 入会失败，打印错误内容，可以看到失败原因</span><br><span class=\"line\">console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>将我们之前申请的appid 和appkey放上去，然后根据文档提示，将参数补全，这里要重点说下两个参数，一个是timestamp,他是说明你这个加入频道的请求是否过期，从你发出请求的那个时间开始，过期了是会进入房间失败的，第二个是token，他是有其他的参数一起生成，如果进入频道失败，很大的可能就是这个参数生成错误。</p>\n<p>3.发布或取消发布本地流。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//开始推音视频流</span><br><span class=\"line\">aliWebrtc.publish().<span class=\"keyword\">then</span>(()=&gt;&#123;</span><br><span class=\"line\">&#125; ,(error)=&gt;&#123;</span><br><span class=\"line\">console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//取消推流</span><br><span class=\"line\">aliWebrtc.unPublish().<span class=\"keyword\">then</span>(()=&gt;&#123;</span><br><span class=\"line\">&#125; ,(error)=&gt;&#123;</span><br><span class=\"line\">console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>当我们进入房间成功后，就可以设置是否推流了。</p>\n<p>4.订阅onPublisher回调或onUnPublisher回调</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//拉取音视频流</span><br><span class=\"line\">aliWebrtc.on(<span class=\"string\">&#x27;onPublisher&#x27;</span>,(publisher) =&gt;&#123;</span><br><span class=\"line\">//远程发布者userId</span><br><span class=\"line\">console.log(publisher.userId);</span><br><span class=\"line\">//远程发布名字</span><br><span class=\"line\">console.log(publisher.displayName);</span><br><span class=\"line\">//远程流内容，streamConfigs是数组格式</span><br><span class=\"line\">console.log(publisher.streamConfigs);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//用户取消推流</span><br><span class=\"line\">aliWebrtc.on(<span class=\"string\">&#x27;onUnPublisher&#x27;</span>,(publisher) =&gt;&#123;</span><br><span class=\"line\">//远程发布者userId</span><br><span class=\"line\">console.log(publisher.userId);</span><br><span class=\"line\">//远程发布名字</span><br><span class=\"line\">console.log(publisher.displayName);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>这里，可以让用户自己选择是否开始打开视频（是否推流），然后拉取别的用户的音视频流，你需要根据用户数量来设置展示视频的view，然后在拉取视频流的回调里面将回调里面的内容放在view里面展示，就可以了，然后在“onUnPublisher”的回调里面，获取到那个用户取消推流了，就把那个用户取消掉就好了,这里说下，进入频道传的那个“userid”就是在这里用的，最好用唯一的，不然会出现奇观的问题。</p>\n<p>5.订阅或取消订阅远程流</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aliWebrtc.subscribe(userId).<span class=\"keyword\">then</span>((userId)=&gt;&#123;</span><br><span class=\"line\">aliWebrtc.setDisplayRemoteVideo(</span><br><span class=\"line\">userId,       // 用户ID</span><br><span class=\"line\">video,        // html中用于显示stream对象的video元素</span><br><span class=\"line\">1             // 1表示摄像头流（大流和小流），2表示屏幕分享流</span><br><span class=\"line\">)</span><br><span class=\"line\">&#125;,(error)=&gt;&#123;</span><br><span class=\"line\">console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//取消订阅</span><br><span class=\"line\">aliWebrtc.unSubscribe(userId).<span class=\"keyword\">then</span>(() =&gt; &#123;</span><br><span class=\"line\">&#125;,(error)=&gt;&#123;</span><br><span class=\"line\">console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可以在这个里面拿到数据后，用”setDisplayRemoteVideo”指定播放view，开始播放</p>\n<p>6.离开频道</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aliWebrtc.leaveChannel().<span class=\"keyword\">then</span>(()=&gt;&#123;</span><br><span class=\"line\">&#125; ,(error)=&gt;&#123;</span><br><span class=\"line\">console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>7.其他<br>打开/关闭摄像头</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//关闭摄像头</span><br><span class=\"line\">this.isOpenVieo = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (this.isScreen == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">aliWebrtc.configLocalScreenPublish = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">aliWebrtc.configLocalAudioPublish = <span class=\"literal\">false</span>;</span><br><span class=\"line\">aliWebrtc.configLocalCameraPublish = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">aliWebrtc.unPublish().<span class=\"keyword\">then</span>(() =&gt; &#123;&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">//                    console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//打开摄像头</span><br><span class=\"line\">this.isOpenVieo = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (this.isScreen == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">aliWebrtc.configLocalScreenPublish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">aliWebrtc.configLocalAudioPublish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">aliWebrtc.configLocalCameraPublish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">aliWebrtc.publish().<span class=\"keyword\">then</span>(() =&gt; &#123;&#125;, (error) =&gt; &#123;</span><br><span class=\"line\">//                    console.log(error.message);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>打开/关闭 共享桌面</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (this.isScreen) &#123;</span><br><span class=\"line\">//关闭共享</span><br><span class=\"line\">this.isScreen = <span class=\"literal\">false</span>;</span><br><span class=\"line\">aliWebrtc.configLocalAudioPublish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">aliWebrtc.configLocalCameraPublish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">aliWebrtc.configLocalScreenPublish = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">//打开共享</span><br><span class=\"line\">this.isScreen = <span class=\"literal\">true</span>;</span><br><span class=\"line\">aliWebrtc.configLocalAudioPublish = <span class=\"literal\">false</span>;</span><br><span class=\"line\">aliWebrtc.configLocalCameraPublish = <span class=\"literal\">false</span>;</span><br><span class=\"line\">aliWebrtc.configLocalScreenPublish = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//热切换</span><br><span class=\"line\">aliWebrtc.publish().<span class=\"keyword\">then</span>((res) =&gt; &#123;</span><br><span class=\"line\">setTimeout(() =&gt; &#123;</span><br><span class=\"line\">//                    console.log(<span class=\"string\">&quot;发布流成功&quot;</span>);</span><br><span class=\"line\">this.isOpenVieo = <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;, 2000)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;, (error) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(<span class=\"string\">&quot;[推流失败]&quot;</span> + error.message, <span class=\"string\">&quot;danger&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>错误处理</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//error 处理</span><br><span class=\"line\">aliWebrtc.on(<span class=\"string\">&quot;onError&quot;</span>, (error) =&gt; &#123;</span><br><span class=\"line\">//10010 屏幕共享未知错误</span><br><span class=\"line\">//10011 屏幕共享在选择页面取消选择 屏幕共享被禁止</span><br><span class=\"line\">//10012 屏幕共享在网页底部悬浮窗单击停止共享  屏幕共享已取消</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (error.errorCode == 10012 || error.errorCode == 10011) &#123;</span><br><span class=\"line\">this.isScreen = <span class=\"literal\">true</span>;</span><br><span class=\"line\">this.openScreen();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//console.log(error.errorCode);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>到这里，基本上所有的功能都接入完了，最后，要注意的是，退出频道的时候会有个延迟，在其他用户哪里可能会白屏一会，暂时还没找到原因。</p>\n"},{"title":"iOS 探索——模拟定位","date":"2020-12-16T06:19:32.000Z","_content":"\n最近在研究iOS的模拟定位，这里总结下我最近的研究心得。\n\n## 1.NSProxy（我骗了我自己）\n\n最开始研究这个东西的时候，在网上看到一篇文章，[（地址在这）](https://zhuanlan.zhihu.com/p/93145872),这个博主在里面用了一个方法，主要的理论就是，利用iOS里面NSProxy，这个类，在手机获取到用户定位，回调返回数据的时候，从中间插入你自己写的方法，来修改定位获取到的值，总的来说，这个方法，在某些场景还是可以用一下的，比如，虽然用户定位了位置，但是，获取到的位置，还是你想给他定位的位置，虽然我也不知道有啥用，实际上直接在代码层面修改值就好了，但是我们还是可以再来看看这个类，NSProxy。\nNSProxy：一个抽象的超类，并且是不继承自NSObject的。可以通过它的API为其它的Object对象或者不存在的对象提供替身。\n一个很有趣的类，主要的存在是为了，解决NSTimer、CADisplayLink等循环引用的内存问题。\n\n然而，这个博主所说的这个方法并不能实现模拟定位的效果，虽然按照他的那个方法，定位获取到的值，确实是修改了，但是，是在手机获取到你的实际定位之后，在数据返回给你的时候，插入的你自己实现的方法，所以实际上定位是没修改到的，只能是——我骗了我自己。\n\n\n## 2.探索\n\n在网上翻了翻后，发现网上对这个功能实现的提及极少，所以当时网上也没找到能用的资料，所以是有点灰心的，因为完全没方向，不知道怎么去做，但是，突然想起来，xcode自带的那个模拟定位的，是确实可以实现定位的，自己试了下。\n\n1.打开xcode，连接手机\n2.设置证书，选择手机启动\n3.选择头部菜单栏 Debug ——> Simulate Loaction ——> 选择自己需要定位的地址\n\n这里都是预置的一些地址，你也可以改成自己的想要定位到的其他地方，不过你需要创建一个后缀为gpx的文件，跟创建普通iOS文件 一样的，只是后缀不一样，在里面默认会已经把模版写好了，你直接改经纬度的值就好了，简不简单，然后，在\"Simulate Loaction\"里面选择的时候，选择自己的刚刚创建的文件就好了。\n\n这样操作后，你再换其他软件定位，你就可以看到，你的定位地址被改变了，这里确确实实是改变了。\n\n\n## 3.研究模拟定位\n\n当按照上面操作后，我就知道，如果要做这个功能，按照xcode里面那样肯定是可以的，只是现在要研究下xcoe里面是怎么修改定位的，改变方向后，在一个博主下面找到个这个[（地址在这）](https://www.secrss.com/articles/5630)。\n在这个博主的文章里面，找到了，关键的两个东西，一个是xcode里面是可以做模拟定位的，而且不需要越狱，第二个，要实现模拟定位，实际上iOS内部已经有了，你只需要开启这个服务，这个服务的名字就是：\n```\ncom.apple.dt.simulatelocation\n```\n苹果在Xcode6、iOS8.0开始提供了一个为设备模拟GPS位置的调试功能，其原理是通过usb获取设备句柄后开启设备内的服务(\"com.apple.dt.simulatelocation\")再通过固定坐标或GPX文件进行位置模拟。\n\n在这里，就可以知道，这个方法就是xcode里面模拟器使用的方法，具体的实现步骤就是\n\n1.手机连接外设\n2.通过外设获取手机句柄开启“com.apple.dt.simulatelocation”服务\n3.更改坐标。\n\n到这里，其实离我想的还差一点，我是想直接在手机内部做一个APP，实现模拟定位的功能，但是，目前看来，是不怎么容易的。\n这样想起来，之前看到的其他软件做这个功能的时候，不越狱，实际上也是刚刚这个步骤。\n\n至于开启服务的方式：\n[在这](https://juejin.cn/post/6844903975624376333)。\n","source":"_posts/2021/iOS-模拟定位.md","raw":"---\ntitle: iOS 探索——模拟定位\ndate: 2020-12-16 14:19:32\ntags: [iOS]\ncategory: [iOS]\n---\n\n最近在研究iOS的模拟定位，这里总结下我最近的研究心得。\n\n## 1.NSProxy（我骗了我自己）\n\n最开始研究这个东西的时候，在网上看到一篇文章，[（地址在这）](https://zhuanlan.zhihu.com/p/93145872),这个博主在里面用了一个方法，主要的理论就是，利用iOS里面NSProxy，这个类，在手机获取到用户定位，回调返回数据的时候，从中间插入你自己写的方法，来修改定位获取到的值，总的来说，这个方法，在某些场景还是可以用一下的，比如，虽然用户定位了位置，但是，获取到的位置，还是你想给他定位的位置，虽然我也不知道有啥用，实际上直接在代码层面修改值就好了，但是我们还是可以再来看看这个类，NSProxy。\nNSProxy：一个抽象的超类，并且是不继承自NSObject的。可以通过它的API为其它的Object对象或者不存在的对象提供替身。\n一个很有趣的类，主要的存在是为了，解决NSTimer、CADisplayLink等循环引用的内存问题。\n\n然而，这个博主所说的这个方法并不能实现模拟定位的效果，虽然按照他的那个方法，定位获取到的值，确实是修改了，但是，是在手机获取到你的实际定位之后，在数据返回给你的时候，插入的你自己实现的方法，所以实际上定位是没修改到的，只能是——我骗了我自己。\n\n\n## 2.探索\n\n在网上翻了翻后，发现网上对这个功能实现的提及极少，所以当时网上也没找到能用的资料，所以是有点灰心的，因为完全没方向，不知道怎么去做，但是，突然想起来，xcode自带的那个模拟定位的，是确实可以实现定位的，自己试了下。\n\n1.打开xcode，连接手机\n2.设置证书，选择手机启动\n3.选择头部菜单栏 Debug ——> Simulate Loaction ——> 选择自己需要定位的地址\n\n这里都是预置的一些地址，你也可以改成自己的想要定位到的其他地方，不过你需要创建一个后缀为gpx的文件，跟创建普通iOS文件 一样的，只是后缀不一样，在里面默认会已经把模版写好了，你直接改经纬度的值就好了，简不简单，然后，在\"Simulate Loaction\"里面选择的时候，选择自己的刚刚创建的文件就好了。\n\n这样操作后，你再换其他软件定位，你就可以看到，你的定位地址被改变了，这里确确实实是改变了。\n\n\n## 3.研究模拟定位\n\n当按照上面操作后，我就知道，如果要做这个功能，按照xcode里面那样肯定是可以的，只是现在要研究下xcoe里面是怎么修改定位的，改变方向后，在一个博主下面找到个这个[（地址在这）](https://www.secrss.com/articles/5630)。\n在这个博主的文章里面，找到了，关键的两个东西，一个是xcode里面是可以做模拟定位的，而且不需要越狱，第二个，要实现模拟定位，实际上iOS内部已经有了，你只需要开启这个服务，这个服务的名字就是：\n```\ncom.apple.dt.simulatelocation\n```\n苹果在Xcode6、iOS8.0开始提供了一个为设备模拟GPS位置的调试功能，其原理是通过usb获取设备句柄后开启设备内的服务(\"com.apple.dt.simulatelocation\")再通过固定坐标或GPX文件进行位置模拟。\n\n在这里，就可以知道，这个方法就是xcode里面模拟器使用的方法，具体的实现步骤就是\n\n1.手机连接外设\n2.通过外设获取手机句柄开启“com.apple.dt.simulatelocation”服务\n3.更改坐标。\n\n到这里，其实离我想的还差一点，我是想直接在手机内部做一个APP，实现模拟定位的功能，但是，目前看来，是不怎么容易的。\n这样想起来，之前看到的其他软件做这个功能的时候，不越狱，实际上也是刚刚这个步骤。\n\n至于开启服务的方式：\n[在这](https://juejin.cn/post/6844903975624376333)。\n","slug":"2021/iOS-模拟定位","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofgly001ig0vgduqhagrs","content":"<p>最近在研究iOS的模拟定位，这里总结下我最近的研究心得。</p>\n<h2 id=\"1-NSProxy（我骗了我自己）\"><a href=\"#1-NSProxy（我骗了我自己）\" class=\"headerlink\" title=\"1.NSProxy（我骗了我自己）\"></a>1.NSProxy（我骗了我自己）</h2><p>最开始研究这个东西的时候，在网上看到一篇文章，<a href=\"https://zhuanlan.zhihu.com/p/93145872\">（地址在这）</a>,这个博主在里面用了一个方法，主要的理论就是，利用iOS里面NSProxy，这个类，在手机获取到用户定位，回调返回数据的时候，从中间插入你自己写的方法，来修改定位获取到的值，总的来说，这个方法，在某些场景还是可以用一下的，比如，虽然用户定位了位置，但是，获取到的位置，还是你想给他定位的位置，虽然我也不知道有啥用，实际上直接在代码层面修改值就好了，但是我们还是可以再来看看这个类，NSProxy。<br>NSProxy：一个抽象的超类，并且是不继承自NSObject的。可以通过它的API为其它的Object对象或者不存在的对象提供替身。<br>一个很有趣的类，主要的存在是为了，解决NSTimer、CADisplayLink等循环引用的内存问题。</p>\n<p>然而，这个博主所说的这个方法并不能实现模拟定位的效果，虽然按照他的那个方法，定位获取到的值，确实是修改了，但是，是在手机获取到你的实际定位之后，在数据返回给你的时候，插入的你自己实现的方法，所以实际上定位是没修改到的，只能是——我骗了我自己。</p>\n<h2 id=\"2-探索\"><a href=\"#2-探索\" class=\"headerlink\" title=\"2.探索\"></a>2.探索</h2><p>在网上翻了翻后，发现网上对这个功能实现的提及极少，所以当时网上也没找到能用的资料，所以是有点灰心的，因为完全没方向，不知道怎么去做，但是，突然想起来，xcode自带的那个模拟定位的，是确实可以实现定位的，自己试了下。</p>\n<p>1.打开xcode，连接手机<br>2.设置证书，选择手机启动<br>3.选择头部菜单栏 Debug ——&gt; Simulate Loaction ——&gt; 选择自己需要定位的地址</p>\n<p>这里都是预置的一些地址，你也可以改成自己的想要定位到的其他地方，不过你需要创建一个后缀为gpx的文件，跟创建普通iOS文件 一样的，只是后缀不一样，在里面默认会已经把模版写好了，你直接改经纬度的值就好了，简不简单，然后，在”Simulate Loaction”里面选择的时候，选择自己的刚刚创建的文件就好了。</p>\n<p>这样操作后，你再换其他软件定位，你就可以看到，你的定位地址被改变了，这里确确实实是改变了。</p>\n<h2 id=\"3-研究模拟定位\"><a href=\"#3-研究模拟定位\" class=\"headerlink\" title=\"3.研究模拟定位\"></a>3.研究模拟定位</h2><p>当按照上面操作后，我就知道，如果要做这个功能，按照xcode里面那样肯定是可以的，只是现在要研究下xcoe里面是怎么修改定位的，改变方向后，在一个博主下面找到个这个<a href=\"https://www.secrss.com/articles/5630\">（地址在这）</a>。<br>在这个博主的文章里面，找到了，关键的两个东西，一个是xcode里面是可以做模拟定位的，而且不需要越狱，第二个，要实现模拟定位，实际上iOS内部已经有了，你只需要开启这个服务，这个服务的名字就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.apple.dt.simulatelocation</span><br></pre></td></tr></table></figure>\n<p>苹果在Xcode6、iOS8.0开始提供了一个为设备模拟GPS位置的调试功能，其原理是通过usb获取设备句柄后开启设备内的服务(“com.apple.dt.simulatelocation”)再通过固定坐标或GPX文件进行位置模拟。</p>\n<p>在这里，就可以知道，这个方法就是xcode里面模拟器使用的方法，具体的实现步骤就是</p>\n<p>1.手机连接外设<br>2.通过外设获取手机句柄开启“com.apple.dt.simulatelocation”服务<br>3.更改坐标。</p>\n<p>到这里，其实离我想的还差一点，我是想直接在手机内部做一个APP，实现模拟定位的功能，但是，目前看来，是不怎么容易的。<br>这样想起来，之前看到的其他软件做这个功能的时候，不越狱，实际上也是刚刚这个步骤。</p>\n<p>至于开启服务的方式：<br><a href=\"https://juejin.cn/post/6844903975624376333\">在这</a>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在研究iOS的模拟定位，这里总结下我最近的研究心得。</p>\n<h2 id=\"1-NSProxy（我骗了我自己）\"><a href=\"#1-NSProxy（我骗了我自己）\" class=\"headerlink\" title=\"1.NSProxy（我骗了我自己）\"></a>1.NSProxy（我骗了我自己）</h2><p>最开始研究这个东西的时候，在网上看到一篇文章，<a href=\"https://zhuanlan.zhihu.com/p/93145872\">（地址在这）</a>,这个博主在里面用了一个方法，主要的理论就是，利用iOS里面NSProxy，这个类，在手机获取到用户定位，回调返回数据的时候，从中间插入你自己写的方法，来修改定位获取到的值，总的来说，这个方法，在某些场景还是可以用一下的，比如，虽然用户定位了位置，但是，获取到的位置，还是你想给他定位的位置，虽然我也不知道有啥用，实际上直接在代码层面修改值就好了，但是我们还是可以再来看看这个类，NSProxy。<br>NSProxy：一个抽象的超类，并且是不继承自NSObject的。可以通过它的API为其它的Object对象或者不存在的对象提供替身。<br>一个很有趣的类，主要的存在是为了，解决NSTimer、CADisplayLink等循环引用的内存问题。</p>\n<p>然而，这个博主所说的这个方法并不能实现模拟定位的效果，虽然按照他的那个方法，定位获取到的值，确实是修改了，但是，是在手机获取到你的实际定位之后，在数据返回给你的时候，插入的你自己实现的方法，所以实际上定位是没修改到的，只能是——我骗了我自己。</p>\n<h2 id=\"2-探索\"><a href=\"#2-探索\" class=\"headerlink\" title=\"2.探索\"></a>2.探索</h2><p>在网上翻了翻后，发现网上对这个功能实现的提及极少，所以当时网上也没找到能用的资料，所以是有点灰心的，因为完全没方向，不知道怎么去做，但是，突然想起来，xcode自带的那个模拟定位的，是确实可以实现定位的，自己试了下。</p>\n<p>1.打开xcode，连接手机<br>2.设置证书，选择手机启动<br>3.选择头部菜单栏 Debug ——&gt; Simulate Loaction ——&gt; 选择自己需要定位的地址</p>\n<p>这里都是预置的一些地址，你也可以改成自己的想要定位到的其他地方，不过你需要创建一个后缀为gpx的文件，跟创建普通iOS文件 一样的，只是后缀不一样，在里面默认会已经把模版写好了，你直接改经纬度的值就好了，简不简单，然后，在”Simulate Loaction”里面选择的时候，选择自己的刚刚创建的文件就好了。</p>\n<p>这样操作后，你再换其他软件定位，你就可以看到，你的定位地址被改变了，这里确确实实是改变了。</p>\n<h2 id=\"3-研究模拟定位\"><a href=\"#3-研究模拟定位\" class=\"headerlink\" title=\"3.研究模拟定位\"></a>3.研究模拟定位</h2><p>当按照上面操作后，我就知道，如果要做这个功能，按照xcode里面那样肯定是可以的，只是现在要研究下xcoe里面是怎么修改定位的，改变方向后，在一个博主下面找到个这个<a href=\"https://www.secrss.com/articles/5630\">（地址在这）</a>。<br>在这个博主的文章里面，找到了，关键的两个东西，一个是xcode里面是可以做模拟定位的，而且不需要越狱，第二个，要实现模拟定位，实际上iOS内部已经有了，你只需要开启这个服务，这个服务的名字就是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.apple.dt.simulatelocation</span><br></pre></td></tr></table></figure>\n<p>苹果在Xcode6、iOS8.0开始提供了一个为设备模拟GPS位置的调试功能，其原理是通过usb获取设备句柄后开启设备内的服务(“com.apple.dt.simulatelocation”)再通过固定坐标或GPX文件进行位置模拟。</p>\n<p>在这里，就可以知道，这个方法就是xcode里面模拟器使用的方法，具体的实现步骤就是</p>\n<p>1.手机连接外设<br>2.通过外设获取手机句柄开启“com.apple.dt.simulatelocation”服务<br>3.更改坐标。</p>\n<p>到这里，其实离我想的还差一点，我是想直接在手机内部做一个APP，实现模拟定位的功能，但是，目前看来，是不怎么容易的。<br>这样想起来，之前看到的其他软件做这个功能的时候，不越狱，实际上也是刚刚这个步骤。</p>\n<p>至于开启服务的方式：<br><a href=\"https://juejin.cn/post/6844903975624376333\">在这</a>。</p>\n"},{"title":"iOS之开屏页图片加载问题","date":"2022-10-28T08:37:47.000Z","_content":"\n### 项目背景：\n\n我们的开屏页面是基于LaunchScreen的写的，就是先跳转到这个页面，然后定时再跳到首页，从而实现的开屏动画。\n前段时间，有一个需求是更改开屏页面，就是换两个图片的问题，以为很简单的，结果折腾的不轻。\n    \n### 问题：\n\n我们的开屏页面是两个图片，需求也就是替换这两张图片，我在Xcode上替换了这两张图片，显示，没问题，然后真机调试的时候，发现我手机进入APP的时候，开屏页面变成了全白，两张图片都不见了，然后我检查了很久发现我放的是正常的，图片也没问题，图片格式也没问题，显示的白色是LaunchScreen的背景色。\n因为那天是晚上了，我就没解决，直接回去了，第二天过来解决的时候，发现真机调试又好了，显示正常，但是在其他的手机上面又是昨天的那个问题，显示的不正常。\n\n\n### 探索：\n\n因为之前没遇到过这样子的问题，在网上尝试搜索相关问题，倒是找到了几个类似的，但是尝试后发现，网上的办法都不太行，新装的手机还是会白屏，甚至于，会不会隔一段时间变好都是未知数，所以这个问题需要彻底解决下。\n\n然后我撤回操作，发现之前的图片是好的，也就是说之前的图片是可以正常加载的，换成项目之前就存在的的任何图片都是可以的，所以，我就产生了疑惑，为什么之前图片都可以，还有为什么白屏要隔一段时间才正常，所以，我猜想是不是某些类似数据路径或者缓存的问题，因为之前的图片已经存在了，并且正确加载了，所以系统能正确的找到，新加的图片由于某些原因，系统不能找到。\n\n\n### 解决：\n\n基于这个猜想，我尝试不用常规的导入图片的方式，将图片放到Assets库里面，我直接在项目中“add”文件，也就是Xcode的菜单栏上面 的导入功能，File->Add file to xxxx\n\n然后，再在LaunchScreen使用导入的图片，结果，果然第一次就正常加载出来图片了，并且其他测试手机也是可以正常加载的。\n\n### 总结：\n\n虽然是个简单的操作和开发，但是涉及到的坑很深，猜想应该是系统某些缓存导致新加入到Assets里面的图片路径设置的不正确。或者对于某个系统来说不正确，所以拿不到正确的图片路径，导致的开屏页面的白屏，然后用系统导入的方法，系统会补充某个路径，才能正常使用，总之，也是解决了一个坑\n","source":"_posts/2022/iOS之开屏页图片加载问题.md","raw":"---\ntitle: iOS之开屏页图片加载问题\ndate: 2022-10-28 16:37:47\ntags: [iOS]\ncategory: [iOS]\n---\n\n### 项目背景：\n\n我们的开屏页面是基于LaunchScreen的写的，就是先跳转到这个页面，然后定时再跳到首页，从而实现的开屏动画。\n前段时间，有一个需求是更改开屏页面，就是换两个图片的问题，以为很简单的，结果折腾的不轻。\n    \n### 问题：\n\n我们的开屏页面是两个图片，需求也就是替换这两张图片，我在Xcode上替换了这两张图片，显示，没问题，然后真机调试的时候，发现我手机进入APP的时候，开屏页面变成了全白，两张图片都不见了，然后我检查了很久发现我放的是正常的，图片也没问题，图片格式也没问题，显示的白色是LaunchScreen的背景色。\n因为那天是晚上了，我就没解决，直接回去了，第二天过来解决的时候，发现真机调试又好了，显示正常，但是在其他的手机上面又是昨天的那个问题，显示的不正常。\n\n\n### 探索：\n\n因为之前没遇到过这样子的问题，在网上尝试搜索相关问题，倒是找到了几个类似的，但是尝试后发现，网上的办法都不太行，新装的手机还是会白屏，甚至于，会不会隔一段时间变好都是未知数，所以这个问题需要彻底解决下。\n\n然后我撤回操作，发现之前的图片是好的，也就是说之前的图片是可以正常加载的，换成项目之前就存在的的任何图片都是可以的，所以，我就产生了疑惑，为什么之前图片都可以，还有为什么白屏要隔一段时间才正常，所以，我猜想是不是某些类似数据路径或者缓存的问题，因为之前的图片已经存在了，并且正确加载了，所以系统能正确的找到，新加的图片由于某些原因，系统不能找到。\n\n\n### 解决：\n\n基于这个猜想，我尝试不用常规的导入图片的方式，将图片放到Assets库里面，我直接在项目中“add”文件，也就是Xcode的菜单栏上面 的导入功能，File->Add file to xxxx\n\n然后，再在LaunchScreen使用导入的图片，结果，果然第一次就正常加载出来图片了，并且其他测试手机也是可以正常加载的。\n\n### 总结：\n\n虽然是个简单的操作和开发，但是涉及到的坑很深，猜想应该是系统某些缓存导致新加入到Assets里面的图片路径设置的不正确。或者对于某个系统来说不正确，所以拿不到正确的图片路径，导致的开屏页面的白屏，然后用系统导入的方法，系统会补充某个路径，才能正常使用，总之，也是解决了一个坑\n","slug":"2022/iOS之开屏页图片加载问题","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofglz001lg0vg6keway5p","content":"<h3 id=\"项目背景：\"><a href=\"#项目背景：\" class=\"headerlink\" title=\"项目背景：\"></a>项目背景：</h3><p>我们的开屏页面是基于LaunchScreen的写的，就是先跳转到这个页面，然后定时再跳到首页，从而实现的开屏动画。<br>前段时间，有一个需求是更改开屏页面，就是换两个图片的问题，以为很简单的，结果折腾的不轻。</p>\n<h3 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h3><p>我们的开屏页面是两个图片，需求也就是替换这两张图片，我在Xcode上替换了这两张图片，显示，没问题，然后真机调试的时候，发现我手机进入APP的时候，开屏页面变成了全白，两张图片都不见了，然后我检查了很久发现我放的是正常的，图片也没问题，图片格式也没问题，显示的白色是LaunchScreen的背景色。<br>因为那天是晚上了，我就没解决，直接回去了，第二天过来解决的时候，发现真机调试又好了，显示正常，但是在其他的手机上面又是昨天的那个问题，显示的不正常。</p>\n<h3 id=\"探索：\"><a href=\"#探索：\" class=\"headerlink\" title=\"探索：\"></a>探索：</h3><p>因为之前没遇到过这样子的问题，在网上尝试搜索相关问题，倒是找到了几个类似的，但是尝试后发现，网上的办法都不太行，新装的手机还是会白屏，甚至于，会不会隔一段时间变好都是未知数，所以这个问题需要彻底解决下。</p>\n<p>然后我撤回操作，发现之前的图片是好的，也就是说之前的图片是可以正常加载的，换成项目之前就存在的的任何图片都是可以的，所以，我就产生了疑惑，为什么之前图片都可以，还有为什么白屏要隔一段时间才正常，所以，我猜想是不是某些类似数据路径或者缓存的问题，因为之前的图片已经存在了，并且正确加载了，所以系统能正确的找到，新加的图片由于某些原因，系统不能找到。</p>\n<h3 id=\"解决：\"><a href=\"#解决：\" class=\"headerlink\" title=\"解决：\"></a>解决：</h3><p>基于这个猜想，我尝试不用常规的导入图片的方式，将图片放到Assets库里面，我直接在项目中“add”文件，也就是Xcode的菜单栏上面 的导入功能，File-&gt;Add file to xxxx</p>\n<p>然后，再在LaunchScreen使用导入的图片，结果，果然第一次就正常加载出来图片了，并且其他测试手机也是可以正常加载的。</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>虽然是个简单的操作和开发，但是涉及到的坑很深，猜想应该是系统某些缓存导致新加入到Assets里面的图片路径设置的不正确。或者对于某个系统来说不正确，所以拿不到正确的图片路径，导致的开屏页面的白屏，然后用系统导入的方法，系统会补充某个路径，才能正常使用，总之，也是解决了一个坑</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"项目背景：\"><a href=\"#项目背景：\" class=\"headerlink\" title=\"项目背景：\"></a>项目背景：</h3><p>我们的开屏页面是基于LaunchScreen的写的，就是先跳转到这个页面，然后定时再跳到首页，从而实现的开屏动画。<br>前段时间，有一个需求是更改开屏页面，就是换两个图片的问题，以为很简单的，结果折腾的不轻。</p>\n<h3 id=\"问题：\"><a href=\"#问题：\" class=\"headerlink\" title=\"问题：\"></a>问题：</h3><p>我们的开屏页面是两个图片，需求也就是替换这两张图片，我在Xcode上替换了这两张图片，显示，没问题，然后真机调试的时候，发现我手机进入APP的时候，开屏页面变成了全白，两张图片都不见了，然后我检查了很久发现我放的是正常的，图片也没问题，图片格式也没问题，显示的白色是LaunchScreen的背景色。<br>因为那天是晚上了，我就没解决，直接回去了，第二天过来解决的时候，发现真机调试又好了，显示正常，但是在其他的手机上面又是昨天的那个问题，显示的不正常。</p>\n<h3 id=\"探索：\"><a href=\"#探索：\" class=\"headerlink\" title=\"探索：\"></a>探索：</h3><p>因为之前没遇到过这样子的问题，在网上尝试搜索相关问题，倒是找到了几个类似的，但是尝试后发现，网上的办法都不太行，新装的手机还是会白屏，甚至于，会不会隔一段时间变好都是未知数，所以这个问题需要彻底解决下。</p>\n<p>然后我撤回操作，发现之前的图片是好的，也就是说之前的图片是可以正常加载的，换成项目之前就存在的的任何图片都是可以的，所以，我就产生了疑惑，为什么之前图片都可以，还有为什么白屏要隔一段时间才正常，所以，我猜想是不是某些类似数据路径或者缓存的问题，因为之前的图片已经存在了，并且正确加载了，所以系统能正确的找到，新加的图片由于某些原因，系统不能找到。</p>\n<h3 id=\"解决：\"><a href=\"#解决：\" class=\"headerlink\" title=\"解决：\"></a>解决：</h3><p>基于这个猜想，我尝试不用常规的导入图片的方式，将图片放到Assets库里面，我直接在项目中“add”文件，也就是Xcode的菜单栏上面 的导入功能，File-&gt;Add file to xxxx</p>\n<p>然后，再在LaunchScreen使用导入的图片，结果，果然第一次就正常加载出来图片了，并且其他测试手机也是可以正常加载的。</p>\n<h3 id=\"总结：\"><a href=\"#总结：\" class=\"headerlink\" title=\"总结：\"></a>总结：</h3><p>虽然是个简单的操作和开发，但是涉及到的坑很深，猜想应该是系统某些缓存导致新加入到Assets里面的图片路径设置的不正确。或者对于某个系统来说不正确，所以拿不到正确的图片路径，导致的开屏页面的白屏，然后用系统导入的方法，系统会补充某个路径，才能正常使用，总之，也是解决了一个坑</p>\n"},{"title":"iOS安全之请求客户端单向加密","date":"2022-01-11T09:04:36.000Z","_content":"\n先了解一波一般的抓包原理：一般抓包都是通过代理服务来冒充你的服务器，客户端真正交互的是这个假冒的代理服务，这个假冒的服务再和我们真正的服务交互，这个代理就是一个中间者，我们所有的数据都会通过这个中间者，所以我们的数据就会被抓取。HTTPS 也同样会被这个中间者伪造的证书来获取我们加密的数据。\n\n那么，我们针对这个代理抓包可以做两个处理：\n第一个，简单的，做数据请求前，判断有没有代理;\n第二个，如果是HTTPS的话，就就是判断HTTPS证书的合法性;\n\n这里主要是对第二个方法做说明，主要用方法叫SSL Pinning，即SSL证书绑定，\n通过SSL证书绑定来验证服务器身份，防止应用被抓包。\n\n针对Swift，可以依赖Alamofire库，来进行证书验证，OC的话可以用AFNetworking。\n\n主要分为五步：\n1.从服务器取的证书；\n2.导入证书；\n3.导入Alamofire库；\n4.设置本地Session；\n5.使用我们自己的Session做请求；\n\n### 1.从服务器取的证书\n\n这里的证书指的是服务端HTTPS的SSL证书，证书有很多后缀比如: .cer，.pem ，.crt，以及.p12等，当然不止这一些，但是最好是用后缀是cer的证书。\n\n如果服务器给的是如果他们给个.pem文件，要使用命令行转换：\n\nopenssl x509 -inform PEM -in name.pem -outform DER -out name.cer\n\n\n如果给了个.crt文件，请这样转换：\n\nopenssl x509 -in name.crt -out name.cer -outform der\n\n\n一般我们拿到后台人员导出的证书，会用到两个，一个是后缀名为cer(或者其他)的包含公钥的CA证书，用来让客户端对服务器进行验证；一个是后缀名为p12的客户端证书，用来让服务器对客户端进行验证,但是，我们要做的只要客户端对服务器端进行验证就好了，也就是我们只需要使用后缀为.cer的CA证书，当然，最安全的肯定是双向验证。\n\n### 2.导入证书\n\n1.通过Xcode左上角\"File\" -->  Add File to \"xxxx\"\n将证书文件导入到项目\n\n![导入文件](/images/iOS安全之HTTPS加密/1.png)\n\n在这里要注意下添加完之后，在项目的\"Build Phases\" -->   \"Copy Bundle Resoures\" 目录里面应该是能找到证书文件的，如果没有找到，就需要在这个目录中再手动添加下\n\n![检查文件](/images/iOS安全之HTTPS加密/2.png)\n\n\n### 3.导入Alamofire库\n\nCocoaPods导入： \n```\n\npod 'Alamofire', '~> 5.5'\n\n```\n\nCarthage导入： \n```\n\ngithub \"Alamofire/Alamofire\" ~> 5.5\n\n```\n\nSwift Package Manager导入： \n```\n\ndependencies: [\n    .package(url: \"https://github.com/Alamofire/Alamofire.git\", .upToNextMajor(from: \"5.5.0\"))\n]\n\n```\n\n\n### 4.设置本地Session\n\nAlamofire的每一次请求都是由一个Session来维护的，本身会有一个默认的Session，叫 “Session.default”,我们要做的就是写一个有我们自己设置的Session对象，来做后续的请求,最好这个Session对象是由一个单例持有来维护的。\n\n```\nstruct NetworkClient {\n  \n  \n  struct Certificates {\n    \n    //获取本地证书的方法\n    static let URLCer = Certificates.certificate(filename: \"MyChain\")\n    private static func certificate(filename: String) -> SecCertificate {\n      let filePath = Bundle.main.path(forResource: filename, ofType: \"cer\")!\n      let data = try! Data(contentsOf: URL(fileURLWithPath: filePath))\n      return SecCertificateCreateWithData(nil, data as CFData)!\n    }\n  }\n  \n  static let shared = NetworkClient()\n\n//我们自己的session\n  let session: Session\n    //设置正确的服务器地址以及证书\n  let evaluators = [\n    \"xxxxx.xxxx.com\": PinnedCertificatesTrustEvaluator(certificates: [Certificates.URLCer]),\n\n  ]\n\n  init() {\n    //session的设置\n    let manager = ServerTrustManager(evaluators: self.evaluators)\n    self.session = Session(configuration:URLSessionConfiguration.default,serverTrustManager: manager)\n    \n  }\n  \n}\n\n```\n\n### 5.使用我们自己的Session做请求\n\n在我们做数据请求的地方将之前写的Session.request替换成我们自己的xxxx.shared.session.request就好了.一般是替换\"AF.request\"\n\n\n至此，其实我们已经实现了客户端对服务器的验证，这样在每次请求前，客户端这边都会验证服务器的证书，如果被代理抓包的话，就会显示警告，抓取不到数据的。\n\n\n### 6.扩展\n\n其实在设置证书的位置，我们可以添加不用的验证方式，Alamofire提供的有6种:\n```\n\nDefaultTrustEvaluator: Uses the default server trust evaluation while allowing you to control whether to validate the host provided by the challenge.\nRevocationTrustEvaluator: Checks the status of the received certificate to ensure it hasn’t been revoked. This isn’t usually performed on every request due to the network request overhead it entails.\nPinnedCertificatesTrustEvaluator: Uses the provided certificates to validate the server trust. The server trust is considered valid if one of the pinned certificates match one of the server certificates. This evaluator can also accept self-signed certificates.\nPublicKeysTrustEvaluator: Uses the provided public keys to validate the server trust. The server trust is considered valid if one of the pinned public keys match one of the server certificate public keys.\nCompositeTrustEvaluator: Evaluates an array of ServerTrustEvaluating values, only succeeding if all of them are successful. This type can be used to combine, for example, the RevocationTrustEvaluator and the PinnedCertificatesTrustEvaluator.\nDisabledTrustEvaluator: This evaluator should only be used in debug scenarios as it disables all evaluation which in turn will always consider any server trust as valid. This evaluator should never be used in production environments!\n\n```\n\n使用如下:\n```\n\nlet evaluators: [String: ServerTrustEvaluating] = [\n    // By default, certificates included in the app bundle are pinned automatically.\n    \"cert.example.com\": PinnedCertificatesTrustEvaluator(),\n    // By default, public keys from certificates included in the app bundle are used automatically.\n    \"keys.example.com\": PublicKeysTrustEvaluator(),\n]\n\nlet manager = ServerTrustManager(evaluators: evaluators)\n\n```\n\n这是一个验证方式的键值对，key是服务器地址，value值是验证方式\n\n参考：https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#security\n","source":"_posts/2022/iOS安全之HTTPS加密.md","raw":"---\ntitle: iOS安全之请求客户端单向加密\ndate: 2022-01-11 17:04:36\ntags: [Swift,安全]\ncategory: [iOS]\n---\n\n先了解一波一般的抓包原理：一般抓包都是通过代理服务来冒充你的服务器，客户端真正交互的是这个假冒的代理服务，这个假冒的服务再和我们真正的服务交互，这个代理就是一个中间者，我们所有的数据都会通过这个中间者，所以我们的数据就会被抓取。HTTPS 也同样会被这个中间者伪造的证书来获取我们加密的数据。\n\n那么，我们针对这个代理抓包可以做两个处理：\n第一个，简单的，做数据请求前，判断有没有代理;\n第二个，如果是HTTPS的话，就就是判断HTTPS证书的合法性;\n\n这里主要是对第二个方法做说明，主要用方法叫SSL Pinning，即SSL证书绑定，\n通过SSL证书绑定来验证服务器身份，防止应用被抓包。\n\n针对Swift，可以依赖Alamofire库，来进行证书验证，OC的话可以用AFNetworking。\n\n主要分为五步：\n1.从服务器取的证书；\n2.导入证书；\n3.导入Alamofire库；\n4.设置本地Session；\n5.使用我们自己的Session做请求；\n\n### 1.从服务器取的证书\n\n这里的证书指的是服务端HTTPS的SSL证书，证书有很多后缀比如: .cer，.pem ，.crt，以及.p12等，当然不止这一些，但是最好是用后缀是cer的证书。\n\n如果服务器给的是如果他们给个.pem文件，要使用命令行转换：\n\nopenssl x509 -inform PEM -in name.pem -outform DER -out name.cer\n\n\n如果给了个.crt文件，请这样转换：\n\nopenssl x509 -in name.crt -out name.cer -outform der\n\n\n一般我们拿到后台人员导出的证书，会用到两个，一个是后缀名为cer(或者其他)的包含公钥的CA证书，用来让客户端对服务器进行验证；一个是后缀名为p12的客户端证书，用来让服务器对客户端进行验证,但是，我们要做的只要客户端对服务器端进行验证就好了，也就是我们只需要使用后缀为.cer的CA证书，当然，最安全的肯定是双向验证。\n\n### 2.导入证书\n\n1.通过Xcode左上角\"File\" -->  Add File to \"xxxx\"\n将证书文件导入到项目\n\n![导入文件](/images/iOS安全之HTTPS加密/1.png)\n\n在这里要注意下添加完之后，在项目的\"Build Phases\" -->   \"Copy Bundle Resoures\" 目录里面应该是能找到证书文件的，如果没有找到，就需要在这个目录中再手动添加下\n\n![检查文件](/images/iOS安全之HTTPS加密/2.png)\n\n\n### 3.导入Alamofire库\n\nCocoaPods导入： \n```\n\npod 'Alamofire', '~> 5.5'\n\n```\n\nCarthage导入： \n```\n\ngithub \"Alamofire/Alamofire\" ~> 5.5\n\n```\n\nSwift Package Manager导入： \n```\n\ndependencies: [\n    .package(url: \"https://github.com/Alamofire/Alamofire.git\", .upToNextMajor(from: \"5.5.0\"))\n]\n\n```\n\n\n### 4.设置本地Session\n\nAlamofire的每一次请求都是由一个Session来维护的，本身会有一个默认的Session，叫 “Session.default”,我们要做的就是写一个有我们自己设置的Session对象，来做后续的请求,最好这个Session对象是由一个单例持有来维护的。\n\n```\nstruct NetworkClient {\n  \n  \n  struct Certificates {\n    \n    //获取本地证书的方法\n    static let URLCer = Certificates.certificate(filename: \"MyChain\")\n    private static func certificate(filename: String) -> SecCertificate {\n      let filePath = Bundle.main.path(forResource: filename, ofType: \"cer\")!\n      let data = try! Data(contentsOf: URL(fileURLWithPath: filePath))\n      return SecCertificateCreateWithData(nil, data as CFData)!\n    }\n  }\n  \n  static let shared = NetworkClient()\n\n//我们自己的session\n  let session: Session\n    //设置正确的服务器地址以及证书\n  let evaluators = [\n    \"xxxxx.xxxx.com\": PinnedCertificatesTrustEvaluator(certificates: [Certificates.URLCer]),\n\n  ]\n\n  init() {\n    //session的设置\n    let manager = ServerTrustManager(evaluators: self.evaluators)\n    self.session = Session(configuration:URLSessionConfiguration.default,serverTrustManager: manager)\n    \n  }\n  \n}\n\n```\n\n### 5.使用我们自己的Session做请求\n\n在我们做数据请求的地方将之前写的Session.request替换成我们自己的xxxx.shared.session.request就好了.一般是替换\"AF.request\"\n\n\n至此，其实我们已经实现了客户端对服务器的验证，这样在每次请求前，客户端这边都会验证服务器的证书，如果被代理抓包的话，就会显示警告，抓取不到数据的。\n\n\n### 6.扩展\n\n其实在设置证书的位置，我们可以添加不用的验证方式，Alamofire提供的有6种:\n```\n\nDefaultTrustEvaluator: Uses the default server trust evaluation while allowing you to control whether to validate the host provided by the challenge.\nRevocationTrustEvaluator: Checks the status of the received certificate to ensure it hasn’t been revoked. This isn’t usually performed on every request due to the network request overhead it entails.\nPinnedCertificatesTrustEvaluator: Uses the provided certificates to validate the server trust. The server trust is considered valid if one of the pinned certificates match one of the server certificates. This evaluator can also accept self-signed certificates.\nPublicKeysTrustEvaluator: Uses the provided public keys to validate the server trust. The server trust is considered valid if one of the pinned public keys match one of the server certificate public keys.\nCompositeTrustEvaluator: Evaluates an array of ServerTrustEvaluating values, only succeeding if all of them are successful. This type can be used to combine, for example, the RevocationTrustEvaluator and the PinnedCertificatesTrustEvaluator.\nDisabledTrustEvaluator: This evaluator should only be used in debug scenarios as it disables all evaluation which in turn will always consider any server trust as valid. This evaluator should never be used in production environments!\n\n```\n\n使用如下:\n```\n\nlet evaluators: [String: ServerTrustEvaluating] = [\n    // By default, certificates included in the app bundle are pinned automatically.\n    \"cert.example.com\": PinnedCertificatesTrustEvaluator(),\n    // By default, public keys from certificates included in the app bundle are used automatically.\n    \"keys.example.com\": PublicKeysTrustEvaluator(),\n]\n\nlet manager = ServerTrustManager(evaluators: evaluators)\n\n```\n\n这是一个验证方式的键值对，key是服务器地址，value值是验证方式\n\n参考：https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#security\n","slug":"2022/iOS安全之HTTPS加密","published":1,"updated":"2022-12-04T01:45:07.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clt2ofgm0001qg0vg33gxhp0z","content":"<p>先了解一波一般的抓包原理：一般抓包都是通过代理服务来冒充你的服务器，客户端真正交互的是这个假冒的代理服务，这个假冒的服务再和我们真正的服务交互，这个代理就是一个中间者，我们所有的数据都会通过这个中间者，所以我们的数据就会被抓取。HTTPS 也同样会被这个中间者伪造的证书来获取我们加密的数据。</p>\n<p>那么，我们针对这个代理抓包可以做两个处理：<br>第一个，简单的，做数据请求前，判断有没有代理;<br>第二个，如果是HTTPS的话，就就是判断HTTPS证书的合法性;</p>\n<p>这里主要是对第二个方法做说明，主要用方法叫SSL Pinning，即SSL证书绑定，<br>通过SSL证书绑定来验证服务器身份，防止应用被抓包。</p>\n<p>针对Swift，可以依赖Alamofire库，来进行证书验证，OC的话可以用AFNetworking。</p>\n<p>主要分为五步：<br>1.从服务器取的证书；<br>2.导入证书；<br>3.导入Alamofire库；<br>4.设置本地Session；<br>5.使用我们自己的Session做请求；</p>\n<h3 id=\"1-从服务器取的证书\"><a href=\"#1-从服务器取的证书\" class=\"headerlink\" title=\"1.从服务器取的证书\"></a>1.从服务器取的证书</h3><p>这里的证书指的是服务端HTTPS的SSL证书，证书有很多后缀比如: .cer，.pem ，.crt，以及.p12等，当然不止这一些，但是最好是用后缀是cer的证书。</p>\n<p>如果服务器给的是如果他们给个.pem文件，要使用命令行转换：</p>\n<p>openssl x509 -inform PEM -in name.pem -outform DER -out name.cer</p>\n<p>如果给了个.crt文件，请这样转换：</p>\n<p>openssl x509 -in name.crt -out name.cer -outform der</p>\n<p>一般我们拿到后台人员导出的证书，会用到两个，一个是后缀名为cer(或者其他)的包含公钥的CA证书，用来让客户端对服务器进行验证；一个是后缀名为p12的客户端证书，用来让服务器对客户端进行验证,但是，我们要做的只要客户端对服务器端进行验证就好了，也就是我们只需要使用后缀为.cer的CA证书，当然，最安全的肯定是双向验证。</p>\n<h3 id=\"2-导入证书\"><a href=\"#2-导入证书\" class=\"headerlink\" title=\"2.导入证书\"></a>2.导入证书</h3><p>1.通过Xcode左上角”File” –&gt;  Add File to “xxxx”<br>将证书文件导入到项目</p>\n<p><img src=\"/images/iOS%E5%AE%89%E5%85%A8%E4%B9%8BHTTPS%E5%8A%A0%E5%AF%86/1.png\" alt=\"导入文件\"></p>\n<p>在这里要注意下添加完之后，在项目的”Build Phases” –&gt;   “Copy Bundle Resoures” 目录里面应该是能找到证书文件的，如果没有找到，就需要在这个目录中再手动添加下</p>\n<p><img src=\"/images/iOS%E5%AE%89%E5%85%A8%E4%B9%8BHTTPS%E5%8A%A0%E5%AF%86/2.png\" alt=\"检查文件\"></p>\n<h3 id=\"3-导入Alamofire库\"><a href=\"#3-导入Alamofire库\" class=\"headerlink\" title=\"3.导入Alamofire库\"></a>3.导入Alamofire库</h3><p>CocoaPods导入： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pod &#x27;Alamofire&#x27;, &#x27;~&gt; 5.5&#x27;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Carthage导入： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">github &quot;Alamofire/Alamofire&quot; ~&gt; 5.5</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Swift Package Manager导入： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">dependencies: [</span><br><span class=\"line\">    .package(url: &quot;https://github.com/Alamofire/Alamofire.git&quot;, .upToNextMajor(from: &quot;5.5.0&quot;))</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4-设置本地Session\"><a href=\"#4-设置本地Session\" class=\"headerlink\" title=\"4.设置本地Session\"></a>4.设置本地Session</h3><p>Alamofire的每一次请求都是由一个Session来维护的，本身会有一个默认的Session，叫 “Session.default”,我们要做的就是写一个有我们自己设置的Session对象，来做后续的请求,最好这个Session对象是由一个单例持有来维护的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct NetworkClient &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  struct Certificates &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //获取本地证书的方法</span><br><span class=\"line\">    static let URLCer = Certificates.certificate(filename: &quot;MyChain&quot;)</span><br><span class=\"line\">    private static func certificate(filename: String) -&gt; SecCertificate &#123;</span><br><span class=\"line\">      let filePath = Bundle.main.path(forResource: filename, ofType: &quot;cer&quot;)!</span><br><span class=\"line\">      let data = try! Data(contentsOf: URL(fileURLWithPath: filePath))</span><br><span class=\"line\">      return SecCertificateCreateWithData(nil, data as CFData)!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  static let shared = NetworkClient()</span><br><span class=\"line\"></span><br><span class=\"line\">//我们自己的session</span><br><span class=\"line\">  let session: Session</span><br><span class=\"line\">    //设置正确的服务器地址以及证书</span><br><span class=\"line\">  let evaluators = [</span><br><span class=\"line\">    &quot;xxxxx.xxxx.com&quot;: PinnedCertificatesTrustEvaluator(certificates: [Certificates.URLCer]),</span><br><span class=\"line\"></span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\">  init() &#123;</span><br><span class=\"line\">    //session的设置</span><br><span class=\"line\">    let manager = ServerTrustManager(evaluators: self.evaluators)</span><br><span class=\"line\">    self.session = Session(configuration:URLSessionConfiguration.default,serverTrustManager: manager)</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-使用我们自己的Session做请求\"><a href=\"#5-使用我们自己的Session做请求\" class=\"headerlink\" title=\"5.使用我们自己的Session做请求\"></a>5.使用我们自己的Session做请求</h3><p>在我们做数据请求的地方将之前写的Session.request替换成我们自己的xxxx.shared.session.request就好了.一般是替换”AF.request”</p>\n<p>至此，其实我们已经实现了客户端对服务器的验证，这样在每次请求前，客户端这边都会验证服务器的证书，如果被代理抓包的话，就会显示警告，抓取不到数据的。</p>\n<h3 id=\"6-扩展\"><a href=\"#6-扩展\" class=\"headerlink\" title=\"6.扩展\"></a>6.扩展</h3><p>其实在设置证书的位置，我们可以添加不用的验证方式，Alamofire提供的有6种:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">DefaultTrustEvaluator: Uses the default server trust evaluation while allowing you to control whether to validate the host provided by the challenge.</span><br><span class=\"line\">RevocationTrustEvaluator: Checks the status of the received certificate to ensure it hasn’t been revoked. This isn’t usually performed on every request due to the network request overhead it entails.</span><br><span class=\"line\">PinnedCertificatesTrustEvaluator: Uses the provided certificates to validate the server trust. The server trust is considered valid if one of the pinned certificates match one of the server certificates. This evaluator can also accept self-signed certificates.</span><br><span class=\"line\">PublicKeysTrustEvaluator: Uses the provided public keys to validate the server trust. The server trust is considered valid if one of the pinned public keys match one of the server certificate public keys.</span><br><span class=\"line\">CompositeTrustEvaluator: Evaluates an array of ServerTrustEvaluating values, only succeeding if all of them are successful. This type can be used to combine, for example, the RevocationTrustEvaluator and the PinnedCertificatesTrustEvaluator.</span><br><span class=\"line\">DisabledTrustEvaluator: This evaluator should only be used in debug scenarios as it disables all evaluation which in turn will always consider any server trust as valid. This evaluator should never be used in production environments!</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">let evaluators: [String: ServerTrustEvaluating] = [</span><br><span class=\"line\">    // By default, certificates included in the app bundle are pinned automatically.</span><br><span class=\"line\">    &quot;cert.example.com&quot;: PinnedCertificatesTrustEvaluator(),</span><br><span class=\"line\">    // By default, public keys from certificates included in the app bundle are used automatically.</span><br><span class=\"line\">    &quot;keys.example.com&quot;: PublicKeysTrustEvaluator(),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">let manager = ServerTrustManager(evaluators: evaluators)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这是一个验证方式的键值对，key是服务器地址，value值是验证方式</p>\n<p>参考：<a href=\"https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#security\">https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#security</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>先了解一波一般的抓包原理：一般抓包都是通过代理服务来冒充你的服务器，客户端真正交互的是这个假冒的代理服务，这个假冒的服务再和我们真正的服务交互，这个代理就是一个中间者，我们所有的数据都会通过这个中间者，所以我们的数据就会被抓取。HTTPS 也同样会被这个中间者伪造的证书来获取我们加密的数据。</p>\n<p>那么，我们针对这个代理抓包可以做两个处理：<br>第一个，简单的，做数据请求前，判断有没有代理;<br>第二个，如果是HTTPS的话，就就是判断HTTPS证书的合法性;</p>\n<p>这里主要是对第二个方法做说明，主要用方法叫SSL Pinning，即SSL证书绑定，<br>通过SSL证书绑定来验证服务器身份，防止应用被抓包。</p>\n<p>针对Swift，可以依赖Alamofire库，来进行证书验证，OC的话可以用AFNetworking。</p>\n<p>主要分为五步：<br>1.从服务器取的证书；<br>2.导入证书；<br>3.导入Alamofire库；<br>4.设置本地Session；<br>5.使用我们自己的Session做请求；</p>\n<h3 id=\"1-从服务器取的证书\"><a href=\"#1-从服务器取的证书\" class=\"headerlink\" title=\"1.从服务器取的证书\"></a>1.从服务器取的证书</h3><p>这里的证书指的是服务端HTTPS的SSL证书，证书有很多后缀比如: .cer，.pem ，.crt，以及.p12等，当然不止这一些，但是最好是用后缀是cer的证书。</p>\n<p>如果服务器给的是如果他们给个.pem文件，要使用命令行转换：</p>\n<p>openssl x509 -inform PEM -in name.pem -outform DER -out name.cer</p>\n<p>如果给了个.crt文件，请这样转换：</p>\n<p>openssl x509 -in name.crt -out name.cer -outform der</p>\n<p>一般我们拿到后台人员导出的证书，会用到两个，一个是后缀名为cer(或者其他)的包含公钥的CA证书，用来让客户端对服务器进行验证；一个是后缀名为p12的客户端证书，用来让服务器对客户端进行验证,但是，我们要做的只要客户端对服务器端进行验证就好了，也就是我们只需要使用后缀为.cer的CA证书，当然，最安全的肯定是双向验证。</p>\n<h3 id=\"2-导入证书\"><a href=\"#2-导入证书\" class=\"headerlink\" title=\"2.导入证书\"></a>2.导入证书</h3><p>1.通过Xcode左上角”File” –&gt;  Add File to “xxxx”<br>将证书文件导入到项目</p>\n<p><img src=\"/images/iOS%E5%AE%89%E5%85%A8%E4%B9%8BHTTPS%E5%8A%A0%E5%AF%86/1.png\" alt=\"导入文件\"></p>\n<p>在这里要注意下添加完之后，在项目的”Build Phases” –&gt;   “Copy Bundle Resoures” 目录里面应该是能找到证书文件的，如果没有找到，就需要在这个目录中再手动添加下</p>\n<p><img src=\"/images/iOS%E5%AE%89%E5%85%A8%E4%B9%8BHTTPS%E5%8A%A0%E5%AF%86/2.png\" alt=\"检查文件\"></p>\n<h3 id=\"3-导入Alamofire库\"><a href=\"#3-导入Alamofire库\" class=\"headerlink\" title=\"3.导入Alamofire库\"></a>3.导入Alamofire库</h3><p>CocoaPods导入： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">pod &#x27;Alamofire&#x27;, &#x27;~&gt; 5.5&#x27;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Carthage导入： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">github &quot;Alamofire/Alamofire&quot; ~&gt; 5.5</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Swift Package Manager导入： </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">dependencies: [</span><br><span class=\"line\">    .package(url: &quot;https://github.com/Alamofire/Alamofire.git&quot;, .upToNextMajor(from: &quot;5.5.0&quot;))</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"4-设置本地Session\"><a href=\"#4-设置本地Session\" class=\"headerlink\" title=\"4.设置本地Session\"></a>4.设置本地Session</h3><p>Alamofire的每一次请求都是由一个Session来维护的，本身会有一个默认的Session，叫 “Session.default”,我们要做的就是写一个有我们自己设置的Session对象，来做后续的请求,最好这个Session对象是由一个单例持有来维护的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct NetworkClient &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  </span><br><span class=\"line\">  struct Certificates &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //获取本地证书的方法</span><br><span class=\"line\">    static let URLCer = Certificates.certificate(filename: &quot;MyChain&quot;)</span><br><span class=\"line\">    private static func certificate(filename: String) -&gt; SecCertificate &#123;</span><br><span class=\"line\">      let filePath = Bundle.main.path(forResource: filename, ofType: &quot;cer&quot;)!</span><br><span class=\"line\">      let data = try! Data(contentsOf: URL(fileURLWithPath: filePath))</span><br><span class=\"line\">      return SecCertificateCreateWithData(nil, data as CFData)!</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  static let shared = NetworkClient()</span><br><span class=\"line\"></span><br><span class=\"line\">//我们自己的session</span><br><span class=\"line\">  let session: Session</span><br><span class=\"line\">    //设置正确的服务器地址以及证书</span><br><span class=\"line\">  let evaluators = [</span><br><span class=\"line\">    &quot;xxxxx.xxxx.com&quot;: PinnedCertificatesTrustEvaluator(certificates: [Certificates.URLCer]),</span><br><span class=\"line\"></span><br><span class=\"line\">  ]</span><br><span class=\"line\"></span><br><span class=\"line\">  init() &#123;</span><br><span class=\"line\">    //session的设置</span><br><span class=\"line\">    let manager = ServerTrustManager(evaluators: self.evaluators)</span><br><span class=\"line\">    self.session = Session(configuration:URLSessionConfiguration.default,serverTrustManager: manager)</span><br><span class=\"line\">    </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-使用我们自己的Session做请求\"><a href=\"#5-使用我们自己的Session做请求\" class=\"headerlink\" title=\"5.使用我们自己的Session做请求\"></a>5.使用我们自己的Session做请求</h3><p>在我们做数据请求的地方将之前写的Session.request替换成我们自己的xxxx.shared.session.request就好了.一般是替换”AF.request”</p>\n<p>至此，其实我们已经实现了客户端对服务器的验证，这样在每次请求前，客户端这边都会验证服务器的证书，如果被代理抓包的话，就会显示警告，抓取不到数据的。</p>\n<h3 id=\"6-扩展\"><a href=\"#6-扩展\" class=\"headerlink\" title=\"6.扩展\"></a>6.扩展</h3><p>其实在设置证书的位置，我们可以添加不用的验证方式，Alamofire提供的有6种:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">DefaultTrustEvaluator: Uses the default server trust evaluation while allowing you to control whether to validate the host provided by the challenge.</span><br><span class=\"line\">RevocationTrustEvaluator: Checks the status of the received certificate to ensure it hasn’t been revoked. This isn’t usually performed on every request due to the network request overhead it entails.</span><br><span class=\"line\">PinnedCertificatesTrustEvaluator: Uses the provided certificates to validate the server trust. The server trust is considered valid if one of the pinned certificates match one of the server certificates. This evaluator can also accept self-signed certificates.</span><br><span class=\"line\">PublicKeysTrustEvaluator: Uses the provided public keys to validate the server trust. The server trust is considered valid if one of the pinned public keys match one of the server certificate public keys.</span><br><span class=\"line\">CompositeTrustEvaluator: Evaluates an array of ServerTrustEvaluating values, only succeeding if all of them are successful. This type can be used to combine, for example, the RevocationTrustEvaluator and the PinnedCertificatesTrustEvaluator.</span><br><span class=\"line\">DisabledTrustEvaluator: This evaluator should only be used in debug scenarios as it disables all evaluation which in turn will always consider any server trust as valid. This evaluator should never be used in production environments!</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">let evaluators: [String: ServerTrustEvaluating] = [</span><br><span class=\"line\">    // By default, certificates included in the app bundle are pinned automatically.</span><br><span class=\"line\">    &quot;cert.example.com&quot;: PinnedCertificatesTrustEvaluator(),</span><br><span class=\"line\">    // By default, public keys from certificates included in the app bundle are used automatically.</span><br><span class=\"line\">    &quot;keys.example.com&quot;: PublicKeysTrustEvaluator(),</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">let manager = ServerTrustManager(evaluators: evaluators)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这是一个验证方式的键值对，key是服务器地址，value值是验证方式</p>\n<p>参考：<a href=\"https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#security\">https://github.com/Alamofire/Alamofire/blob/master/Documentation/AdvancedUsage.md#security</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clt2ofgll0008g0vg7zeq32xe","category_id":"clt2ofglj0004g0vgg1s4ac2j","_id":"clt2ofglp000eg0vgdp7508ft"},{"post_id":"clt2ofglf0001g0vgaibe6kgg","category_id":"clt2ofglj0004g0vgg1s4ac2j","_id":"clt2ofglq000ig0vgf438cw0h"},{"post_id":"clt2ofgli0003g0vg02967ano","category_id":"clt2ofglj0004g0vgg1s4ac2j","_id":"clt2ofglr000mg0vgexeu3wqq"},{"post_id":"clt2ofgll0007g0vg5rc944bc","category_id":"clt2ofglj0004g0vgg1s4ac2j","_id":"clt2ofgls000rg0vg1fx965km"},{"post_id":"clt2ofglr000pg0vgb13ofwxr","category_id":"clt2ofglr000lg0vg3h4520gq","_id":"clt2ofglu000wg0vg62j95vhv"},{"post_id":"clt2ofglm0009g0vgc0oue0li","category_id":"clt2ofglr000lg0vg3h4520gq","_id":"clt2ofglv0010g0vg75j07uve"},{"post_id":"clt2ofgls000qg0vg94iv1dks","category_id":"clt2ofglr000lg0vg3h4520gq","_id":"clt2ofglv0013g0vg162a3ix4"},{"post_id":"clt2ofglo000dg0vg0bcdba8z","category_id":"clt2ofglr000lg0vg3h4520gq","_id":"clt2ofglx001bg0vg1mdi1sms"},{"post_id":"clt2ofglw0017g0vgc5w4291e","category_id":"clt2ofglr000lg0vg3h4520gq","_id":"clt2ofgly001fg0vg3cul6c7e"},{"post_id":"clt2ofglp000hg0vghnvx0qhy","category_id":"clt2ofgls000sg0vg3eyi65lo","_id":"clt2ofglz001jg0vghcuf6sz2"},{"post_id":"clt2ofglq000kg0vgev9z3fvb","category_id":"clt2ofgls000sg0vg3eyi65lo","_id":"clt2ofglz001ng0vg12ubf0mv"},{"post_id":"clt2ofglt000ug0vg42y04acl","category_id":"clt2ofgly001gg0vg6jwfgisp","_id":"clt2ofgm1001tg0vgd7prcjtv"},{"post_id":"clt2ofglo000cg0vgb4ffgzag","category_id":"clt2ofgls000sg0vg3eyi65lo","_id":"clt2ofgm1001zg0vghzovhz44"},{"post_id":"clt2ofglo000cg0vgb4ffgzag","category_id":"clt2ofgm0001pg0vgg4cueqjc","_id":"clt2ofgm20022g0vg1tlxb82d"},{"post_id":"clt2ofglt000vg0vgdudng85k","category_id":"clt2ofgly001gg0vg6jwfgisp","_id":"clt2ofgm20025g0vg99i509wb"},{"post_id":"clt2ofglu000zg0vg37xxakzq","category_id":"clt2ofgly001gg0vg6jwfgisp","_id":"clt2ofgm20029g0vge0a85r8w"},{"post_id":"clt2ofglv0012g0vg0ndb0io1","category_id":"clt2ofgly001gg0vg6jwfgisp","_id":"clt2ofgm3002bg0vg7le09jpr"},{"post_id":"clt2ofglw0019g0vg2r2x68y6","category_id":"clt2ofgm20028g0vgfunc3i6w","_id":"clt2ofgm3002gg0vg5jzr71ic"},{"post_id":"clt2ofglx001dg0vggh43geas","category_id":"clt2ofgm20028g0vgfunc3i6w","_id":"clt2ofgm3002kg0vght509z4a"},{"post_id":"clt2ofgly001eg0vg6tvmbr3e","category_id":"clt2ofgm3002fg0vgbytcbk6z","_id":"clt2ofgm4002rg0vgfj5n501j"},{"post_id":"clt2ofgly001ig0vgduqhagrs","category_id":"clt2ofgm20028g0vgfunc3i6w","_id":"clt2ofgm5002vg0vgf9queflb"},{"post_id":"clt2ofglz001lg0vg6keway5p","category_id":"clt2ofgm20028g0vgfunc3i6w","_id":"clt2ofgm5002yg0vgfqum3gb9"},{"post_id":"clt2ofgm0001qg0vg33gxhp0z","category_id":"clt2ofgm20028g0vgfunc3i6w","_id":"clt2ofgm50032g0vg72bw9l7s"}],"PostTag":[{"post_id":"clt2ofglf0001g0vgaibe6kgg","tag_id":"clt2ofglk0005g0vgcnwm1v1a","_id":"clt2ofglq000jg0vg60mvaxcc"},{"post_id":"clt2ofglf0001g0vgaibe6kgg","tag_id":"clt2ofglm000bg0vgg4s76ko5","_id":"clt2ofglr000ng0vgawfs5l4o"},{"post_id":"clt2ofgli0003g0vg02967ano","tag_id":"clt2ofglk0005g0vgcnwm1v1a","_id":"clt2ofglv0011g0vg7xiuagdh"},{"post_id":"clt2ofgli0003g0vg02967ano","tag_id":"clt2ofglr000og0vg1dx19vl4","_id":"clt2ofglv0014g0vggp701ucl"},{"post_id":"clt2ofgli0003g0vg02967ano","tag_id":"clt2ofglm000bg0vgg4s76ko5","_id":"clt2ofglw0018g0vg76a66w2k"},{"post_id":"clt2ofgll0007g0vg5rc944bc","tag_id":"clt2ofglk0005g0vgcnwm1v1a","_id":"clt2ofglz001kg0vg1f0k41m2"},{"post_id":"clt2ofgll0007g0vg5rc944bc","tag_id":"clt2ofglr000og0vg1dx19vl4","_id":"clt2ofglz001mg0vgd20xaqlj"},{"post_id":"clt2ofgll0007g0vg5rc944bc","tag_id":"clt2ofglm000bg0vgg4s76ko5","_id":"clt2ofgm0001rg0vg7nwj4xda"},{"post_id":"clt2ofgll0008g0vg7zeq32xe","tag_id":"clt2ofglk0005g0vgcnwm1v1a","_id":"clt2ofgm1001sg0vg0m7fg0rk"},{"post_id":"clt2ofgll0008g0vg7zeq32xe","tag_id":"clt2ofglm000bg0vgg4s76ko5","_id":"clt2ofgm1001wg0vg6udhabe7"},{"post_id":"clt2ofglm0009g0vgc0oue0li","tag_id":"clt2ofglk0005g0vgcnwm1v1a","_id":"clt2ofgm1001xg0vgbdc3dg2l"},{"post_id":"clt2ofglm0009g0vgc0oue0li","tag_id":"clt2ofglz001og0vg52h08ccw","_id":"clt2ofgm20021g0vg1rqdd8cy"},{"post_id":"clt2ofglo000cg0vgb4ffgzag","tag_id":"clt2ofglk0005g0vgcnwm1v1a","_id":"clt2ofgm20023g0vgeffagwze"},{"post_id":"clt2ofglo000cg0vgb4ffgzag","tag_id":"clt2ofgm1001ug0vg1a0bc2aw","_id":"clt2ofgm20027g0vgbbxx5kdy"},{"post_id":"clt2ofglo000dg0vg0bcdba8z","tag_id":"clt2ofglk0005g0vgcnwm1v1a","_id":"clt2ofgm3002eg0vg0pam9hev"},{"post_id":"clt2ofglo000dg0vg0bcdba8z","tag_id":"clt2ofglz001og0vg52h08ccw","_id":"clt2ofgm3002hg0vg2mxo3jzk"},{"post_id":"clt2ofglo000dg0vg0bcdba8z","tag_id":"clt2ofgm20026g0vg3pxa0m0x","_id":"clt2ofgm3002jg0vgb185dc33"},{"post_id":"clt2ofglo000dg0vg0bcdba8z","tag_id":"clt2ofgm2002ag0vg8i805chw","_id":"clt2ofgm3002lg0vg63d3d453"},{"post_id":"clt2ofglp000hg0vghnvx0qhy","tag_id":"clt2ofgm3002dg0vgg5ey0d2x","_id":"clt2ofgm4002og0vg4ssugh7q"},{"post_id":"clt2ofglq000kg0vgev9z3fvb","tag_id":"clt2ofglk0005g0vgcnwm1v1a","_id":"clt2ofgm4002pg0vgebml35tf"},{"post_id":"clt2ofglq000kg0vgev9z3fvb","tag_id":"clt2ofgm3002ig0vg9c02fkfv","_id":"clt2ofgm4002tg0vgdsp8703y"},{"post_id":"clt2ofglr000pg0vgb13ofwxr","tag_id":"clt2ofglk0005g0vgcnwm1v1a","_id":"clt2ofgm5002xg0vg1ine3xy7"},{"post_id":"clt2ofglr000pg0vgb13ofwxr","tag_id":"clt2ofglz001og0vg52h08ccw","_id":"clt2ofgm5002zg0vg7lg9bn6p"},{"post_id":"clt2ofglr000pg0vgb13ofwxr","tag_id":"clt2ofgm4002sg0vg8t6rbonc","_id":"clt2ofgm50031g0vgc6zma9i9"},{"post_id":"clt2ofgls000qg0vg94iv1dks","tag_id":"clt2ofglk0005g0vgcnwm1v1a","_id":"clt2ofgm60034g0vggfhoamnb"},{"post_id":"clt2ofgls000qg0vg94iv1dks","tag_id":"clt2ofglz001og0vg52h08ccw","_id":"clt2ofgm60035g0vg83y03m03"},{"post_id":"clt2ofgls000qg0vg94iv1dks","tag_id":"clt2ofgm4002sg0vg8t6rbonc","_id":"clt2ofgm60037g0vg17cj4pxo"},{"post_id":"clt2ofglt000ug0vg42y04acl","tag_id":"clt2ofgm50033g0vggf3u3nsg","_id":"clt2ofgm60038g0vgbh7camjq"},{"post_id":"clt2ofglt000vg0vgdudng85k","tag_id":"clt2ofgm50033g0vggf3u3nsg","_id":"clt2ofgm6003ag0vgcp5o6r5m"},{"post_id":"clt2ofglu000zg0vg37xxakzq","tag_id":"clt2ofgm60039g0vg64xm1bbx","_id":"clt2ofgm7003dg0vg1635aoa5"},{"post_id":"clt2ofglu000zg0vg37xxakzq","tag_id":"clt2ofgm6003bg0vg7l659svh","_id":"clt2ofgm7003eg0vgeoktb8zb"},{"post_id":"clt2ofglv0012g0vg0ndb0io1","tag_id":"clt2ofgm6003cg0vgfu9fhogx","_id":"clt2ofgm7003gg0vgdk0ffuiu"},{"post_id":"clt2ofglw0017g0vgc5w4291e","tag_id":"clt2ofglk0005g0vgcnwm1v1a","_id":"clt2ofgm7003jg0vgf3v7g8ml"},{"post_id":"clt2ofglw0017g0vgc5w4291e","tag_id":"clt2ofglz001og0vg52h08ccw","_id":"clt2ofgm7003kg0vgbhakf2jb"},{"post_id":"clt2ofglw0017g0vgc5w4291e","tag_id":"clt2ofgm4002sg0vg8t6rbonc","_id":"clt2ofgm7003mg0vg6y9cexm3"},{"post_id":"clt2ofglw0019g0vg2r2x68y6","tag_id":"clt2ofgm4002sg0vg8t6rbonc","_id":"clt2ofgm8003ng0vg2nt9g8id"},{"post_id":"clt2ofglx001dg0vggh43geas","tag_id":"clt2ofgm7003lg0vg4fi00uhr","_id":"clt2ofgm8003qg0vgemtc5prq"},{"post_id":"clt2ofglx001dg0vggh43geas","tag_id":"clt2ofgm8003og0vgfzlf36gx","_id":"clt2ofgm8003rg0vgc1o1eih5"},{"post_id":"clt2ofgly001eg0vg6tvmbr3e","tag_id":"clt2ofgm8003pg0vg7o9ifvpf","_id":"clt2ofgm8003vg0vgesceevbn"},{"post_id":"clt2ofgly001eg0vg6tvmbr3e","tag_id":"clt2ofgm8003sg0vgdo2t7fob","_id":"clt2ofgm8003wg0vgb15shm2n"},{"post_id":"clt2ofgly001eg0vg6tvmbr3e","tag_id":"clt2ofgm8003tg0vge5ag51ll","_id":"clt2ofgm9003yg0vg03irbato"},{"post_id":"clt2ofgly001ig0vgduqhagrs","tag_id":"clt2ofgm4002sg0vg8t6rbonc","_id":"clt2ofgm9003zg0vg4a9q6giw"},{"post_id":"clt2ofglz001lg0vg6keway5p","tag_id":"clt2ofgm4002sg0vg8t6rbonc","_id":"clt2ofgm90041g0vgfpgo7wl2"},{"post_id":"clt2ofgm0001qg0vg33gxhp0z","tag_id":"clt2ofgm7003lg0vg4fi00uhr","_id":"clt2ofgm90043g0vg7p2b9yxe"},{"post_id":"clt2ofgm0001qg0vg33gxhp0z","tag_id":"clt2ofgm90042g0vgded9184a","_id":"clt2ofgm90044g0vg8ykggoly"}],"Tag":[{"name":"技术","_id":"clt2ofglk0005g0vgcnwm1v1a"},{"name":"PyQt4","_id":"clt2ofglm000bg0vgg4s76ko5"},{"name":"坑集合","_id":"clt2ofglr000og0vg1dx19vl4"},{"name":"总结","_id":"clt2ofglz001og0vg52h08ccw"},{"name":"打包","_id":"clt2ofgm1001ug0vg1a0bc2aw"},{"name":"小程序","_id":"clt2ofgm20026g0vg3pxa0m0x"},{"name":"前端","_id":"clt2ofgm2002ag0vg8i805chw"},{"name":"其他","_id":"clt2ofgm3002dg0vgg5ey0d2x"},{"name":"搭建","_id":"clt2ofgm3002ig0vg9c02fkfv"},{"name":"iOS","_id":"clt2ofgm4002sg0vg8t6rbonc"},{"name":"心得","_id":"clt2ofgm50033g0vggf3u3nsg"},{"name":"游记","_id":"clt2ofgm60039g0vg64xm1bbx"},{"name":"大理","_id":"clt2ofgm6003bg0vg7l659svh"},{"name":"青春","_id":"clt2ofgm6003cg0vgfu9fhogx"},{"name":"Swift","_id":"clt2ofgm7003lg0vg4fi00uhr"},{"name":"SwiftUI","_id":"clt2ofgm8003og0vgfzlf36gx"},{"name":"WEB","_id":"clt2ofgm8003pg0vg7o9ifvpf"},{"name":"SDK","_id":"clt2ofgm8003sg0vgdo2t7fob"},{"name":"音视频","_id":"clt2ofgm8003tg0vge5ag51ll"},{"name":"安全","_id":"clt2ofgm90042g0vgded9184a"}]}}